{
  "hash": "7833678557f13a070031a6bf94d16418",
  "result": {
    "markdown": "---\ntitle: \"Logistic Regression \"\nauthor: \"Francois de Ryckel\"\ndate: \"2024-05-15\"\ndescription: 'A dive into Logistic Regression.'\ncategories: [logistic-regression]\neditor: source\ndate-modified: \"2024-05-22\"\n---\n\nLogistic Regression predict categorical variables based on quantitative data.  It does this using the **logit** function \n\n$$logit = log(oods) = w_0+w_1x_1+w_2x_2+ \\cdots + w_nx_n$$\n\nThe logit is the log of the odds.  This can be mapped back into a probability (with the sigmoid function) and then back to a class.  \n\nThe logistic sigmoid is defined as \n$$f(x) = \\frac{1}{1+e^{-x}} = \\frac{e^x}{e^x+1}$$\nThe sigmoid allows to transform values from $-\\infty \\lt x \\lt \\infty$ into a $-1 < f(x) < 1$ interval. \n\nAssume p(x) be the linear function. However, the problem is that p is the probability that should vary from 0 to 1 whereas p(x) is an unbounded linear equation. To address this problem, let us assume, log p(x) be a linear function of x and further, to bound it between a range of (0,1), we will use logit transformation. \n\n$$log \\left( \\frac{p(x)}{1-p(x)} \\right) = \\alpha_0 + \\alpha \\cdot x$$\n\nSolve for $p(x)$ using exponential on both sides, isolate $p(x)$ and factoringthe coefficient. We get: \n$$p(x) = \\frac{e^{\\alpha_0 + \\alpha \\cdot x}}{e^{\\alpha_0 + \\alpha \\cdot x}+1}$$\n\nSince Logistic regression predicts probabilities, we can fit it using likelihood. Therefore, for each training data point x, the predicted class is y.  Now, the likelihood can be written as:\n$$L(\\alpha_0, \\alpha) = \\prod_{i=1}^n p(x_i)^{y_i} \\left(1-p(x_i) \\right)^{1-y_i}$$\nTake log on both side, we can transform that product into a sum. \n$$Log(L(\\alpha_0, \\alpha)) = \\sum_{i=1}^n y_i \\cdot log(p(x_i)) + (1-y_i) \\cdot log((1-p(x_i) )$$\n\n# Examples \n\n::: {.panel-tabset}\n\n## Python \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('../../../raw_data/XME.csv', index_col = 0, parse_dates = True, dayfirst=True)\ndf = df.sort_index(ascending=True, inplace=False)\ndf.info()\ndf.head(5)\n\nplt.plot(df['close'])\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 4500 entries, 2006-06-22 to 2024-05-08\nData columns (total 12 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   open              4500 non-null   float64\n 1   high              4500 non-null   float64\n 2   low               4500 non-null   float64\n 3   close             4500 non-null   float64\n 4   adjClose          4500 non-null   float64\n 5   volume            4500 non-null   int64  \n 6   unadjustedVolume  4500 non-null   int64  \n 7   change            4500 non-null   float64\n 8   changePercent     4500 non-null   float64\n 9   vwap              4500 non-null   float64\n 10  label             4500 non-null   object \n 11  changeOverTime    4500 non-null   float64\ndtypes: float64(9), int64(2), object(1)\nmemory usage: 457.0+ KB\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-2.png){width=581 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf.describe().T\n\n# checking for missing values\n#df.isnull.sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>open</th>\n      <td>4500.0</td>\n      <td>4.224556e+01</td>\n      <td>1.496800e+01</td>\n      <td>11.7800</td>\n      <td>3.001000e+01</td>\n      <td>4.150000e+01</td>\n      <td>5.173500e+01</td>\n      <td>9.535000e+01</td>\n    </tr>\n    <tr>\n      <th>high</th>\n      <td>4500.0</td>\n      <td>4.279536e+01</td>\n      <td>1.514187e+01</td>\n      <td>12.1900</td>\n      <td>3.040000e+01</td>\n      <td>4.195500e+01</td>\n      <td>5.241250e+01</td>\n      <td>9.609000e+01</td>\n    </tr>\n    <tr>\n      <th>low</th>\n      <td>4500.0</td>\n      <td>4.160857e+01</td>\n      <td>1.472447e+01</td>\n      <td>11.3800</td>\n      <td>2.963000e+01</td>\n      <td>4.100500e+01</td>\n      <td>5.110250e+01</td>\n      <td>9.353000e+01</td>\n    </tr>\n    <tr>\n      <th>close</th>\n      <td>4500.0</td>\n      <td>4.220901e+01</td>\n      <td>1.494711e+01</td>\n      <td>11.9700</td>\n      <td>2.998750e+01</td>\n      <td>4.143500e+01</td>\n      <td>5.175000e+01</td>\n      <td>9.458000e+01</td>\n    </tr>\n    <tr>\n      <th>adjClose</th>\n      <td>4500.0</td>\n      <td>3.686377e+01</td>\n      <td>1.241720e+01</td>\n      <td>10.6000</td>\n      <td>2.709750e+01</td>\n      <td>3.530500e+01</td>\n      <td>4.583000e+01</td>\n      <td>7.545000e+01</td>\n    </tr>\n    <tr>\n      <th>volume</th>\n      <td>4500.0</td>\n      <td>3.141904e+06</td>\n      <td>2.199371e+06</td>\n      <td>0.0000</td>\n      <td>1.769072e+06</td>\n      <td>2.725635e+06</td>\n      <td>4.039529e+06</td>\n      <td>2.454848e+07</td>\n    </tr>\n    <tr>\n      <th>unadjustedVolume</th>\n      <td>4500.0</td>\n      <td>3.141904e+06</td>\n      <td>2.199371e+06</td>\n      <td>0.0000</td>\n      <td>1.769072e+06</td>\n      <td>2.725635e+06</td>\n      <td>4.039529e+06</td>\n      <td>2.454848e+07</td>\n    </tr>\n    <tr>\n      <th>change</th>\n      <td>4500.0</td>\n      <td>-3.655796e-02</td>\n      <td>8.801642e-01</td>\n      <td>-11.2400</td>\n      <td>-4.200000e-01</td>\n      <td>-2.001000e-02</td>\n      <td>3.900000e-01</td>\n      <td>3.980000e+00</td>\n    </tr>\n    <tr>\n      <th>changePercent</th>\n      <td>4500.0</td>\n      <td>-6.299599e-02</td>\n      <td>2.019533e+00</td>\n      <td>-13.8100</td>\n      <td>-1.110000e+00</td>\n      <td>-5.836411e-02</td>\n      <td>1.020000e+00</td>\n      <td>1.414000e+01</td>\n    </tr>\n    <tr>\n      <th>vwap</th>\n      <td>4500.0</td>\n      <td>4.221463e+01</td>\n      <td>1.493961e+01</td>\n      <td>11.8625</td>\n      <td>2.999438e+01</td>\n      <td>4.150750e+01</td>\n      <td>5.178875e+01</td>\n      <td>9.488750e+01</td>\n    </tr>\n    <tr>\n      <th>changeOverTime</th>\n      <td>4500.0</td>\n      <td>-6.299599e-04</td>\n      <td>2.019533e-02</td>\n      <td>-0.1381</td>\n      <td>-1.110000e-02</td>\n      <td>-5.836411e-04</td>\n      <td>1.020000e-02</td>\n      <td>1.414000e-01</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## R\n\n\n\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}