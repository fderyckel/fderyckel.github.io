{
  "hash": "0b0dc8aff319b1ecfb3ebb708cc44a14",
  "result": {
    "markdown": "---\ntitle: \"04 - Binomials models for Quantitative Finance\"\nauthor: \"Francois de Ryckel\"\ndate: \"2023-04-06\"\ndescription: 'Creating a basic or binomial model on pricing an option.'\ncategories: [R-code, quant-finance, binomial_models]\neditor: source\ndate-modified: \"2023-06-14\"\n---\n\n\n# Binomial models \n\nThe idea is to develop an intuition for delta hedging and risk-neutrality when valuing an option. \n\n![Stock and Option Value perspectives](draw1.jpg)\n\n* S is the stock price at the start (time $t=0$) \n* $\\delta t$ is a one increment of time (one unit of time)\n* $u$ is the factor when stock price rise\n* $v$ is the factor when stock price fall \n    * $0<v<1<u$\n* $V$ is the option value at time $t=0$\n* $V^+$ is the option value at expiration when stock is ITM (case of a call option)\n* $V^-$ is the option value at expiration when stock is OTM (case of a call option)\n\nNow we are going to introduce $\\Delta$ as the amount of stock to hedge (a percentage of a stock) to be risk-neutral. \nWe can model our stock and option as part of a portfolio (we call it $\\Pi$). Hence, \n$$\\Pi = V - \\Delta \\cdot S$$\nAt this stage, we are assuming that the probability to go up or down is the same (it's basically irrelevant in this case).  \n\n![Option value with hedging](draw2.jpg)\n\nIf we want to hedge the stock to be risk-neutral, then at expiration we should have this equation \n\n$$V^+ - \\Delta us = V^--\\Delta vs$$\nSolving for $\\Delta$, we get: \n\n$$\\Delta = \\frac{V^+-V^-}{(u-v)S} = \\frac{\\text{range of options payoff}}{\\text{range of asset prices}}$$ {#eq-delta1}\n\nIn other words, we could see $\\Delta$ as the rate of change of the option price in function of the stock price. $\\Delta = \\frac{\\partial{V}}{\\partial{S}}$\n\nOnce we found $\\Delta$, we could find $V$ by just making today's value of the trade = tomorrow's value of the trade (at expiration).  Just solve for $V$ \n$$V - \\Delta S = V^- - \\Delta vS$$ or \n$$V - \\Delta S = V^+ - \\Delta uS$$ which ever is easier to calculate.  \n\nNow, of course, cash is not free and there is a time value associated to it. In that sense, today's value for the trade should be equal a discounted value of tomorrow's trade value (at expiration).  \n$$\\Pi = V - \\Delta S = \\frac{1}{1+r \\delta t} \\left(V^- - \\Delta vS \\right)$$\n\n* $r$ is the value of the risk-free asset \n* we are dealing with annualized values, if assets expires in one month and risk-free asset is let's say 3%, we would multiply 3% by 21 days or $0.03 \\cdot \\frac{21}{252}$\n\nUsing our value of $\\Delta$ from @eq-delta1, we can isolate $V$ as \n$$V = \\left(\\frac{V^+-V^-}{u-v} \\right) + \\frac{1}{1+r \\delta t} \\left(V^- - \\Delta vS \\right)$$ {#eq-optionvalue1}\n\n::: {.callout-note} \n\n# Example\n\nA stock is trading at \\$100.  A call option with strike price of \\$100.  Stock can either go to \\$103 or \\$98.  \n\n\n```{mermaid}\nflowchart LR \n  100 --> 103\n  100 --> 98\n```\n\n\n\n* $V^+ = 3$\n* $V^- = 0$\n* $\\Delta = \\frac{3-0}{103-98} = \\frac{3}{5}$\n* $V - \\Delta S = V^+ - \\Delta us$, plugging the value from above we get $V = \\$1.2$\n\n:::\n\n\n\n## The Risk-free World\n\nUsing the same idea as earlier and introducing some probabilities. \n\n\n```{mermaid}\nflowchart LR\n  S -- p' --> uS\n  S -- 1-p' --> vS\n```\n\n\nFrom a probabilistic perspective we could write: \n$$S = p'uS + (1-p')vS$$ \nOr in the presence of a risk free asset, \n$$S = \\frac{1}{1+r \\delta t} \\left(p' uS + (1-p')vS \\right)$$ \n\nWe could isolate $p'$ in this last equation: \n$$s + s r \\delta t = p' u s + vs - p'v s$$\n$$p' = \\frac{s + s r \\delta t - vs}{us - vs}$$\n$$p' = \\frac{1+r \\delta t - v}{u-v}$$ {#eq-pprime1}\n\n\n```{mermaid}\nflowchart LR\n  V -- p' --> V+\n  V -- 1-p' --> V-\n```\n\n\nTo find $V$: \n$$V = p' V^+ + (1-p') V^-$$\n\nInteresting to note that the option price $V$ is like an expectation (the sum of the probability) and $p'$ is from @eq-pprime1\n\nActually, we should also include the discounted factor (V is the present value of the expectation): \n$$V = \\frac{1}{1 + r \\delta t} \\cdot \\left( p' V^+ + (1-p') V^- \\right)$$\n\n## Mixing real-world and risk-free world \n\nNow if we collide both world: the real-world with drift and volatility and the risk-free world with $p'$: we can set up this 2 equations: \nOne for the expected mean rate of change of prices and another for the variance of these rate of change. \n\n$$\n\\begin{equation} \n  \\begin{cases}\n    \\mu S \\delta t = puS+(1-p)vS-S \\\\\n    \\sigma^2S^2dt = S^2 (p \\cdot [u-1-(pu + (1-p)v-1)]^2 + (1-p) \\cdot [v-1-(pu + (1-p)v-1)]^2)\n  \\end{cases}\n\\end{equation} \n$$\n\n(TODO re-write these 2 equations) \n\n2 equations and 3 unknowns, we can choose a solution (the prettiest one!) among the infinitely many: \n\n* $u = 1 + \\sigma \\sqrt{\\delta t}$\n* $v = 1 - \\sigma \\sqrt{\\delta t}$\n* $p = \\frac{1}{2} + \\frac{\\mu \\sqrt{\\delta t}}{2 \\sigma}$\n* $p' = \\frac{1}{2} + \\frac{r \\sqrt{\\delta t}}{2 \\sigma}$   $p'$ is the risk-neutral probability. \n\n## The binomial tree \n\n* After one time step $\\delta t$ our stock, initially at $S$ will either be at $uS$ or $vS$.  \n* After two time steps, the stock will either be at $u^2S$ or $uvS$ or $v^2S$\n* After three time steps, the stock will either be at $u^3S$ or $u^2vS$ or $uv^2S$ or finally $v^3S$\n* etc. \n\nA bit of a crude representation using Geogebra \n\n![Binomial tree representation](binomial-tree.png)\n\n\nUsing the equations from the previous sections, we can now create a function to price the value of an option.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_option_price <- function(spot, strike, rfr, sigma, time, steps) {\n  dt = time/steps            # get delta_t\n  u = 1 + sigma * sqrt(dt)   # multiplying factor when asset rise\n  v = 1 - sigma * sqrt(dt)\n  p_prime = 0.5 + (rfr * sqrt(dt)/(2*sigma))\n  discount_factor = 1 / (1 + rfr * dt)\n  \n  # Calculating vector of prices at maturity \n  s = rep(0, steps+1)   # initialize a vector for prices at maturity - (terminal nodes on the trees)\n  s[1] = spot * v^steps # #initialize the first end-price - (the most bottom right node of the tree)\n  for (i in 2:(steps+1)) { \n    s[i] = s[i-1] * u/v # this is the trick: to go up one leave = going back one step and then up\n  }\n  \n  # Calculating vector of options values at maturity \n  opt = rep(0, steps + 1)\n  for (i in 1:(steps+1)) { \n    opt[i] = max(0, s[i] - strike)\n  }\n  \n  # We have now to work backward and up in the trees (from bottom right and up)\n  # We know the final option value.\n  # We need know to calculate the options in the intermediates nodes\n  for (i in steps:1) {\n    for (j in 1:i) {\n      opt[j] = discount_factor * (p_prime * opt[j+1] + (1 - p_prime)*opt[j])\n    }\n  }\n  #print(glue::glue('Asset price for each time step:', s))\n  #print(glue::glue('Option price for each time step: ', opt))\n  return(opt)\n}\n```\n:::\n\n\nLet's try our function to get some results\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_option_price(spot = 100, strike = 100, rfr = 0.03, sigma = 0.1, time = 1, steps = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5.415051  8.117623 11.822154 16.506917 21.550625\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}