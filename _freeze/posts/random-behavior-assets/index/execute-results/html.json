{
  "hash": "ba7a11b9f33fa8923b85572c70d669ad",
  "result": {
    "markdown": "---\ntitle: \"Random Behavior of Financial Assets\"\nauthor: \"Francois de Ryckel\"\ndate: \"2023-04-18\"\ncategories: [R-code, quant-finance, binomial_models]\neditor: source\ndate-modified: \"2023-04-20\"\n---\n\n\nOne of the main pillar of quantitative finance is the assumption that assets' returns behave in a random manner.  Assets returns are normally distributed.  It is a poor assumption as asset's return are usually not normally distributed (fat tails, skewness, etc.), but it is one that is considered when doing approaching finance with a quantitative finance. \n\n# Discrete approach  \n\n$$R_i = \\frac{S_{i+1}-S_i}{S_i}$$ {#eq-ret1}\n$$\\bar{R} = \\frac{\\sum_{i=1}^{n} R_i}{n}$$\n\n* $R_i$ = return of an asset at time i\n* $S_i$ = price of an asset at time i\n\nIf returns are normally distributed, we could re-write @eq-ret1 as \n$$R_i = \\frac{S_{i+1} - S_i}{S_i} = \\bar{R} + Std \\phi$$ {#eq-ret2}\n\n* Std of returns (Std): $\\sqrt{\\frac{1}{n-1} \\sum_{i=1}^{n}(R_i - \\bar{R})^2}$\n* $\\Phi$ is just a number taken from the normal distribution with mean = 0 and std = 1 \n* $\\Phi = \\frac{1}{\\sqrt{2 \\pi}} \\cdot e^{- \\frac{x^2}{2}}$ \n\n# Continuous approach \n\nReturns should scale with time. \n\nMean returns = $\\mu \\cdot \\delta t$\n\n* $\\mu$ = Annualized means returns on a continuous basis (usually not known, or hard to know)\n* $\\delta t$ = a small time increment \n\n$$R_i = \\frac{S_{i+1} - S_i}{S_i} = \\mu \\delta t$$\n$$S_{i+1} - S_i= S_i \\mu \\delta t$$\n$$S_{i+1} = S_i \\cdot (1 +  \\mu \\delta t)$$ {#eq-asset-price1}\n\nWe could also rewrite @eq-asset-price1 so it depends of the initial (starting) price, instead of the previous price.  \n\n$S_n = S_0 (1+\\mu \\delta t)^n$\n\nUsing natural log: \n\n$S_n = S_0 e^{log (1+\\mu \\delta t)^n} = S_0 e^{n \\cdot log{(1+\\mu \\delta t)}}$ \n\nWe could argue that $log(1+\\mu \\delta t) = \\mu \\delta t$ as $log(1+x) = x$ for small values of x. \n\n$$S_n = S_0 \\cdot e^{n \\mu \\delta t}$$ {#eq-asset-price2} \n\nNow, $n \\cdot \\delta t$ is the same as $t$.  Hence, \n\n::: {.callout-tip appearance=\"minimal\"}\n$$S(t) = S_0 \\cdot e^{\\mu t}$$\n\nAnd the standard deviation of returns = $\\sigma \\sqrt{\\delta t}$\n\n* unit of $\\mu = \\frac{1}{t}$ \n* unit of $\\sigma = \\frac{1}{\\sqrt{t}}$ \n::: \n\nFrom earlier @eq-ret2, we can re-write it as: $R_i = \\bar{R} + Std \\phi = \\mu \\delta t + \\sigma \\sqrt{\\delta t} \\phi$\n\n$$S_{i+1} - S_i= S_i \\mu \\delta t + S_i \\sigma \\sqrt{\\delta t} \\phi$$ \n\n* $S_{i+1} - S_i = dS$\n* $S_i = S(t)$\n* $\\delta t = dt$ \n* $\\phi \\sqrt{\\delta t} = dX$ where $dX$ is a random variable with mean = 0 and variance = dt.  Hence $E[dX] = 0$ and $E[(dX)^2] = dt$ \n\n::: {.callout-tip appearance=\"minimal\"}\n$$dS = S \\mu dt + S \\sigma dX$$ \nThis stochastic differential equation on the change of prices assume: \n\n* returns are treated as random \n* returns are assumed to be normally distributed (again not totally exact) \n* prices (S) are modelled as a log-normal walk (SDE)\n::: \n\n# Practice in R \n\nLet's use the previous note with a SBUX as a ticker.   \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)    # read_csv()\nlibrary(dplyr)    # select(), filter(), mutate()\n\ndf <- read_csv('../../raw_data/SBUX.csv') |> \n  select(date, adjClose) |> \n  filter(date > '2019-10-01') |> \n  mutate(ret = (adjClose - lag(adjClose)) / lag(adjClose))\n\nr_bar = mean(df$ret, na.rm = T)\nstdev = sd(df$ret, na.rm = T)\n\nmu = r_bar / (1/252)\nsigma = stdev / sqrt(1/252)\n```\n:::\n\n\nThe average daily return of SBUX over the last 3-ish year is -1.3\\times 10^{-4} and using $\\bar{R} = \\mu \\delta t$ , or $\\mu = \\frac{\\bar{R}}{\\delta t}$ and in our case $\\delta t = \\frac{1}{252}$; hence annualized returns is  -3.38 % with standard deviation of 33.868 % annualized. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}