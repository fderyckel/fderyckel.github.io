<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>QUANT dira-t-on?</title>
<link>https://fderyckel.github.io/blog.html/blog.html</link>
<atom:link href="https://fderyckel.github.io/blog.html/blog.xml" rel="self" type="application/rss+xml"/>
<description>Curating notes from a Quant learning journey.</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Mon, 13 Nov 2023 17:00:00 GMT</lastBuildDate>
<item>
  <title>KNN</title>
  <dc:creator>François de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/knn/index.html</link>
  <description><![CDATA[ 




<p>Some very basic ML using KNN and python and the tidymodel framework.</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>KNN stands for <em>K Nearest Neighbor</em>.</p>
<p>KNN is not really a machine learning techniques in the sense that it trains a model. It can be used for both classification and regression. The intuition behind the model is that observations that are closed to each other (close in terms of distance in a hyperplane) have similar labels (classification) or values (regression).</p>
<p>As mentioned, there is no training phase when using KNN. Instead, there is only prediction.<br>
We take an observation and check the <strong>K</strong> observations next to it. We check the label of the K observations next to our data to be labeled and using a majority voting system we assign the label. For regression, it calculates the average or weighted average of the target values of the K neighbors to predict the value for the input data point.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/knn/knn01.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">KNN illustration</figcaption>
</figure>
</div>
<p>Looking at the above image, we can see that, using k=3, the 3 observations closest to the star (our data to be classified) are all brown circle. Hence we should classify the star as a brown circle instead of an orange rectangle.</p>
<div class="callout callout-style-simple callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Scaling
</div>
</div>
<div class="callout-body-container callout-body">
<p>Because KNN use distance, it is important to scale the data as a pre-processing steps. Otherwise, features with big scale (let’s say price) will skew the distance against features with lower scale (let’s say percentage).</p>
</div>
</div>
<section id="pros-cons-of-knn" class="level2">
<h2 class="anchored" data-anchor-id="pros-cons-of-knn">Pros-Cons of KNN</h2>
<section id="pros" class="level3">
<h3 class="anchored" data-anchor-id="pros">Pros</h3>
<ul>
<li>KNN is non-parametric. It’s not making any assumptions on the the type of distribution of the data.</li>
</ul>
</section>
<section id="cons" class="level3">
<h3 class="anchored" data-anchor-id="cons">Cons</h3>


</section>
</section>
</section>

 ]]></description>
  <category>ML</category>
  <category>KNN</category>
  <guid>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/knn/index.html</guid>
  <pubDate>Mon, 13 Nov 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Discrete Probability Simulations in R</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/proba-quant/discrete-simulations/index.html</link>
  <description><![CDATA[ 




<p>The idea behind this post is to collect various numerical methods to simulate discrete probability problems.</p>
<section id="expectation-of-a-uniform-variable." class="level1">
<h1>Expectation of a uniform variable.</h1>
<p>Question: what is the expectation if one square a number that is picked at random out of a hat (with replacement) that contains the numbers 1 to 100.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">expec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(expec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3376.422</code></pre>
</div>
</div>
<p>The calculated expectation should be: <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bx=1%7D%5E%7B100%7D%20x%5E2%20P(X=x)%20=%20%5Csum_%7Bx=1%7D%5E%7B100%7D%20x%5E2%20%5Cfrac%7B1%7D%7Bn%7D%20=%20%5Cfrac%7B101%20%5Ccdot%20201%7D%7B6%7D%20=%203383.5"></p>
<p>We could connect this to the <a href="../../../posts/proba-quant/jensen-inequality/index.html">Jensen’s inequality</a> (as we are dealing with a convex function) and show that indeed the expectation of the function is greater than the function of the expectation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">exp_square <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-2">square_exp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(exp_square)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3389.124</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(square_exp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2550.72</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>statistics</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://fderyckel.github.io/blog.html/posts/proba-quant/discrete-simulations/index.html</guid>
  <pubDate>Mon, 13 Nov 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Jensen’s Inequality</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/proba-quant/jensen-inequality/index.html</link>
  <description><![CDATA[ 




<p>Jensen’s inequality from <a href="https://en.wikipedia.org/wiki/Johan_Jensen_(mathematician)">Johan Jensen</a>, Danish Mathematician, has popped up several times through my quantitative finance journey. As I never explicitly dealt with it, I thought I’ll make a post about it.</p>
<p>The question Jensen’s inequality address is how does the mean of a function relate the function of the mean. First, we’ll check how in the case of linear functions, there are no difference there. Then we’ll go on more complex functions where their concavity (aka second derivative) matters.</p>
<section id="linear-transformations-of-random-variables" class="level1">
<h1>Linear transformations of Random Variables</h1>
<p>What happen when we transform in a linear way a random variable?</p>
<p>We claim that as long as <em>f</em> is linear: <strong>mean(f(x)) == f(mean(x))</strong></p>
<p>Let’s use an easy &amp; simple example. A fair dice is thrown. Let’s imagine a payoff which is a linear function: say, the payoff is <img src="https://latex.codecogs.com/png.latex?2%20*%20%5Ctext%7B(face%20of%20the%20die)%7D%20+%203">.</p>
<p>In this case <img src="https://latex.codecogs.com/png.latex?X"> is a discrete random variable that can take the values <img src="https://latex.codecogs.com/png.latex?%7B1,%202,%203,%204,%205,%206%7D">.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function to define the payoff</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> payoff(x): </span>
<span id="cb1-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's define the outcome of our discrete random variable. </span></span>
<span id="cb1-8">outcomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's calculate the payoff for each outcome</span></span>
<span id="cb1-11">payoffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [payoff(outcome) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> outcome <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> outcomes]</span></code></pre></div>
</div>
<p>With linear transformations and in this example, we have <strong>the mean of the payoff that is equal to the payoff of the mean</strong>.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The mean of the outcomes [1, 2, 3, 4, 5, 6] is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(outcomes)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The payoff of the mean is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>payoff(np.mean(outcomes))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The payoffs are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>payoffs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and the mean of the payoffs is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(payoffs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The mean of the outcomes [1, 2, 3, 4, 5, 6] is 3.5
The payoff of the mean is 10.0
The payoffs are [5, 7, 9, 11, 13, 15] and the mean of the payoffs is 10.0</code></pre>
</div>
</div>
<p>Now this equality doesn’t hold anymore when it comes to non-linear function.</p>
</section>
<section id="convex-transformations-of-random-variables" class="level1">
<h1>Convex transformations of Random Variables</h1>
<p>The <strong>Jensen’s inequality</strong> is in regards to <strong>convex</strong> functions (aka its second derivative is positive on an interval) and states that <em>the mean of the transformation is always greater or equal to the transformation of the mean</em>.</p>
<p>Using the language of probability, we can write that for any convex functions <span id="eq-jensineq"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Bf(X)%5D%20%5Cgeq%20f(%5Cmathbb%7BE%7D%5BX%5D)%20%5Ctag%7B1%7D"></span></p>
<p>Again let’s take an easy example with the convex function <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20X%5E2">. We will use the same inputs (the roll of a die) as the above example.</p>
<p>The intuition is that the mean of squared numbers is greater than the square of the mean numbers. This is because bigger number squared will add extreme value (on the high side) to the mean.</p>
<p>Using a small Python script.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">outcomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># defining our transform functions. </span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> payoff(x): </span>
<span id="cb4-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-6"></span>
<span id="cb4-7">payoffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [payoff(outcome) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> outcome <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> outcomes]</span>
<span id="cb4-8">payoffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>[1, 4, 9, 16, 25, 36]</code></pre>
</div>
</div>
<p>Let’s now calculate both <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Bf(X)%5D"> and <img src="https://latex.codecogs.com/png.latex?f(%5Cmathbb%7BE%7D%5BX%5D)"></p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The mean of the transformed outcomes is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(np.mean(payoffs), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The transformed of the mean is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>payoff(np.mean(outcomes))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The mean of the transformed outcomes is 15.167
The transformed of the mean is 12.25</code></pre>
</div>
</div>
<p>When is it an equality then? When all the observations in the sets have the exact same values, then <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Bf(X)%5D%20=%20f(%5Cmathbb%7BE%7D%5BX%5D)">.</p>
<p>Visually, we could see this on the parabola. <img src="https://fderyckel.github.io/blog.html/posts/proba-quant/jensen-inequality/jensen-parabola.png" class="img-fluid" alt="The mean of the squares greater than the square of the mean"></p>
<section id="simulation" class="level2">
<h2 class="anchored" data-anchor-id="simulation">Simulation</h2>
<p>To make our experiment a bit more realistic, we could simulate 50 roll of dice and check that the Jensen’s inequality still hold. Our convex function is stil <img src="https://latex.codecogs.com/png.latex?f(x)=X%5E2">.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">outcomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> payoff(x): </span>
<span id="cb8-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-5"></span>
<span id="cb8-6">payoffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [payoff(outcome) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> outcome <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> outcomes]</span></code></pre></div>
</div>
<p>And let’s again compare the mean of the transformed vs the transformed of the mean.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The mean of the transformed outcomes is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(payoffs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The transformed of the mean is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>payoff(np.mean(outcomes))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The mean of the transformed outcomes is 14.2
The transformed of the mean is 11.0224</code></pre>
</div>
</div>
</section>
</section>
<section id="jensens-inequality-in-finance" class="level1">
<h1>Jensen’s inequality in finance</h1>
<section id="arithmetic-mean-vs-geometric-mean" class="level2">
<h2 class="anchored" data-anchor-id="arithmetic-mean-vs-geometric-mean">Arithmetic mean vs Geometric mean</h2>
<p>One way, the Jensen’s inequality is used in finance is when it comes to returns. We can indeed compute the average returns as a arithmetic average or as a geometric average.</p>
<p>Let’s say, we have a data set with n observations. Then we define, the arithmetic mean as <img src="https://latex.codecogs.com/png.latex?AM%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5En%20i"> and the geometric mean as <img src="https://latex.codecogs.com/png.latex?GM%20=%20%5Cleft(%20%5Cprod_%7Bi=1%7D%5En%20i%20%5Cright)%5E%7B%5Cfrac%7B1%7D%7Bn%7D%7D"></p>
<p>Using logarithms, and starting with the arithmetic mean, we have: <span id="eq-logAM"><img src="https://latex.codecogs.com/png.latex?log(AM)%20=%20log%20%5Cleft(%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5En%20i%20%5Cright)%20%5Ctag%7B2%7D"></span></p>
<p>Continuing with the geometric mean, we have: <span id="eq-logGM"><img src="https://latex.codecogs.com/png.latex?log%20(GM)%20=%20log%20%5Cleft(%20%5Cprod_%7Bi=1%7D%5En%20i%20%5Cright)%5E%7B%5Cfrac%7B1%7D%7Bn%7D%7D%20=%20%5Cfrac%7B1%7D%7Bn%7D%20log%20%5Cleft(%20%5Cprod_%7Bi=1%7D%5En%20i%20%5Cright)%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5En%20log(i)%20%5Ctag%7B3%7D"></span></p>
<p>We could transform Equation&nbsp;3 saying that the geometric mean is the exponential of the arithmetic mean. <span id="eq-logGM2"><img src="https://latex.codecogs.com/png.latex?GM%20=%20exp%20%5Cleft(%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5En%20i%20%5Cright)%20%5Ctag%7B4%7D"></span></p>
<p>Back to Jensens’s inequality.<br>
The log function is a concave function. We just re-write Equation&nbsp;1 changing the inequality sign: <em>the mean of the transformation is less or equal to the transformation of the mean</em>. On probabilistic terms, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Bf(X)%5D%20%5Cleq%20f(%5Cmathbb%7BE%7D%5BX%5D)"></p>
<p><img src="https://latex.codecogs.com/png.latex?log(GM)%20=%20%5Ctext%7Bmean%20of%20the%20transformation%20(log)%7D"> <img src="https://latex.codecogs.com/png.latex?log(AM)%20=%20%5Ctext%7Btransformation%20(log)%20of%20the%20mean%7D"></p>
<p>If we go back to our dice throwing example, we should see that the <img src="https://latex.codecogs.com/png.latex?log(GM)%20%3C=%20log(AM)">. Let’s model that</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">outcomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb11-2">mean_outcomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(outcomes)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> payoff(x): </span>
<span id="cb11-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.log(x)</span>
<span id="cb11-6"></span>
<span id="cb11-7">payoffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [payoff(outcome) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> outcome <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> outcomes]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Log(GM) - The mean of the transformed (log) is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(payoffs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Log(AM) - The transformed (log) of the mean is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>log(np.mean(outcomes))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Log(GM) - The mean of the transformed (log) is 1.0965418686683501
Log(AM) - The transformed (log) of the mean is 1.252762968495368</code></pre>
</div>
</div>
<p>This match our initial statement. mean of the transformed being smaller than the transformed of the mean as the transformation is concave!</p>
<p>And we can undo that log using an exponent (which will preserve the inequality sign). Hence GM &lt; AM. In finance, especially portfolio management, GM means are preferred as it is taking into account the compounding effect of the returns.</p>
</section>
<section id="options-convexity" class="level2">
<h2 class="anchored" data-anchor-id="options-convexity">Options convexity</h2>
<p>We are talking about the convexity of options to draw the attention on the non-linear relationship (in this case convex relationship … duh!) between the option’s price and the price of its underlying asset.<br>
This comes from the second order derivative of the option’s price in regards to the price of the underlying. In the Black-Schole Merton equation, this can be seen as: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%7BV%7D%7D%7B%5Cpartial%7Bt%7D%7D%20+%20%5Ccolor%7Bblue%7D%7B%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20S%5E2%20%5Cfrac%7B%5Cpartial%5E2%7BV%7D%7D%7B%5Cpartial%7BS%7D%5E2%7D%7D%20+%20r%20S%20%5Cfrac%7B%5Cpartial%7BV%7D%7D%7B%5Cpartial%7BS%7D%7D%20-%20rV%20=%200"></p>
<p>Recall the value of a vanilla European call option at expiration is <img src="https://latex.codecogs.com/png.latex?C(S)%20=%20max(S-K,%200)"> where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?K"> is the strike price</li>
<li><img src="https://latex.codecogs.com/png.latex?S"> is the price of the underlying</li>
<li><img src="https://latex.codecogs.com/png.latex?C(S)"> is the value of the option price at expiry</li>
<li><img src="https://latex.codecogs.com/png.latex?S-K"> is a linear relationship</li>
</ul>
<p>But the rate of change of the option price in regards to its underlying is not linear.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> norm</span>
<span id="cb14-3"></span>
<span id="cb14-4">S0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial stock price</span></span>
<span id="cb14-5">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Strike price</span></span>
<span id="cb14-6">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Risk-free rate</span></span>
<span id="cb14-7">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time to maturity</span></span>
<span id="cb14-8">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Volatility</span></span>
<span id="cb14-9"></span>
<span id="cb14-10">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Black-Scholes call option price formula</span></span>
<span id="cb14-13">d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.log(S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> K) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(T))</span>
<span id="cb14-14">d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(T)</span>
<span id="cb14-15"></span>
<span id="cb14-16">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(d1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(d2)</span>
<span id="cb14-17"></span>
<span id="cb14-18">delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.gradient(C, S)</span>
<span id="cb14-19">gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.gradient(delta, S)</span>
<span id="cb14-20"></span>
<span id="cb14-21">plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb14-22"></span>
<span id="cb14-23">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">131</span>)</span>
<span id="cb14-24">plt.plot(S, C, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Option Price'</span>)</span>
<span id="cb14-25">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Asset Price'</span>)</span>
<span id="cb14-26">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Option Value'</span>)</span>
<span id="cb14-27"></span>
<span id="cb14-28">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">132</span>)</span>
<span id="cb14-29">plt.plot(S, delta, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Delta'</span>)</span>
<span id="cb14-30">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Asset Price'</span>)</span>
<span id="cb14-31">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Delta'</span>)</span>
<span id="cb14-32"></span>
<span id="cb14-33">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span>)</span>
<span id="cb14-34">plt.plot(S, gamma, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gamma'</span>)</span>
<span id="cb14-35">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Asset Price'</span>)</span>
<span id="cb14-36">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gamma'</span>)</span>
<span id="cb14-37"></span>
<span id="cb14-38">plt.tight_layout()</span>
<span id="cb14-39">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/proba-quant/jensen-inequality/index_files/figure-html/cell-10-output-1.png" width="1141" height="566"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Probability</category>
  <category>Jensen&#39;s inequality</category>
  <category>arithmetic mean</category>
  <category>geometric mean</category>
  <guid>https://fderyckel.github.io/blog.html/posts/proba-quant/jensen-inequality/index.html</guid>
  <pubDate>Fri, 20 Oct 2023 17:00:00 GMT</pubDate>
  <media:content url="https://fderyckel.github.io/blog.html/posts/proba-quant/jensen-inequality/jensen-parabola.png" medium="image" type="image/png" height="168" width="144"/>
</item>
<item>
  <title>Modeling Option prices using Monte-Carlo simulations</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/index.html</link>
  <description><![CDATA[ 




<p>Recall Monte-Carlo method exploits the relationship between options prices and expectation under a risk-neutral measure. It is the present value of the expectation (under a risk-neutral measure) of the payoff. In this sense <img src="https://latex.codecogs.com/png.latex?V(S,%20t)%20=%20%5Ctext%7BPV%7D%20%5Cspace%20%5Cspace%20%5Cmathbb%7BE%7D%5E%5Cmathbb%7BQ%7D%20(Payoff)"></p>
<p>We start with the usual SDE (except we use <img src="https://latex.codecogs.com/png.latex?r"> instead of <img src="https://latex.codecogs.com/png.latex?%5Cmu"> as we are under the risk-neutral framework). <img src="https://latex.codecogs.com/png.latex?dS_t%20=%20r%20S_t%20dt%20+%20%5Csigma%20S_t%20dW_t"> Using the Euler discretization <img src="https://latex.codecogs.com/png.latex?S_%7Bt%20+%20%5Cdelta%20t%7D%20=%20S_t%20%5Ccdot%20(1%20+%20r%20%5Cdelta%20t%20+%20%5Csigma%20%5Csqrt%7B%5Cdelta%20t%7D%20%5Cphi)"></p>
<section id="using-python" class="level2">
<h2 class="anchored" data-anchor-id="using-python">Using Python</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> simulate_path(s0, mu, sigma, Time, num_timestep, n_sim): </span>
<span id="cb1-5">  </span>
<span id="cb1-6">  np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20230902</span>)</span>
<span id="cb1-7">  </span>
<span id="cb1-8">  S0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s0</span>
<span id="cb1-9">  r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu</span>
<span id="cb1-10">  T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Time</span>
<span id="cb1-11">  t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_timestep </span>
<span id="cb1-12">  n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_sim </span>
<span id="cb1-13">  </span>
<span id="cb1-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#defining dt</span></span>
<span id="cb1-15">  dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>t</span>
<span id="cb1-16">  </span>
<span id="cb1-17">  S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((t, n))</span>
<span id="cb1-18">  S[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S0</span>
<span id="cb1-19">  </span>
<span id="cb1-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): </span>
<span id="cb1-21">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.standard_normal(n)</span>
<span id="cb1-22">    S[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(dt) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb1-23">  </span>
<span id="cb1-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> S</span></code></pre></div>
</div>
<p>Let’s create a simulation for a quarter of a year (3 months or 63 trading days).</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">simulate_path(s0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>, Time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, num_timestep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span>, n_sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>array([[100.        , 100.        , 100.        , ..., 100.        ,
        100.        , 100.        ],
       [ 99.39825714, 100.88405395, 100.17361119, ..., 100.79029332,
         98.89439673,  99.86236711],
       [ 99.50936214, 100.97945468,  99.7824842 , ...,  98.66331487,
         98.67131431, 100.50278255],
       ...,
       [100.32398459, 110.16941406,  95.79494772, ..., 101.76681189,
         91.43131552,  98.94795092],
       [100.93630069, 111.0365789 ,  94.89177952, ..., 101.32109813,
         93.37392012,  98.42725475],
       [101.17836924, 110.76099538,  95.51591487, ..., 101.28364139,
         92.50938162,  96.80815562]])</code></pre>
</div>
</div>
<p>Let’s put that into a data frame for further plotting and manipulation</p>
<p>Note each column of the data frame is a simulation. The number of rows is the number of time steps.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">simulated_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(simulate_path(s0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>, Time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, num_timestep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span>, n_sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">simulated_paths.iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;Axes: &gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/index_files/figure-html/cell-5-output-2.png" width="558" height="411"></p>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-2">plt.plot(simulated_paths)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plot the first 100 paths</span></span>
<span id="cb7-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time steps'</span>)</span>
<span id="cb7-4">plt.xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb7-5">plt.ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">135</span>)</span>
<span id="cb7-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pries'</span>)</span>
<span id="cb7-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Monte-Carlo Simulation of an Asset Price'</span>)</span>
<span id="cb7-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/index_files/figure-html/cell-6-output-1.png" width="593" height="449"></p>
</div>
</div>
<p>Under the risk-neutral measure, the value of the option is the discounted value of the expected payoff. <img src="https://latex.codecogs.com/png.latex?C%20=%20e%5E%7BrT%7D%20%5Ccdot%20%5Cmathbb%7BE%7D%5Bmax(S_T%20-%20K,%200)%5D"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?K"> is the strike price</li>
</ul>
<p>For this simulation, we let <img src="https://latex.codecogs.com/png.latex?K=100"> as well!</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb8-2">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span></span>
<span id="cb8-3">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> </span>
<span id="cb8-4"></span>
<span id="cb8-5">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate_path(s0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>, Time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, num_timestep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span>, n_sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## calculate payoff for call options </span></span>
<span id="cb8-8">Co <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.mean(np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, S[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>K))</span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## calculate payoff for put options </span></span>
<span id="cb8-10">Po <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.mean(np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> S[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"European Call Option value is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Co<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 0.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"European Put Option value is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Po<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 0.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>European Call Option value is  3.8587
European Put Option value is  2.7757</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb10-2"></span>
<span id="cb10-3">sT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5">figure, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), sharey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-6">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Call payoff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Put payoff'</span>]</span>
<span id="cb10-7">payoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>K), np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sT)] </span>
<span id="cb10-8">color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>] </span>
<span id="cb10-9">label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Call'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Put'</span>]</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>): </span>
<span id="cb10-12">  axes[i].plot(sT, payoff[i], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color[i], label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label[i])</span>
<span id="cb10-13">  axes[i].set_title(title[i])</span>
<span id="cb10-14">  axes[i].legend()</span>
<span id="cb10-15"></span>
<span id="cb10-16">figure.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Option Payoff at Maturity'</span>)</span>
<span id="cb10-17"></span>
<span id="cb10-18">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/index_files/figure-html/cell-8-output-1.png" width="1533" height="543"></p>
</div>
</div>
</section>
<section id="asian-options" class="level1">
<h1>Asian Options</h1>
<p>We are taking the averages of a given asset prices.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(S, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># axis = 0, mean is over the columns ==&gt; results is 1000 means. We had a 1000 simulations of 63 steps. </span></span>
<span id="cb11-2">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(S, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># axis = 1, mean is row by row  ==&gt; results is 63 means</span></span>
<span id="cb11-3"></span>
<span id="cb11-4">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb11-5">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span></span>
<span id="cb11-6">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> </span>
<span id="cb11-7">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate_path(s0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>, Time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, num_timestep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span>, n_sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do not use S[-1] anymore (the last prices), but the average instead (here it is A)</span></span>
<span id="cb11-10">Co <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.mean(np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> K))</span>
<span id="cb11-11">Po <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.mean(np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> A))</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Asian Call Option value is: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Co<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 0.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Asian Put Option Value is: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Po<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
</section>
<section id="barrier-options." class="level1">
<h1>Barrier options.</h1>
<p>Barrier options are path dependent. They’ll need another argument</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In a paper titled A Continuity Correction for Discrete Barrier Option, Mark Broadie, Paul Glasser- man and Steven Kou have shown us that the discrete barrier options can be priced using continuous barrier formulas by applying a simple continuity correction to the barrier. The correction shifts the barrier away from the underlying by a factor of <img src="https://latex.codecogs.com/png.latex?exp(%5Cbeta%20%5Csigma%20%5Csqrt%7B%5Cdelta_t%7D)"> where <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20%5Capprox%200.5826"></p>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb12-2">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span></span>
<span id="cb12-3">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span></span>
<span id="cb12-4">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> </span>
<span id="cb12-5">num_timestep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span></span>
<span id="cb12-6">num_sim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb12-7">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate_path(s0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, Time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>T, num_timestep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_timestep, n_sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_sim)</span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's put the barrier at 117 !  we call it B</span></span>
<span id="cb12-10">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">117</span></span>
<span id="cb12-11">delta_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num_timestep</span>
<span id="cb12-12">rebate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb12-13">value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-14">beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5826</span></span>
<span id="cb12-15"></span>
<span id="cb12-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Barrier shift - continuity correction for discrete monitoring</span></span>
<span id="cb12-17">B_shift <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(delta_t))</span>
<span id="cb12-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(B_shift)</span>
<span id="cb12-19"></span>
<span id="cb12-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># finding discounted value of expected payoff</span></span>
<span id="cb12-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_sim): </span>
<span id="cb12-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if final price of one simulation is less that the Barrier shift</span></span>
<span id="cb12-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> S[:,i].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> B_shift: </span>
<span id="cb12-24">    value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, S[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> K)</span>
<span id="cb12-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: </span>
<span id="cb12-26">    value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> rebate</span>
<span id="cb12-27">    </span>
<span id="cb12-28">Co <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>num_sim)</span>
<span id="cb12-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'The up-and-out Barrier Option value is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Co<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:04f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>117.73225187428132
The up-and-out Barrier Option value is 3.369172</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">figure, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), constrained_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb14-2">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Visualising the Barrier Condition'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spot Touched Barrier'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spot Below Barrier'</span>]</span>
<span id="cb14-3">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(S[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>])</span>
<span id="cb14-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>):</span>
<span id="cb14-5">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(S[:,i]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> S[:,i].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> B_shift <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(S[:,i])</span>
<span id="cb14-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb14-7">    axes[i].set_title(title[i])</span>
<span id="cb14-8">    axes[i].hlines(B_shift, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>, linestyles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>)</span>
<span id="cb14-9">figure.supxlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time steps'</span>)</span>
<span id="cb14-10">figure.supylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index levels'</span>)</span>
<span id="cb14-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/index_files/figure-html/cell-11-output-1.png" width="1931" height="587"></p>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb15-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_price_path(S0, rfr, sigma, time_horizon, num_steps, num_sim): </span>
<span id="cb15-6">  </span>
<span id="cb15-7">  np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18092023</span>)</span>
<span id="cb15-8"></span>
<span id="cb15-9">  dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time_horizon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num_steps</span>
<span id="cb15-10"></span>
<span id="cb15-11">  S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((num_steps, num_sim))</span>
<span id="cb15-12">  S[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S0</span>
<span id="cb15-13"></span>
<span id="cb15-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,num_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): </span>
<span id="cb15-15">    phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.standard_normal(num_sim)</span>
<span id="cb15-16">    S[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rfr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(dt))</span>
<span id="cb15-17">  </span>
<span id="cb15-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> S</span>
<span id="cb15-19"></span>
<span id="cb15-20">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_price_path(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb15-21"></span>
<span id="cb15-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for a european option.  </span></span>
<span id="cb15-23"></span>
<span id="cb15-24">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb15-25">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb15-26">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.55</span></span>
<span id="cb15-27"></span>
<span id="cb15-28">C0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.mean(np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, S[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>K))</span>
<span id="cb15-29"></span>
<span id="cb15-30">C0</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>9.038910855148245</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Black-Schole</category>
  <category>Risk-Neutrality</category>
  <category>Exotic Options</category>
  <category>Monte-Carlo</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/index.html</guid>
  <pubDate>Sat, 26 Aug 2023 17:00:00 GMT</pubDate>
  <media:content url="https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/mc-simulation.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>02 - Stochastic Differential Equation - Part II</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part2/SDE-part2/index.html</link>
  <description><![CDATA[ 




<section id="vs-when-s-is-a-sde---itô-iii" class="level1">
<h1><img src="https://latex.codecogs.com/png.latex?V(S)"> when S is a SDE - Itô III</h1>
<p>Let <img src="https://latex.codecogs.com/png.latex?V"> be a function of <img src="https://latex.codecogs.com/png.latex?S"> where <img src="https://latex.codecogs.com/png.latex?S"> satisfies the stochastic differential equation <img src="https://latex.codecogs.com/png.latex?dS%20=%20%5Cmu%20S%20%5Cspace%20dt%20+%20%5Csigma%20S%20%5Cspace%20dX(t)"> Note how in this case <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> are constants. In more elaborate models, both can be time-dependent variables and be stochastic themselves.</p>
<p>Using a one-dimension Taylor Series expansion, we can write <img src="https://latex.codecogs.com/png.latex?V(S%20+%20dS)%20%5Capprox%20V(S)%20+%20%5Cfrac%7BdV%7D%7BdS%7D%20%5Cspace%20dS%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2V%7D%7BdS%5E2%7D%20%5Cspace%20dS%5E2"></p>
<p>To express <img src="https://latex.codecogs.com/png.latex?dS%5E2">? <img src="https://latex.codecogs.com/png.latex?dS%5E2%20=%20(dS)%5E2%20=%20%5Cmu%5E2%20S%5E2%20%5Cspace%20dt%5E2%20+%202%20%5Cmu%20%5Csigma%20S%5E2%20%20%5Cspace%20dt%20dX(t)%20+%20%5Csigma%5E2%20S%5E2%20%5Cspace%20dX(t)%5E2"></p>
<p><span id="eq-ds-squared"><img src="https://latex.codecogs.com/png.latex?dS%5E2%20=%20%5Csigma%5E2%20S%5E2%20%5Cspace%20dX(t)%5E2%20=%20%5Csigma%5E2%20S%5E2%20%5Cspace%20dt%20%5Ctag%7B1%7D"></span></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>We could generalize this a bit further Let’s have a function <img src="https://latex.codecogs.com/png.latex?dG_t%20=%20A(t,%20X_t)%20%5Cspace%20dt%20+%20B(t,%20X_t)%20%5Cspace%20dW_t"></p>
<p>Then <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BdG_t%5D%20=%20%5Cmathbb%7BE%7D%5BA%20%5Cspace%20dt%5D%20+%20%5Cmathbb%7BE%7D%5BB%20%5Cspace%20dW_t%5D%20=%20A%20%5Cspace%20%5Cmathbb%7BE%7D%5Bdt%5D%20+%20B%20%5Cspace%20%5Cmathbb%7BE%7D%5BdW_t%5D"></p>
<p>Recall that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BdW_t%5D%20=%200">, hence <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BdG_t%5D%20=%20A%20%5Cspace%20%5Cmathbb%7BE%7D%5Bdt%5D"> Considering the variance, we can write <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BdG_t%5D%20=%20%5Cmathbb%7BV%7Dar%5BA%20%5Cspace%20dt%5D%20+%20%5Cmathbb%7BV%7Dar%5BB%20%5Cspace%20dW_t%5D%20=%20A%5E2%20%5Cspace%20%5Cmathbb%7BV%7Dar%5Bdt%5D%20+%20B%5E2%20%5Cspace%20%5Cmathbb%7BV%7Dar%5BdW_t%5D%20=%20B%5E2%20%5Cspace%20dt"> Recall that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5Bdt%5D%20=%200">, hence <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BdG_t%5D%20=%20B%5E2%20%5Cspace%20%5Cmathbb%7BV%7Dar%5BdW_t%5D"></p>
</div>
</div>
<p>Going back to our expansion and considering <img src="https://latex.codecogs.com/png.latex?dV%20=%20V(S+dS)%20-%20V(S)">: <img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cfrac%7BdV%7D%7BdS%7D%20%5Cspace%20(%5Cmu%20S%20%5Cspace%20dt%20+%20%5Csigma%20S%20%5Cspace%20dX(t))%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2V%7D%7BdS%5E2%7D%20%5Cspace%20(%5Csigma%5E2%20S%5E2%20%5Cspace%20dt)"> <span id="eq-ito3"><img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cmu%20S%20%5Cfrac%7BdV%7D%7BdS%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20S%5E2%20%5Cfrac%7Bd%5E2V%7D%7BdS%5E2%7D%20%5Cright)%20%5Ccdot%20dt%20+%20%5Cleft(%20%5Csigma%20S%20%5Cfrac%7BdV%7D%7BdS%7D%20%5Cright)%20%5Ccdot%20dX(t)%20%5Ctag%7B2%7D"></span></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let <img src="https://latex.codecogs.com/png.latex?V(S)%20=%20log(S)"> with S satisfies the usual SDE: <img src="https://latex.codecogs.com/png.latex?dS%20=%20%5Cmu%20S%20dt%20+%20%5Csigma%20S%20dX_t">. We can then use the above SDE form.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BdV%7D%7BdS%7D%20=%20%5Cfrac%7B1%7D%7BS%7D"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%5E2V%7D%7BdS%5E2%7D%20=%20-%20%5Cfrac%7B1%7D%7BS%5E2%7D"></p>
<p>Using above Equation&nbsp;2: <img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cmu%20S%20%5Cfrac%7B1%7D%7BS%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20S%5E2%20%5Cfrac%7B-1%7D%7BS%5E2%7D%20%5Cright)%20%5Ccdot%20dt%20+%20%5Cleft(%20%5Csigma%20S%20%5Cfrac%7B1%7D%7BS%7D%20%5Cright)%20%5Ccdot%20dX(t)"> <img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cmu%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20%20%5Cright)%20%5Ccdot%20dt%20+%20%5Csigma%20%20%5Ccdot%20dX(t)"> Using the integral form:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20d(log%20%5Cspace%20S)%20=%20%5Cint_0%5Et%20%5Cmu%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20%5Cspace%20d%5Ctau%20+%20%5Cint_0%5Et%20%5Csigma%20%5Cspace%20dX(%5Ctau)"> <img src="https://latex.codecogs.com/png.latex?log(S_t)%20-%20log(S_0)%20=%20%5Cmu%20t%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20t%20+%20%5Csigma%20(X_t%20-%20X_0)"> <img src="https://latex.codecogs.com/png.latex?log%20%5Cleft(%20%5Cfrac%7BS_t%7D%7BS_0%7D%20%5Cright)%20=%20%5Cmu%20t%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20t%20+%20%5Csigma%20(X_t%20-%20X_0)"> <img src="https://latex.codecogs.com/png.latex?S_t%20=%20S_0%20%5Ccdot%20e%5E%7B%5Cmu%20t%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20t%20+%20%5Csigma%20(X_t%20-%20X_0)%7D"></p>
<p>Using <img src="https://latex.codecogs.com/png.latex?X_0%20=%200"> and <img src="https://latex.codecogs.com/png.latex?X_t%20=%20%5Cphi%20%5Csqrt%7Bt%7D">: <img src="https://latex.codecogs.com/png.latex?S_t%20=%20S_0%20%5Ccdot%20e%5E%7B%5Cmu%20t%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20t%20+%20%5Csigma%20%5Cphi%20%5Csqrt%7Bt%7D%7D"></p>
</div>
</div>
<p>Another example with interest rate</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Vasicek model
</div>
</div>
<div class="callout-body-container callout-body">
<p>This model developed in 1978 by Vasicek is about interest rate.</p>
<p>The basic SDE takes this form <span id="eq-vasicek1"><img src="https://latex.codecogs.com/png.latex?dr%20=%20(%5Ceta%20-%20%5Cgamma%20r)%20dt%20+%20%5Csigma%20dX%20%5Ctag%7B3%7D"></span> In this model, <img src="https://latex.codecogs.com/png.latex?%5Ceta">, <img src="https://latex.codecogs.com/png.latex?%5Cgamma"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> are all constant.</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cgamma"> is the speed of reversion to the (long term) mean rate. It’s the rate of reversion.</li>
<li>we demote <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Br%7D"> the mean interest rate such that <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Br%7D%20=%20%5Cfrac%7B%5Ceta%7D%7B%5Cgamma%7D"></li>
</ul>
<p><span id="eq-vasicek2"><img src="https://latex.codecogs.com/png.latex?dr%20=%20%5Cgamma%20(%5Cbar%7Br%7D%20-%20r)%20%5Cspace%20dt%20+%20%5Csigma%20%5Cspace%20dX%20%5Ctag%7B4%7D"></span></p>
<p>If we let <img src="https://latex.codecogs.com/png.latex?u%20=%20r%20-%20%5Cbar%7Br%7D">, then <img src="https://latex.codecogs.com/png.latex?du%20=%20dr"> because we consider <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Br%7D"> as a constant. Hence <img src="https://latex.codecogs.com/png.latex?du%20=%20-%20%5Cgamma%20u%20%5Cspace%20dt%20+%20%5Csigma%20dX"> <img src="https://latex.codecogs.com/png.latex?du%20+%20%5Cgamma%20u%20dt%20=%20%5Csigma%20dX"><br>
<img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cgamma%20t%7D%20du%20+%20%5Cgamma%20u%20e%5E%7B%5Cgamma%20t%7D%20dt%20=%20e%5E%7B%5Cgamma%20t%7D%20%5Csigma%20dX"> <img src="https://latex.codecogs.com/png.latex?d(u%20e%5E%7B%5Cgamma%20t%7D)%20=%20%5Csigma%20e%5E%7B%5Cgamma%20t%7D%20dX"> <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20d(u_s%20e%5E%7B%5Cgamma%20s%7D)%20=%20%5Csigma%20%5Cint_0%5Et%20e%5E%7B%5Cgamma%20s%7D%20dX_s"> <img src="https://latex.codecogs.com/png.latex?u(t)%20e%5E%7B%5Cgamma%20t%7D%20-%20u(0)%20=%20%5Csigma%20%5Cint_0%5Et%20e%5E%7B%5Cgamma%20s%7D%20dX_s"> <img src="https://latex.codecogs.com/png.latex?u(t)%20=%20u(0)%20e%5E%7B-%5Cgamma%20t%7D%20+%20%20%5Csigma%20%5Cint_0%5Et%20e%5E%7B%5Cgamma%20(s%20-%20t)%7D%20dX_s"></p>
</div>
</div>
</section>
<section id="vt-s-when-s-is-a-sde---itô-iv" class="level1">
<h1><img src="https://latex.codecogs.com/png.latex?V(t,%20S)"> when S is a SDE - Itô IV</h1>
<p>This time <img src="https://latex.codecogs.com/png.latex?V"> is a function of both time <img src="https://latex.codecogs.com/png.latex?t"> and <img src="https://latex.codecogs.com/png.latex?S"> which satisfies the usual SDE: <img src="https://latex.codecogs.com/png.latex?dS%20=%20%5Cmu%20S%20dt%20+%20%5Csigma%20S%20dX_t"></p>
<p>We can also do a Taylor Series expansion on this. And recall Equation&nbsp;1 when dealing with <img src="https://latex.codecogs.com/png.latex?dS%5E2"></p>
<p><img src="https://latex.codecogs.com/png.latex?V(S%20+%20dS,%20t%20+%20dt)%20%5Capprox%20V(S,%20t)%20+%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20dS%20+%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20dt%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D%20dS%5E2"> <img src="https://latex.codecogs.com/png.latex?V(S%20+%20dS,%20t%20+%20dt)%20-%20V(S,%20t)%20%5Capprox%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20dS%20+%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20dt%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D%20%5Csigma%5E2%20S%5E2%20dt"></p>
<p><img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D%20%5Csigma%5E2%20S%5E2%20%5Cright)%20dt%20+%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20dS"></p>
<p><img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D%20%5Csigma%5E2%20S%5E2%20%5Cright)%20dt%20+%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20(%5Cmu%20S%20dt%20+%20%5Csigma%20S%20dX_t)"> <span id="eq-ito4"><img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D%20%5Csigma%5E2%20S%5E2%20+%20%5Cmu%20S%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20%20%5Cright)%20dt%20+%20%5Csigma%20S%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20dX_t%20%5Ctag%7B5%7D"></span></p>
</section>
<section id="transition-probabilty-function-as-ode" class="level1">
<h1>Transition probabilty function as ODE</h1>
<p>For background on the transition probability function, check <a href="../../../posts/quant-part1/trinomial-model/index.html">this post</a></p>
<p>Recall from the above linked post that <img src="https://latex.codecogs.com/png.latex?y,%20t"> are current state and <img src="https://latex.codecogs.com/png.latex?y',%20t'"> are future values.<br>
The transition probabilty function was expressed as a partial differential equation of the form <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20C%5E2%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D"> which was the FKE.</p>
<p>In the case of our usual Stochastic Differential Equation, which we write under a more general form like <img src="https://latex.codecogs.com/png.latex?dY%20=%20A(y,%20t)%20%5Cspace%20dt%20+%20B(y,%20t)%20%5Cspace%20dW_t"> We can find that the transition probability function satisfies the following Partial differential equation: <span id="eq-FKE1"><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20%5Cleft(B(y',%20t')%5E2%20p%20%5Cright)%7D%7B%5Cpartial%20y'%5E2%7D%20-%20%5Cfrac%7B%5Cpartial%20%5Cleft(%20A(y',%20t')%20p%20%5Cright)%7D%7B%5Cpartial%20y'%7D%20%5Ctag%7B6%7D"></span></p>
<p>In our financial model, we’ll apply Equation&nbsp;6 with the usual SDE <img src="https://latex.codecogs.com/png.latex?dS=%5Cmu%20S%20%5Cspace%20dt+%5Csigma%20S%20%5Cspace%20dW_t">. Remember that <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> are constant here.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20(%5Csigma%5E2%20S'%5E2%20p)%7D%7B%5Cpartial%20S'%5E2%7D%20-%20%5Cfrac%7B%5Cpartial%20(%5Cmu%20S'%20p)%7D%7B%5Cpartial%20S'%7D"></p>
<p>The solution to this partial differential equation has been developed <a href="../../../posts/quant-part1/trinomial-model/index.html">in the trinomial post</a>:</p>
<p><span id="eq-FKE1b"><img src="https://latex.codecogs.com/png.latex?p(S,%20t;%20S',%20t')%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20S'%20%5Csqrt%7B2%20%5Cpi%20(t'-t)%7D%7D%20e%5E%7B%5Cfrac%7B-log%5Cleft(%20%5Cfrac%7BS%7D%7BS'%7D%20%5Cright)%20+%20(%5Cmu%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2)%7D%7B2%20%5Csigma%5E2(t'-t)%7D%7D%20%5Ctag%7B7%7D"></span></p>
<section id="steady-state" class="level2">
<h2 class="anchored" data-anchor-id="steady-state">Steady-state</h2>
<p>In some case, there are situation (random-walk) with a long term mean reversal - we say that they have a <strong>steady state distribution</strong>. This means that in the long run, the <img src="https://latex.codecogs.com/png.latex?p(y,%20t;%20y',%20t')"> doesn’t depend of the starting point <img src="https://latex.codecogs.com/png.latex?y,%20t">; the probability becomes time independent. Think of situations such as interest rate and volatility.</p>
<p>In the case of a steady state situation, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%200"> since the process becomes time independent in the long run. And the probability (now written $p_{} (y’) $) satisfies the ordinary differential equation: <span id="eq-FKE2"><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%20%5Cleft(B(y')%5E2%20p_%7B%5Cinfty%7D%20%5Cright)%7D%7Bd%20y'%5E2%7D%20-%20%5Cfrac%7Bd%20%5Cleft(%20A(y')%20p_%7B%5Cinfty%7D%20%5Cright)%7D%7Bd%20y'%7D%20=%200%20%5Ctag%7B8%7D"></span> It isn’t anymore a partial differential equation as the time component vanishes (aka steady-state, long-term reversal)</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Vasicek revisited
</div>
</div>
<div class="callout-body-container callout-body">
<p>Recall from above the Vasicek model <img src="https://latex.codecogs.com/png.latex?dr%20=%20%5Cgamma%20(%5Cbar%7Br%7D%20-%20r)%20%5Cspace%20dt%20+%20%5Csigma%20%5Cspace%20dW_t"> Using Equation&nbsp;8, we can write the steady state distribution <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cinfty%7D%20r'"> following ordinary differential equation. <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20%5Cfrac%7Bd%5E2%20%20p_%7B%5Cinfty%7D%20%7D%7Bd%20r'%5E2%7D%20-%20%5Cgamma%20%5Cfrac%7Bd(%20%5Cleft(%5Cbar%7Br%7D%20-%20r)%20p_%7B%5Cinfty%7D%20%5Cright)%7D%7Bd%20r'%7D%20=%200"> Integrating both sides, we get: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20%5Cfrac%7Bd%20%20p_%7B%5Cinfty%7D%20%7D%7Bd%20r'%7D%20+%20%5Cgamma%20(r%20-%20%5Cbar%7Br%7D)%20p_%7B%5Cinfty%7D%20=%20K"> K being a constant. <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20%5Cfrac%7Bd%20%20p_%7B%5Cinfty%7D%20%7D%7Bd%20r'%7D%20=%20-%20%5Cgamma%20(r%20-%20%5Cbar%7Br%7D)%20p_%7B%5Cinfty%7D%20+%20K"> Letting the constant be 0 (need explanation here) Letting the <img src="https://latex.codecogs.com/png.latex?%7B%5Cinfty%7D"> just for convenience purposes.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7Bp%7D%20dp%20=%20%5Cfrac%7B-2%20%5Cgamma%7D%7B%5Csigma%5E2%7D%20(r%20-%20%5Cbar%7Br%7D)%20%5Cspace%20dr'"> Integrating both sides, <img src="https://latex.codecogs.com/png.latex?%5Cint%20%5Cfrac%7B1%7D%7Bp%7D%20dp%20=%20%5Cfrac%7B-2%20%5Cgamma%7D%7B%5Csigma%5E2%7D%20%5Cint%20(r%20-%20%5Cbar%7Br%7D)%20%5Cspace%20dr'"> <img src="https://latex.codecogs.com/png.latex?log(p)%20=%20%5Cfrac%7B-2%20%5Cgamma%7D%7B%5Csigma%5E2%7D%20%5Cfrac%7B1%7D%7B2%7D%20(r%20-%20%5Cbar%7Br%7D)%5E2%20+%20K"> Using a normalizing constant, as we inverse the log <span id="eq-vasicek2"><img src="https://latex.codecogs.com/png.latex?p(r)%20=%20A%20%5Ccdot%20e%5E%7B-%20%5Cfrac%7B%5Cgamma%7D%7B%5Csigma%5E2%7D%20(r%20-%20%5Cbar%7Br%7D)%5E2%7D%20%5Ctag%7B9%7D"></span></p>
<p>We know that <img src="https://latex.codecogs.com/png.latex?%5Cint_%7B%5Cmathbb%7BR%7D%7D%20p(r)%20dr=%201">, hence <img src="https://latex.codecogs.com/png.latex?A%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20e%5E%7B-%20%5Cfrac%7B%5Cgamma%7D%7B%5Csigma%5E2%7D%20(r%20-%20%5Cbar%7Br%7D)%5E2%7D%20dr%20=%201"> We can integrate this using substitution <img src="https://latex.codecogs.com/png.latex?u%20=%20%5Cfrac%7B%5Csqrt%7B%5Cgamma%7D%20%5Cspace%20(r%20-%20%5Cbar%7Br%7D)%7D%7B%5Csigma%7D"> with <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bdu%7D%7Bdr%7D%20=%20%5Cfrac%7B%5Csqrt%7B%5Cgamma%7D%7D%7B%5Csigma%7D"> <img src="https://latex.codecogs.com/png.latex?A%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20e%5E%7B-u%5E2%7D%20%5Cfrac%7B%5Csigma%7D%7B%5Csqrt%7B%5Cgamma%7D%7D%20du%20=%201"> <img src="https://latex.codecogs.com/png.latex?A%20%5Cfrac%7B%5Csigma%7D%7B%5Csqrt%7B%5Cgamma%7D%7D%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20e%5E%7B-u%5E2%7D%20du%20=%201"> <img src="https://latex.codecogs.com/png.latex?A%20%5Cfrac%7B%5Csigma%7D%7B%5Csqrt%7B%5Cgamma%7D%7D%20%5Csqrt%7B%5Cpi%7D%20%20=%201"> <img src="https://latex.codecogs.com/png.latex?A%20=%20%5Cfrac%7B%5Csqrt%7B%5Cgamma%7D%7D%7B%5Csigma%20%5Csqrt%7B%5Cpi%7D%7D%20=%20%5Cfrac%7B1%7D%7B%5Csigma%7D%20%5Csqrt%7B%5Cfrac%7B%5Cgamma%7D%7B%5Cpi%7D%7D"></p>
<p>Putting it all back together in Equation&nbsp;9: <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cinfty%7D(r)%20=%20A%20%5Ccdot%20e%5E%7B-%20%5Cfrac%7B%5Cgamma%7D%7B%5Csigma%5E2%7D%20(r%20-%20%5Cbar%7Br%7D)%5E2%7D%20=%20%5Cfrac%7B1%7D%7B%5Csigma%7D%20%5Csqrt%7B%5Cfrac%7B%5Cgamma%7D%7B%5Cpi%7D%7D%20e%5E%7B-%20%5Cfrac%7B%5Cgamma%7D%7B%5Csigma%5E2%7D%20(r%20-%20%5Cbar%7Br%7D)%5E2%7D"> This means: in our case of a steady state stochastic process, the variable <img src="https://latex.codecogs.com/png.latex?r"> follows a normal distribution with mean <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Br%7D%7D"> and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Csigma%7D%7B%5Csqrt%7B2%20%5Ccdot%20%5Cgamma%7D%7D"></p>
</div>
</div>
</section>
</section>
<section id="vt-s_1-s_2-modeling-correlated-random-walks" class="level1">
<h1><img src="https://latex.codecogs.com/png.latex?V(t,%20S_1,%20S_2)"> Modeling correlated random walks</h1>
<p>We have now 2 assets</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A%20%20%5Cbegin%7Bcases%7D%0A%20%20%20%20dS_1%20=%20%5Cmu_1%20S_1%20%5Cspace%20dt%20+%20%5Csigma_1%20S_1%20%5Cspace%20dX_1%20%5C%5C%0A%20%20%20%20dS_2%20=%20%5Cmu_2%20S_2%20%5Cspace%20dt%20+%20%5Csigma_2%20S_2%20%5Cspace%20dX_2%0A%20%20%5Cend%7Bcases%7D%0A%5Cend%7Bequation%7D%20"></p>
<p>Using a Taylor series expansion <img src="https://latex.codecogs.com/png.latex?V(t+dt,%20S_1+dS_1,%20S_2+dS_2)%20%5Capprox%20V(t,%20S1,%20S2)%20+%0A%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20dt%20+%0A%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_1%7D%20dS_1%20+%0A%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_2%7D%20dS_2%20+%0A%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_1%5E2%7D%20dS_1%5E2%20+%0A%20%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_2%5E2%7D%20dS_2%5E2%20+%0A%20%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_1%20%5Cpartial%20S_2%7D%20dS_1%20dS_2"> <span id="eq-dv1"><img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20dt%20+%0A%20%20%20%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_1%7D%20dS_1%20+%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_2%7D%20dS_2%20+%0A%20%20%20%20%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_1%5E2%7D%20dS_1%5E2%20+%0A%20%20%20%20%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_2%5E2%7D%20dS_2%5E2%20+%0A%20%20%20%20%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_1%20%5Cpartial%20S_2%7D%20dS_1%20dS_2%20%5Ctag%7B10%7D"></span></p>
<p>Now we can write down some results we’ll plug into that expansion</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?dS_i%20=%20%5Cmu_i%20S_i%20%5Cspace%20dt%20+%20%5Csigma_i%20S_i%20%5Cspace%20dX_i"></li>
<li>Using Equation&nbsp;1, we write <img src="https://latex.codecogs.com/png.latex?dS_i%5E2%20=%20%5Csigma_i%5E2%20S_i%5E2%20dt"></li>
<li>Letting <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5B%5Cphi_1%20%5Cphi_2%5D%20=%20%5Crho">, we write <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BdX_1%20dX_2%5D%20=%20%5Cmathbb%7BE%7D%5B%5Cphi_1%20%5Csqrt%7Bdt%7D%20%5Cphi_2%20%5Csqrt%7Bdt%7D%5D%20=%20%5Crho%20%5Cspace%20dt"></li>
<li>Recall that all terms less than dt = 0. Hence in the product <img src="https://latex.codecogs.com/png.latex?dS_1%20dS_2%20=%20(%5Cmu_1%20S_1%20%5Cspace%20dt%20+%20%5Csigma_1%20S_1%20%5Cspace%20dX_1)(%5Cmu_2%20S_2%20%5Cspace%20dt%20+%20%5Csigma_2%20S_2%20%5Cspace%20dX_2)">, the only term that we are considering is the outter product <img src="https://latex.codecogs.com/png.latex?%5Csigma_1%20S_1%20%5Cspace%20dX_1%20%5Csigma_2%20S_2%20%5Cspace%20dX_2">. Finally, re-using above result, <img src="https://latex.codecogs.com/png.latex?dS_1%20dS_2%20=%20%5Crho%20%5Csigma_1%20%5Csigma_2%20S_1%20S_2%20dt">.</li>
</ul>
<p>Re-writing Equation&nbsp;10 by substituting <img src="https://latex.codecogs.com/png.latex?dS_1"> and <img src="https://latex.codecogs.com/png.latex?dS_2">, and factoring the terms in dt and those in <img src="https://latex.codecogs.com/png.latex?dX_t">, we get: <img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cmu_1%20S_1%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_1%7D%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cmu_2%20S_2%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_2%7D%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Csigma_1%5E2%20S_1%5E2%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_1%5E2%7D%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Csigma_2%5E2%20S_2%5E2%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_2%5E2%7D%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Crho%20%5Csigma_1%20%5Csigma_2%20S_1%20S_2%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_1%20%5Cpartial%20S_2%7D%20%20%5Cright)%20dt%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cleft(%20%5Csigma_1%20S_1%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_1%7D%20dX_1%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Csigma_2%20S_2%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_2%7D%20dX_2%20%5Cright)"></p>
<p>Itô</p>


</section>

 ]]></description>
  <category>quant-finance</category>
  <category>ito-integral</category>
  <category>stochastic-calculus</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part2/SDE-part2/index.html</guid>
  <pubDate>Fri, 21 Jul 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>01 - Stochastic Differential Equation - Part I</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part2/SDE-Part1/index.html</link>
  <description><![CDATA[ 




<section id="function-of-a-stochastic-process-x_t---itô-i" class="level1">
<h1>Function of a stochastic process <img src="https://latex.codecogs.com/png.latex?X_t"> - Itô I</h1>
<p>Let <img src="https://latex.codecogs.com/png.latex?F"> be a function of a stochastic random variable <img src="https://latex.codecogs.com/png.latex?X_t">. So <img src="https://latex.codecogs.com/png.latex?F%20=%20F(X_t)">.</p>
<p>Using a Taylor expansion: <img src="https://latex.codecogs.com/png.latex?F(X%20+%20dX)%20%5Capprox%20F(X)%20+%20%5Cfrac%7BdF%7D%7BdX%7D%20%5Cspace%20dX%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20dX%5E2"> Using <img src="https://latex.codecogs.com/png.latex?F(X+dX)%20-%20F(X)%20=%20dF">: <img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7BdF%7D%7BdX%7D%20%5Cspace%20dX%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20dX%5E2"></p>
<p>Now, recall <img src="https://latex.codecogs.com/png.latex?dX"> is a random variable with mean 0 and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bt%7D">. Also, for small values of <img src="https://latex.codecogs.com/png.latex?t">, we have <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bdt%7D%20%5Cgt%20dt">, hence it is of higher order than dt. Hence, we re-write the previous equation as</p>
<p><img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7BdF%7D%7BdX%7D%20%5Cspace%20dX%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20dt"> Usually, we write the deterministic part of the equation first.<br>
<span id="eq-ito1"><img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20%5Cspace%20dt%20+%20%5Cfrac%7BdF%7D%7BdX%7D%20%5Cspace%20dX%20%5Ctag%7B1%7D"></span></p>
<p>All our <strong>Stochastic Differential Equations</strong> will have in them these 2 different time steps: <img src="https://latex.codecogs.com/png.latex?dt"> and <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bdt%7D">. <img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cunderbrace%20%7B%5Cdots%20%5Cspace%20dt%7D_%7Bdeterministic-drift%7D%20+%20%5Cunderbrace%7B%5Cdots%20%5Cspace%20dX%7D_%7Brandom-diffusion%7D"></p>
<p>The integral form of this Stochastic Differential Equation is <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20%5Cfrac%7BdF%7D%7BdX_%5Ctau%7D%20%5Cspace%20dX_%5Ctau%20=%20%5Cint_0%5Et%20dF%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Cint_0%5Et%20%5Cfrac%7Bd%5E2F%7D%7BdX_%5Ctau%5E2%7D%20%5Cspace%20d%5Ctau"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example 1
</div>
</div>
<div class="callout-body-container callout-body">
<p><img src="https://latex.codecogs.com/png.latex?F(X_t)%20=%20X%5E2">, where <img src="https://latex.codecogs.com/png.latex?X_t"> is stochastic random variable. <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BdF%7D%7BdX%7D%20=%202X"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20=%202"></p>
<p>Hence, using the previous Equation&nbsp;1 (aka itô I): <img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Ccdot%202%20%5Cspace%20dt%20+%202X%20%5Cspace%20dX"> <img src="https://latex.codecogs.com/png.latex?dF%20=%20dt%20+%202X%20%5Cspace%20dX"> <strong>Using integral form</strong></p>
<p>We could integrate both side of the previous equation. <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20dF%20=%20%5Cint_0%5Et%20d%5Ctau%20+%20%5Cint_0%5Et%202X(%5Ctau)%20d%7B%5Ctau%7D"> <img src="https://latex.codecogs.com/png.latex?F(t)%20-%20F(0)%20=%20t%20-%200%20+%202%20%5Cint_0%5Et%20X(%5Ctau)%20d%7B%5Ctau%7D"> And assuming F(0) = 0: <img src="https://latex.codecogs.com/png.latex?F(t)%20=%20t%20+%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D"> <img src="https://latex.codecogs.com/png.latex?X%5E2(t)%20=%20t%20+%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D"></p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
example 2
</div>
</div>
<div class="callout-body-container callout-body">
<p><img src="https://latex.codecogs.com/png.latex?F(W_t)%20=%20sin%20%5Cspace%20W_t%20+%20cos%20%5Cspace%20W_t">, where <img src="https://latex.codecogs.com/png.latex?X_t"> is stochastic random variable. <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BdF%7D%7BdW_t%7D%20=%20cos%20%5Cspace%20W_t%20-%20sin%20%5Cspace%20W_t"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%5E2F%7D%7BdW_t%5E2%7D%20=%20-(sin%20%5Cspace%20W_t%20+%20cos%20%5Cspace%20W_t)"> Hence, we can now write</p>
<p><img src="https://latex.codecogs.com/png.latex?dF%20=%20-%20%5Cfrac%7B1%7D%7B2%7D(sin%20%5Cspace%20W_t%20+%20cos%20%5Cspace%20W_t)%20%5Cspace%20dt%20+%20(cos%20%5Cspace%20W_t%20-%20sin%20%5Cspace%20W_t)%20%5Cspace%20dW_t"></p>
</div>
</div>
</section>
<section id="function-of-a-stochastic-process-t-xt---itô-ii" class="level1">
<h1>Function of a stochastic process <img src="https://latex.codecogs.com/png.latex?(t,%20X(t))"> - Itô II</h1>
<p>Let <img src="https://latex.codecogs.com/png.latex?F"> be a function of both time <img src="https://latex.codecogs.com/png.latex?t"> and a stochastic random variable <img src="https://latex.codecogs.com/png.latex?X_t">. So <img src="https://latex.codecogs.com/png.latex?F%20=%20F(t,%20X_t)">.</p>
<p>Using a Taylor expansion: <img src="https://latex.codecogs.com/png.latex?F(t%20+%20dt,%20X%20+%20dX)%20%5Capprox%20F(t,%20X)%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20t%7D%20%5Cspace%20dt%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20%5Cspace%20dX%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20dX%5E2"> Using <img src="https://latex.codecogs.com/png.latex?F(t%20+%20dt,%20X+dX)%20-%20F(t,%20X)%20=%20dF"> and factoring the <img src="https://latex.codecogs.com/png.latex?dt"> and recall <img src="https://latex.codecogs.com/png.latex?dX%5E2=dt">:</p>
<p><span id="eq-ito2sde"><img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20t%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%20%5E2F%7D%7B%5Cpartial%20X%5E2%7D%20%5Cright)%20dt%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20dX%20%5Ctag%7B2%7D"></span></p>
<p>We can transform this Stochastic Differential Equation (SDE) into an itô integral.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X_%5Ctau%7D%20dX_%5Ctau%20=%20%5Cint_0%5Et%20dF%20-%20%5Cint_0%5Et%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20%5Ctau%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%20%5E2F%7D%7B%5Cpartial%20X_%5Ctau%5E2%7D%20%5Cright)%20d%5Ctau"> <span id="eq-ito2-int"><img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X_%5Ctau%7D%20dX_%5Ctau%20=%20F(t,%20X_t)%20-%20F(0,%20X_0)%20-%20%5Cint_0%5Et%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20%5Ctau%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%20%5E2F%7D%7B%5Cpartial%20X_%5Ctau%5E2%7D%20%5Cright)%20d%5Ctau%20%5Ctag%7B3%7D"></span></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example 3
</div>
</div>
<div class="callout-body-container callout-body">
<p>Express <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20%5Cleft(%20%5Ctau%20+%20W_%5Ctau%20%5Cright)%20dW_%5Ctau"></p>
<p>Using Equation&nbsp;3, we establish that what is being integrated is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20W_%5Ctau%7D">, hence <span id="eq-ex31"><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20W_%5Ctau%7D%20=%20%5Ctau%20+%20W_%5Ctau%20%5Ctag%7B4%7D"></span><br>
This allows us to find <img src="https://latex.codecogs.com/png.latex?F"> by integrating both side in regards to <img src="https://latex.codecogs.com/png.latex?W_%5Ctau">. <span id="eq-ex32"><img src="https://latex.codecogs.com/png.latex?F%20=%20%5Ctau%20W_%5Ctau%20+%20%5Cfrac%7B1%7D%7B2%7D%20W_%5Ctau%5E2%20%5Ctag%7B5%7D"></span> and derving Equation&nbsp;5 for <img src="https://latex.codecogs.com/png.latex?%5Ctau">, <span id="eq-ex33"><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20%5Ctau%7D%20=%20W_%5Ctau%20%5Ctag%7B6%7D"></span> and deriving the first derivative Equation&nbsp;4 one more time for <img src="https://latex.codecogs.com/png.latex?dW_%5Ctau">, we get <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5E2F%7D%7B%5Cpartial%20W_%5Ctau%5E2%7D%20=%201"> Hence, we can re-write <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20%5Cleft(%20%5Ctau%20+%20W_%5Ctau%20%5Cright)%20dW_%5Ctau%20=%20%5Cleft(%20%5Ctau%20W_%5Ctau%20+%20%5Cfrac%7B1%7D%7B2%7D%20W_%5Ctau%5E2%20%5Cright)%20-%20%5Cint_0%5Et%20W_%5Ctau%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cspace%20d_%5Ctau"></p>
</div>
</div>


</section>

 ]]></description>
  <category>quant-finance</category>
  <category>stochastic-integrals</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part2/SDE-Part1/index.html</guid>
  <pubDate>Fri, 21 Jul 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>04 -Martingales</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part2/martingales/index.html</link>
  <description><![CDATA[ 




<p>This post is a collection of notes about Martingales.</p>
<p>A Martingales is a stochastic process that is driftless (aka it is pure randomness or just volatility). We also say that martingales are constant mean stochastic process.</p>
<section id="continuous-time-martingales" class="level1">
<h1>Continuous time martingales</h1>
<p>A continuous time stochastic process <img src="https://latex.codecogs.com/png.latex?%5C%7B%20M_t:%20t%20%5Cin%20%5Cmathbb%7BR%7D%5E+%20%5C%7D"> such that <img src="https://latex.codecogs.com/png.latex?M_t"> is adapted to <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BF%7D_t"> (or is <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BF%7D_t"> measurable) is a martingale if:</p>
<ul>
<li>integrability condition: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BM_t%5D%20%5Clt%20%5Cinfty"></li>
<li>conditional expectation condition: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_s%5BM_%7Bt%7D%7C%5Cmathcal%7BF%7D_s%5D%20=%20M_s,%20%5Cspace%200%20%5Cleq%20s%20%5Cleq%20t"></li>
</ul>
</section>
<section id="link-between-itô-integrales-and-martingales" class="level1">
<h1>Link between itô integrales and martingales</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Intuitive &amp; Motivating example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let <img src="https://latex.codecogs.com/png.latex?X"> be a stochastic process and <img src="https://latex.codecogs.com/png.latex?F%20=%20X%5E2(t)">. <a href="../SDE-part1/index.qmd">Recall</a> then <img src="https://latex.codecogs.com/png.latex?F(t)%20=%20t%20+%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D"> <img src="https://latex.codecogs.com/png.latex?X%5E2(t)%20=%20t%20+%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D"> Taking expectation on both side <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%20X%5E2(t)%20%5Cright%5D%20=%20t%20+%20%5Cmathbb%7BE%7D%20%5Cleft%5B%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D%20%5Cright%5D"> With the <a href="../../../posts/quant-part1/brownian-motion/index.html">quadratic variation</a> We already know that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%20X%5E2(t)%20%5Cright%5D%20=%20t"> Which means that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D%20%5Cright%5D"> should be equal to 0. Which means that the itô integral <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D%20%5Cright%5D"> is a martingale.</p>
</div>
</div>
<p>Itô integrals are martingales.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?g(t,%20X_t)"> be a function of a stochastic process, then <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%20%5Cint_0%5Et%20g(%5Ctau,%20x_%5Ctau)%20%5Cspace%20dX_%5Ctau%20%5Cright%5D%20=%200"></p>
</section>
<section id="a-continuous-time-stochastic-process-is-a-martingale" class="level1">
<h1>A continuous time stochastic process is a martingale</h1>
<p><img src="https://latex.codecogs.com/png.latex?Yt)"> is a stochastic process that satisfies the following Stochastic Differential Equation <span id="eq-dy1"><img src="https://latex.codecogs.com/png.latex?dY(t)%20=%20f(Y_t,%20t)%20%5Cspace%20dt%20+%20g(Y_t,%20t)%20%5Cspace%20dX(t)%20%5Ctag%7B1%7D"></span> with initial condition <img src="https://latex.codecogs.com/png.latex?Y(0)%20=%200">.</p>
<p>How to tell if <img src="https://latex.codecogs.com/png.latex?Y(t)"> is martingale? We will use the fact, from above, that <em>Itô integrals</em> are martingales. For this, by definition, we need <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_s%5BY_t%20%7C%20%5Cmathcal%7BF%7D_s%5D%20=%20Y_s%20%5Cspace,%20%5Cspace%200%20%5Cleq%20s%20%5Cleq%20t"></p>
<p>Integrating Equation&nbsp;1 both side, we can get an exact form for <img src="https://latex.codecogs.com/png.latex?Y(t)"> <img src="https://latex.codecogs.com/png.latex?Y(t)%20=%20Y(s)%20+%20%5Cint_s%5Et%20f(Y_u,%20u)%20%5Cspace%20du%20+%20%5Cint_s%5Et%20g(Y_u,%20u)%20%5Cspace%20dX(u)"></p>
<p>Taking the expectation on both side: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D(Y_t%20%7C%20%5Cmathcal%7BF%7D_s)=%20%5Cmathbb%7BE%7D%20%5Cleft%5BY(s)%20+%20%5Cint_s%5Et%20f(Y_u,%20u)%20%5Cspace%20du%20+%20%5Cint_s%5Et%20g(Y_u,%20u)%20%5Cspace%20dX(u)%20%5Cspace%20%7C%20%5Cmathcal%7BF%7D%20%5Cright%5D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D(Y_t%20%7C%20%5Cmathcal%7BF%7D_s)%20=%20Y(s)%20+%20%5Cmathbb%7BE%7D%20%5Cleft%5B%5Cint_s%5Et%20f(Y_u,%20u)%20%5Cspace%20du%20%5Cspace%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D"></p>
<p>This is because, see above, ito integrals are martingales and <img src="https://latex.codecogs.com/png.latex?%5Cint_s%5Et%20g(Y_u,%20u)%20%5Cspace%20dX(u)"> is an ito integral. Hence, its expectation is 0 ==&gt; <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%20%5Cint_s%5Et%20g(Y_u,%20u)%20%5Cspace%20dX(u)%20%5Cright%5D%20=%200"></p>
<p>In order for <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D(Y_t%20%7C%20%5Cmathcal%7BF%7D_s)%20=%20Y(s)">, we now need <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%5Cint_s%5Et%20f(Y_u,%20u)%20%5Cspace%20du%20%5Cspace%20%7C%20%5Cmathcal%7BF%7D_s%20%5Cright%5D%20=%200">. This means that <img src="https://latex.codecogs.com/png.latex?f(Y_t,%20t)%20=%200,%20%5Cspace%20%5Cforall%20t">.</p>
<p>Going back to the SDE, we can say that <img src="https://latex.codecogs.com/png.latex?dY(t)"> is a martingale iff <img src="https://latex.codecogs.com/png.latex?dY(t)%20=%20g(Y_t,%20t)%20%5Cspace%20dX(t)"></p>
</section>
<section id="exponential-martingales" class="level1">
<h1>Exponential martingales</h1>
<p>LEt’s consider a stochastic process <img src="https://latex.codecogs.com/png.latex?Y(t)"> that satisfies the following Stochastic Differential Equation: <img src="https://latex.codecogs.com/png.latex?dY(t)%20=%20f(t)%20%5Cspace%20dt%20+%20g(t)%20%5Cspace%20dX(t)"> with initial condition <img src="https://latex.codecogs.com/png.latex?Y(0)%20=%200">. <img src="https://latex.codecogs.com/png.latex?X(t)"> is a Brownian Motion, <img src="https://latex.codecogs.com/png.latex?f(t)"> and <img src="https://latex.codecogs.com/png.latex?g(t)"> are time-dependent functions.</p>
<p>We can now define a new process such that <img src="https://latex.codecogs.com/png.latex?Z(t)%20=%20e%5E%7BY(t)%7D"></p>
<p>How can we ensure <img src="https://latex.codecogs.com/png.latex?Z(t)"> is a martingale? How should we choose <img src="https://latex.codecogs.com/png.latex?f(t)"> such that <img src="https://latex.codecogs.com/png.latex?Z(t)"> is a martingale?</p>


</section>

 ]]></description>
  <category>quant-finance</category>
  <category>stochastic-calculus</category>
  <category>martingales</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part2/martingales/index.html</guid>
  <pubDate>Wed, 19 Jul 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>03 - Random-walks &amp; Brownian Motions</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part1/brownian-motion/index.html</link>
  <description><![CDATA[ 




<p>This post is a collection of notes about Random Walk and Brownian Motions as well as their properties.</p>
<p>This <a href="../../../posts/quant-part1/random-behavior-assets/index.html">post on the random behavior of financial assets</a> might be of interest before to go through this.</p>
<section id="the-probabilty-of-random-walk" class="level1">
<h1>The probabilty of Random Walk</h1>
<p>In the context of quantitative finance, the easiest way to model a random walk is to consider a head/tail type of example which constitutes a <strong>symmetric random walk</strong>.</p>
<section id="expected-returns" class="level2">
<h2 class="anchored" data-anchor-id="expected-returns">Expected Returns</h2>
<p>So let’s define a Discrete Random Variable <img src="https://latex.codecogs.com/png.latex?R_i"> as the i-th toss of a coin. And <img src="https://latex.codecogs.com/png.latex?R"> takes the value <img src="https://latex.codecogs.com/png.latex?1"> if it’s a tail and <img src="https://latex.codecogs.com/png.latex?-1"> if it’s a head.</p>
<p>The expectation of <img src="https://latex.codecogs.com/png.latex?R_i"> is then: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BR_i%5D%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Ccdot%201%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Ccdot%20-1%20=%200"></p>
<p>The variance of <img src="https://latex.codecogs.com/png.latex?R_i"> is then: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BR_i%5D%20=%20%5Cmathbb%7BE%7D%5BR_i%5E2%5D%20-%20%5Cmathbb%7BE%7D%5BR_i%5D%5E2%20=%20%5Cleft(%20%5Cfrac%7B1%7D%7B2%7D%20%5Ccdot%20(1)%5E2%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Ccdot%20(-1)%5E2%20%5Cright)%20-%200%5E2%20=%201"></p>
</section>
<section id="expected-sum-of-returns" class="level2">
<h2 class="anchored" data-anchor-id="expected-sum-of-returns">Expected Sum of Returns</h2>
<p>Let’s now define another Discrete Random Variable <img src="https://latex.codecogs.com/png.latex?S_i"> which is the sum of the returns after n toss. Hence, <img src="https://latex.codecogs.com/png.latex?S_i%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20R_i"> with an initial condition that <img src="https://latex.codecogs.com/png.latex?S_0=0">. This initial condition not only makes sense (we did not win any money before to start the game) but it will also constitutes an important initial condition in the definition of Brownian Motion (or Wiener Process)</p>
<p>The expectation of <img src="https://latex.codecogs.com/png.latex?S_i"> is then: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BS_i%5D%20=%20%5Cmathbb%7BE%7D%20%5Cleft%5B%20%5Csum_%7Bi=0%7D%5E%7Bn%7D%20R_i%20%5Cright%5D%20=%20%5Cmathbb%7BE%7D%20%5Cleft%5B%20R_0%20+%20R_1%20+%20%5Cdots%20+%20R_n%20%5Cright%5D%20=%20%5Cmathbb%7BE%7D%5BR_0%5D%20+%20%5Cmathbb%7BE%7D%5BR_1%5D%20+%20%5Cdots%20+%20%5Cmathbb%7BE%7D%5BR_n%5D%20=%200%20+%200%20+%20%5Cdots%20+%200%20=%200%20"></p>
<p>And the variance of <img src="https://latex.codecogs.com/png.latex?S_i"> is then: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BS_i%5D%20=%20%5Cmathbb%7BE%7D%5BS_i%5E2%5D%20-%20%5Cmathbb%7BE%7D%5BS_i%5D%5E2"></p>
<p>Note how the second term <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BS_i%5D%5E2%20=%200"></p>
<p><span id="eq-var1"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BS_i%5D%20=%20%5Cmathbb%7BE%7D%20%5Cleft%5B%20%5Cleft(%20%5Csum_%7Bi=0%7D%5E%7Bn%7D%20R_i%20%5Cright)%5E2%20%5Cright%5D%20=%20%5Cmathbb%7BE%7D%20%5Cleft%5B%20R_0%5E2%20+%20R_1%5E2%20+%20%5Cdots%20+%20R_n%5E2%20+%202R_1R_2%20+%202R_1R_3%20+%20%5Ccdots%20%5Cright%5D%20%5Ctag%7B1%7D"></span></p>
<p>Because the events are independents, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BR_i%20R_j%5D%20=%200">. Hence all the double terms in Equation&nbsp;1 above are equals to 0 and <span id="eq-var2"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BS_i%5D%20=%20%5Cmathbb%7BE%7D%5BR_0%5E2%5D%20+%20%5Cmathbb%7BE%7D%5BR_1%5E2%5D%20+%20%5Cdots%20+%20%5Cmathbb%7BE%7D%5BR_n%5E2%5D%20=%201%20+%201%20+%20%5Cdots%20+%201%20=%20n%20%5Ccdot%201%20=%20n%20%5Ctag%7B2%7D"></span></p>
</section>
<section id="the-markov-property" class="level2">
<h2 class="anchored" data-anchor-id="the-markov-property">The Markov Property</h2>
<p>Imagine, we already threw the coin a few times, let’s say 10 times. Now, we have some additional information as we know <img src="https://latex.codecogs.com/png.latex?S_%7B10%7D">. We could ask ourselves the question what is the expectation for the next toss considering that additional information. It would make sense to say that we will get no more no less that what we already have since <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BR_i%5D%20=%200">. Mathematically, we can write this: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Cleft%5B%20S_%7Bi+1%7D%20%7C%20R_1,%20R_2,%20%5Cdots,%20R_i%20%5Cright%5D%20=%20S_i"></p>
<p>The expected value of <img src="https://latex.codecogs.com/png.latex?S_i"> is only dependent of the previous value <img src="https://latex.codecogs.com/png.latex?s_%7Bi-1%7D"> and not of any previous values (no memory beyond the one prior value)</p>
<p>The idea of the <em>Markov Property</em> is to say that the Random Walk Stochastic Process has no memory beyond the point where it (the walker) is now.</p>
</section>
<section id="the-martingale-property" class="level2">
<h2 class="anchored" data-anchor-id="the-martingale-property">The Martingale Property</h2>
<p>The conditional probability of any point in the future is what you already have.</p>
<p>And actually, we can generalize this further and state that: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Cleft%5B%20S_i%20%7C%20S_j%20%5Cspace%20%5Cforall%20i%20%5Cgt%20j%20%5Cright%5D%20=%20S_j"></p>
<p>In a ‘fair game’, knowledge of the past will be of no value in predicting future events.</p>
</section>
<section id="the-quadratic-variation" class="level2">
<h2 class="anchored" data-anchor-id="the-quadratic-variation">The Quadratic Variation</h2>
<p>The quadratic variation of a random walk is defined as <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5En%20(S_i%20-%20S_%7Bi-1%7D)%5E2"></p>
<p>The quadratic variation will be an extremely important concept as we extend the random-walk from a discrete time model to a continuous time model (aka to a Brownian Motion or Wiener process).</p>
<p>Intuitively, it makes sense to say that <img src="https://latex.codecogs.com/png.latex?(S_i%20-%20S_%7Bi-1%7D)%20=%20%5Cpm%201"> Hence <img src="https://latex.codecogs.com/png.latex?(S_i%20-%20S_%7Bi-1%7D)%5E2%20=%201"> Hence <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5En%20(S_i%20-%20S_%7Bi-1%7D)%5E2%20=%20n"></p>
</section>
</section>
<section id="quadratic-variation-and-transition-to-continuous-time" class="level1">
<h1>Quadratic variation and transition to continuous time</h1>
<p>In the previous setting, each unit of time was 1 unit and bet sizes were <img src="https://latex.codecogs.com/png.latex?%5Cpm%201">. We are making 2 changes to this situation.</p>
<ul>
<li>Now, we think of a time as <em>a certain amount of time</em> that we call <img src="https://latex.codecogs.com/png.latex?t">. That ‘certain amount of time’ is continuous and we can chunk it down into <img src="https://latex.codecogs.com/png.latex?n"> pieces. In this context, each piece of time is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bt%7D%7Bn%7D"> long. The goal will be to increase the size of <img src="https://latex.codecogs.com/png.latex?n"> until <img src="https://latex.codecogs.com/png.latex?n%20%5CRightarrow%20%5Cinfty"></li>
<li>the bet size are now <img src="https://latex.codecogs.com/png.latex?%5Csqrt%20%5Cfrac%7Bt%7D%7Bn%7D"></li>
</ul>
<p>To feel why are we making these changes, let’s revisit the quadratic variation on these new units of time and bet sizes. <img src="https://latex.codecogs.com/png.latex?S_%7Bi+1%7D%20-%20S_i%20=%20%5Cpm%20%5Csqrt%7B%5Cfrac%7Bt%7D%7Bn%7D%7D"> Quadratic variation is now <span id="eq-quad-variation"><img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5En%20%5Cleft(%20%5Cpm%20%5Csqrt%7B%5Cfrac%7Bt%7D%7Bn%7D%7D%20%5Cright)%5E2%20=%20n%20%5Ccdot%20%5Cfrac%7Bt%7D%7Bn%7D%20=%20t%20%5Ctag%7B3%7D"></span></p>
<p>In this way, the quadratic variation is the total time of the coin tossing. This time is still finite.</p>
<p>In this experiment, both the markov and martingale properties are still valid.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Notes
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note that:</p>
<ul>
<li>as n increases, the time decreases by a factor of <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7Bn%7D"></li>
<li>as n increases, the bet size decreases by a factor of <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B%5Cfrac%7B1%7D%7Bn%7D%7D"></li>
<li>as n increases to <img src="https://latex.codecogs.com/png.latex?%5Cinfty">, both the time and the bets size will decrease to <img src="https://latex.codecogs.com/png.latex?0"> but not in the same way (by the same order)</li>
<li>as n increases to <img src="https://latex.codecogs.com/png.latex?%5Cinfty">, the random walk stays finite! The random-walk stays continuous everywhere but differentiable nowhere</li>
<li>the limiting process as n tends to <img src="https://latex.codecogs.com/png.latex?%5Cinfty"> and time tends to <img src="https://latex.codecogs.com/png.latex?0"> (think <img src="https://latex.codecogs.com/png.latex?dt">) creates a Brownian Motion (the Continuous random variable is called <img src="https://latex.codecogs.com/png.latex?B_t">) or Wiener process (variable called <img src="https://latex.codecogs.com/png.latex?W_t">)</li>
</ul>
</div>
</div>
<p>Why does it matter that the time-step is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bt%7D%7Bn%7D"> and the bet-size is <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B%5Cfrac%7B1%7D%7Bn%7D%7D">? Any other choice would have not made the random-walk finite (it could have gone to infinity into a finite time or not move at all)</p>
</section>
<section id="the-probability-of-wiener-processes-or-brownian-motions" class="level1">
<h1>The probability of Wiener Processes or Brownian Motions</h1>
<p>We denotes a Wiener Process as <img src="https://latex.codecogs.com/png.latex?W_t"> or <img src="https://latex.codecogs.com/png.latex?W(t)"> with initial condition that <img src="https://latex.codecogs.com/png.latex?W_0%20=%200"> or <img src="https://latex.codecogs.com/png.latex?W(0)%20=%200"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
definition of Brownian Motion
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><img src="https://latex.codecogs.com/png.latex?W_0%20=%200"></li>
<li><img src="https://latex.codecogs.com/png.latex?W_t"> is a continuous path (continuous everywhere, differentiable nowhere)</li>
<li>independent increments. For <img src="https://latex.codecogs.com/png.latex?t_1%20%3C%20t_2%20%3C%20t_3%20%3C%20t_4%20%3C%20%5Ccdots">, <img src="https://latex.codecogs.com/png.latex?W_%7Bt_4%7D%20-%20W_%7Bt_3%7D"> and <img src="https://latex.codecogs.com/png.latex?W_%7Bt_2%7D%20-%20W_%7Bt_1%7D"> are independent</li>
<li>normally distributed increments. <img src="https://latex.codecogs.com/png.latex?%7CW_t%20-%20W_s%7C%20%5Csim%20N(0,%20%7Ct-s%7C)"></li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example. Show that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_t%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20=%20W_s">
</div>
</div>
<div class="callout-body-container callout-body">
<p>In other words, let’s show that the expectation of the stochastic process <img src="https://latex.codecogs.com/png.latex?W_t"> upon the condition that we know everything up to the point <img src="https://latex.codecogs.com/png.latex?s"> [<img src="https://latex.codecogs.com/png.latex?W_t"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BF%7D_s"> measurable] is <img src="https://latex.codecogs.com/png.latex?W_s"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_t%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20=%20%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_t%20-%20W_s%20+%20W_S%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20=%20%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_t%20-W_s%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20+%20%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_s%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D"> Because (bullet point #4) increments of a Brownian motion are normally distributed with mean 0: <img src="https://latex.codecogs.com/png.latex?%7CW_t%20-%20W_s%7C%20%5Csim%20N(0,%20%7Ct-s%7C)">, we can establish that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_t%20-W_s%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20=%200"></p>
<p>Hence: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_t%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20%20=%20%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_s%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20=%20W_s"></p>
</div>
</div>
<section id="properties-of-brownian-motions" class="level2">
<h2 class="anchored" data-anchor-id="properties-of-brownian-motions">Properties of Brownian Motions</h2>
<ul>
<li>They are <strong>finite</strong> - thanks to the increment (y-axis) scale with the square root of the time-steps</li>
<li>they are <strong>continuous</strong> - limit when time-steps are infinity small and the random-walk is becoming continuous</li>
<li>follow <strong>Markov property</strong></li>
<li>follow <strong>Martingale property</strong></li>
<li>the quadratic variation from 0 to t is <img src="https://latex.codecogs.com/png.latex?t"> itself - see Equation&nbsp;3</li>
<li><strong>normality</strong>. <img src="https://latex.codecogs.com/png.latex?W(t_i)%20-%20W(t_%7Bi-1%7D)"> is normally distributed with mean 0 and variance <img src="https://latex.codecogs.com/png.latex?t_i%20-%20t_%7Bi-1%7D"></li>
</ul>
</section>
<section id="expectation-of-w_t" class="level2">
<h2 class="anchored" data-anchor-id="expectation-of-w_t">Expectation of <img src="https://latex.codecogs.com/png.latex?W_t"></h2>
<p>Expectation is the same as in the random-walk except this time we are using the limit when <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%200">. <span id="eq-exp-bm"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BW_t%5D%20=%20%5Cmathbb%7BE%7D%20%5Cleft%5B%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Csum_%7Bi=1%7D%5En%20R_i%5Cright%5D%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Csum_%7Bi=1%7D%5En%20%5Cmathbb%7BE%7D%5BR_i%5D%20=%20n%20%5Ccdot%200%20=%200%20%5Ctag%7B4%7D"></span></p>
<p>In this sense, the mean of <img src="https://latex.codecogs.com/png.latex?W_t%20=%200">.</p>
</section>
<section id="variance-of-w_t" class="level2">
<h2 class="anchored" data-anchor-id="variance-of-w_t">Variance of <img src="https://latex.codecogs.com/png.latex?W_t"></h2>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BW_t%5D%20=%20%5Cmathbb%7BE%5BW_t%5E2%5D%7D%20-%20%5Cmathbb%7BE%7D%5BW_t%5D%5E2"></p>
<p>From Equation&nbsp;4, we already know that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BW_t%5D%20=%200">; hence <img src="https://latex.codecogs.com/png.latex?%5Cleft(%20%5Cmathbb%7BE%7D%5BW_t%5D%20%5Cright)%5E2"> is also <img src="https://latex.codecogs.com/png.latex?0"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BW_t%5E2%5D%20=%20%5Cmathbb%7BE%7D%5Cleft%5B%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Csum_%7Bi=1%7D%5En%20R_i%5E2%20%5Cright%5D%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Csum_%7Bi=1%7D%5En%20%5Cmathbb%7BE%7D%5BR_i%5E2%5D%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20n%20%5Ccdot%20%5Cleft(%20%5Csqrt%7B%5Cfrac%7Bt%7D%7Bn%7D%7D%20%5Cright)%5E2%20=%20t"></p>


</section>
</section>

 ]]></description>
  <category>Random-Walk</category>
  <category>Brownian-Motion</category>
  <category>Quadratic-Variation</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part1/brownian-motion/index.html</guid>
  <pubDate>Wed, 19 Jul 2023 17:00:00 GMT</pubDate>
  <media:content url="https://fderyckel.github.io/blog.html/posts/quant-part1/brownian-motion/random-walk.png" medium="image" type="image/png" height="165" width="144"/>
</item>
<item>
  <title>Black-Schole Equation</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part3/black-schole/index.html</link>
  <description><![CDATA[ 




<section id="deriving-the-black-schole-equation" class="level1">
<h1>Deriving the Black-Schole Equation</h1>
</section>
<section id="solving-the-black-schole-equation" class="level1">
<h1>Solving the Black-Schole Equation</h1>
</section>
<section id="recap" class="level1">
<h1>Recap</h1>
<section id="european-vanilla" class="level2">
<h2 class="anchored" data-anchor-id="european-vanilla">European Vanilla</h2>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20S%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D%20+%20r%20S%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20-%20rV%20=%200"></p>
<ul>
<li>V is the option price at the time <img src="https://latex.codecogs.com/png.latex?t">. So <img src="https://latex.codecogs.com/png.latex?V%20=%20V(S,%20t)"><br>
</li>
<li>S is the asset spot price</li>
<li>t is the time to expiry (in years)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Csigma"> is the asset diffusion term (its stochastic element)</li>
<li><img src="https://latex.codecogs.com/png.latex?r"> is the annualized continuously compounded risk-free rate (imaginary friend)</li>
</ul>
<p>In the case of a <strong>European Call Option with no-dividend</strong>, the BSE has solution:</p>
<p><img src="https://latex.codecogs.com/png.latex?C%20=%20S%20N(d_1)%20-%20K%20e%5E%7B-r(T-t)%7D%20N(d_2)"></p>
<p>And in the case of a <strong>European Put Option with no-dividend</strong>, the BSE has solution: <img src="https://latex.codecogs.com/png.latex?P%20=%20K%20e%5E%7B-r(T-t)%7DN(-d_2)%20-%20SN(-d_1)"></p>
<p>where, <img src="https://latex.codecogs.com/png.latex?d_1%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7BT-t%7D%7D%20%5Cleft%5B%20ln%20%5Cleft(%20%5Cfrac%7BS%7D%7BK%7D%20%5Cright)%20+%20%5Cleft(%20r%20+%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7D%20%5Cright)%20(T-t)%20%5Cright%5D"></p>
<p><img src="https://latex.codecogs.com/png.latex?d_2%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7BT-t%7D%7D%20%5Cleft%5B%20ln%20%5Cleft(%20%5Cfrac%7BS%7D%7BK%7D%20%5Cright)%20+%20%5Cleft(%20r%20-%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7D%20%5Cright)%20(T-t)%20%5Cright%5D%20=%20d1%20-%20%5Csigma%20%5Csqrt%7BT-t%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?N(x)%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%20%5Cpi%7D%7D%20%5Cint_%7B-%5Cinfty%7D%5E%7Bx%7D%20e%5E%7B%5Cfrac%7B-1%7D%7B2%7D%20x%5E2%7D%20dx"></p>
<ul>
<li>K is the strike price</li>
</ul>
</section>
<section id="european-vanilla-with-dividends" class="level2">
<h2 class="anchored" data-anchor-id="european-vanilla-with-dividends">European Vanilla with Dividends</h2>
<p>And in the case of a dividend (ok … assuming continuous dividend yield):</p>
<p><img src="https://latex.codecogs.com/png.latex?C%20=%20S%20e%5E%7B-D(T-t)%7D%20N(d_1)%20-%20K%20e%5E%7B-r(T-t)%7D%20N(d_2)"></p>
<p><img src="https://latex.codecogs.com/png.latex?P%20=%20K%20e%5E%7B-r(T-t)%7DN(-d_2)%20-%20Se%5E%7B-D(T-t)%7DN(-d_1)"></p>
<p><img src="https://latex.codecogs.com/png.latex?d_1%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7BT-t%7D%7D%20%5Cleft%5B%20ln%20%5Cleft(%20%5Cfrac%7BS%7D%7BK%7D%20%5Cright)%20+%20%5Cleft(%20r%20-%20D%20+%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7D%20%5Cright)%20(T-t)%20%5Cright%5D"></p>
<p><img src="https://latex.codecogs.com/png.latex?d_2%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7BT-t%7D%7D%20%5Cleft%5B%20ln%20%5Cleft(%20%5Cfrac%7BS%7D%7BK%7D%20%5Cright)%20+%20%5Cleft(%20r%20-%20D%20-%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7D%20%5Cright)%20(T-t)%20%5Cright%5D%20=%20d1%20-%20%5Csigma%20%5Csqrt%7BT-t%7D"></p>
</section>
</section>
<section id="the-greeks" class="level1">
<h1>The Greeks</h1>
<table class="table">
<colgroup>
<col style="width: 14%">
<col style="width: 56%">
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 10%">
</colgroup>
<thead>
<tr class="header">
<th>Greek</th>
<th>Description</th>
<th>Formula</th>
<th>Call Option</th>
<th>Put Option</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Delta</td>
<td>Sensitivity of option value to changes in asset price</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?N(d_1)"></td>
<td><img src="https://latex.codecogs.com/png.latex?-N(-d_!)"></td>
</tr>
<tr class="even">
<td>Gamma</td>
<td>Sensitivity of Delta to changes in asset price</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BN(d_1)%7D%7BS%20%5Csigma%20%5Csqrt%7Bt%7D%7D"></td>
<td></td>
</tr>
<tr class="odd">
<td>Vega</td>
<td>Sensitivity of option value to changes in volatility</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20%5Csigma%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?S%20N(d_1)%20%5Csqrt%7Bt%7D"></td>
<td></td>
</tr>
<tr class="even">
<td>Theta</td>
<td>Sensitivity of option value to changes in time</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D"></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>Rho</td>
<td>Sensitivity of option value to change in risk-free rate</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20r%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?Kte%5E%7B-rt%7D%20N(d_2)"></td>
<td><img src="https://latex.codecogs.com/png.latex?-Kte%5E%7B-rt%7D%20N(-d_2)"></td>
</tr>
</tbody>
</table>
</section>
<section id="create-a-function-for-numerical-computation" class="level1">
<h1>Create a function for numerical computation</h1>
<section id="using-python" class="level2">
<h2 class="anchored" data-anchor-id="using-python">Using Python</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> norm</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt </span>
<span id="cb1-5"></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> option_pricing: </span>
<span id="cb1-8">  </span>
<span id="cb1-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  To price European Style options without dividends</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  """</span></span>
<span id="cb1-12">  </span>
<span id="cb1-13">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, spot, strike, rate, dte, sigma): </span>
<span id="cb1-14">    </span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assign our variables</span></span>
<span id="cb1-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spot</span>
<span id="cb1-17">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> strike</span>
<span id="cb1-18">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rate</span>
<span id="cb1-19">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dte    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># days to expiration (in years)</span></span>
<span id="cb1-20">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigma</span>
<span id="cb1-21">    </span>
<span id="cb1-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to avoid zero division, let not allow strike of 0</span></span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb1-24">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ZeroDivisionError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The Strike Price cannot be 0'</span>)</span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: </span>
<span id="cb1-26">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dte) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-27">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d2_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) </span>
<span id="cb1-28">    </span>
<span id="cb1-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'callPrice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'putPrice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'callDelta'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'putDelta'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gamma'</span>]: </span>
<span id="cb1-30">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__dict__[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-31">      </span>
<span id="cb1-32">    [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.callPrice, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.putPrice] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._price() </span>
<span id="cb1-33">    [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.callDelta, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.putDelta] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._delta()</span>
<span id="cb1-34">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._gamma()</span>
<span id="cb1-35">    </span>
<span id="cb1-36">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _price(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): </span>
<span id="cb1-37">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb1-38">        call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> maximum(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike)</span>
<span id="cb1-39">        put <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> maximum(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot) </span>
<span id="cb1-40">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: </span>
<span id="cb1-41">        call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d2_))</span>
<span id="cb1-42">        put <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d2_)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_))</span>
<span id="cb1-43">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [call, put] </span>
<span id="cb1-44">    </span>
<span id="cb1-45">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _delta(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): </span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb1-47">      call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb1-48">      put <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb1-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: </span>
<span id="cb1-50">      call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm.cdf(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_)</span>
<span id="cb1-51">      put <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>norm.cdf(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_)</span>
<span id="cb1-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [call, put]</span>
<span id="cb1-53">  </span>
<span id="cb1-54">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _gamma(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): </span>
<span id="cb1-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> norm.cdf(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tabulate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tabulate</span>
<span id="cb2-2"></span>
<span id="cb2-3">option <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option_pricing(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5">header <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Call Price'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Put Price'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Call Delta'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gamma'</span>]</span>
<span id="cb2-6">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[option.callPrice, option.putPrice, option.callDelta, option.gamma]]</span>
<span id="cb2-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tabulate(table, header))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Call Price    Put Price    Call Delta      Gamma
------------  -----------  ------------  ---------
     7.96557      7.96557      0.539828  0.0269914</code></pre>
</div>
</div>
</section>
<section id="retrieving-option-data-using-yahoo-finance" class="level2">
<h2 class="anchored" data-anchor-id="retrieving-option-data-using-yahoo-finance">Retrieving option data using Yahoo finance</h2>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> yfinance <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> yf </span>
<span id="cb4-2"></span>
<span id="cb4-3">amd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yf.Ticker(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AMD'</span>)</span>
<span id="cb4-4">amd_hist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> amd.history(start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-01-01'</span>)</span>
<span id="cb4-5">options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> amd.option_chain(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-12-15'</span>)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb4-8">dte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> datetime.today()).days </span>
<span id="cb4-9"></span>
<span id="cb4-10">log_returns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(amd_hist[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Close'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> amd_hist[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Close'</span>].shift(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).dropna()</span>
<span id="cb4-11">historical_vol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_returns.std() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(dte)</span>
<span id="cb4-12"></span>
<span id="cb4-13">spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">116</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> strike <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb4-14"></span>
<span id="cb4-15">amd_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option_pricing(spot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>spot, strike<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>strike, rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rate, dte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>historical_vol)</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'The BS model for AMD 147 days ahead is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>amd_opt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>callPrice<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The BS model for AMD 147 days ahead is 2.7995</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> options.calls[(options.calls[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (options.calls[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)]</span>
<span id="cb6-2">df.reset_index(drop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, inplace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-3"></span>
<span id="cb6-4">df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'price'</span>: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lastPrice'</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'impl_vol'</span>: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'impliedVolatility'</span>]})</span>
<span id="cb6-5">df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'delta'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gamma'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df1)): </span>
<span id="cb6-8">  df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'delta'</span>].iloc[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option_pricing(spot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>spot, strike<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>].iloc[i], rate, dte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dte, sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'impl_vol'</span>].iloc[i]).callDelta</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df1)):</span>
<span id="cb7-2">    </span>
<span id="cb7-3">    df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Delta'</span>].iloc[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option_pricing(spot,df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>].iloc[i],rate,dte,df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'impl_vol'</span>].iloc[i]).callDelta</span>
<span id="cb7-4">    df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gamma'</span>].iloc[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option_pricing(spot,df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>].iloc[i],rate,dte,df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'impl_vol'</span>].iloc[i]).gamma</span></code></pre></div>
</div>


</section>
</section>

 ]]></description>
  <category>Black-Schole</category>
  <category>Risk Neutrality</category>
  <category>Greeks</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part3/black-schole/index.html</guid>
  <pubDate>Mon, 17 Jul 2023 17:00:00 GMT</pubDate>
  <media:content url="https://fderyckel.github.io/blog.html/posts/quant-part3/black-schole/blacl-scholes.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>03 - Stochastic Calculus - Part III</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part2/SDE-part3/index.html</link>
  <description><![CDATA[ 




<section id="recall" class="level1">
<h1>Recall</h1>
<table class="table">
<colgroup>
<col style="width: 11%">
<col style="width: 88%">
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Itô Lemma</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?F(X_t)"></td>
<td><img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20%5Cspace%20dt%20+%20%5Cfrac%7BdF%7D%7BdX%7D%20%5Cspace%20dx"></td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?F(t,%20X_t)"></td>
<td><img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20t%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20F%7D%7B%5Cpartial%20X%5E2%7D%20%5Cright)%20dt%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20dX"></td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?V(S)"> when <img src="https://latex.codecogs.com/png.latex?dS%20=%20%5Cmu%20S%20dt%20+%20%5Csigma%20S%20dX"></td>
<td><img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cmu%20S%20%5Cfrac%7BdV%7D%7BdS%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20S%5E2%20%5Cfrac%7Bd%5E2V%7D%7BdS%5E2%7D%20%5Cright)dt%20+%20%5Cleft(%20%5Csigma%20S%20%5Cfrac%7BdV%7D%7BdS%7D%5Cright)%20dX"></td>
</tr>
</tbody>
</table>
</section>
<section id="itô-integrals-as-non-anticipatory" class="level1">
<h1>Itô Integrals as non-anticipatory</h1>
<p>Let’s consider the stochastic integral of the form <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5ET%20f(t,%20X(t))%20dX(t)"> where <img src="https://latex.codecogs.com/png.latex?X_t"> is a Brownian motion. We’ll shorten this form to <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5ET%20f(t,%20X)%20dX"></p>
<p>We define this integral as <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5ET%20f(t,%20X)%20dX%20=%20%5Clim_%7BN%20%5Cto%20%5Cinfty%7D%20%5Csum_%7Bi=0%7D%5E%7BN-1%7D%20f(t_i,%20X_i)%20%5Ccdot%20%5Cunderbrace%7B%20(X_%7Bi+1%7D%20-%20X_i)%20%7D_%7BdX%7D"></p>
<p>It’s important to define it this way in order for the itô integral to stay <strong>non-anticipatory</strong>. We know everything up to time <img src="https://latex.codecogs.com/png.latex?t_i"> and so the only uncertainties left is <img src="https://latex.codecogs.com/png.latex?X_%7Bi+1%7D%20-%20X_i"> which is <img src="https://latex.codecogs.com/png.latex?dX"></p>
</section>
<section id="product-rule-within-stochastic-calculus" class="level1">
<h1>Product rule within Stochastic Calculus</h1>
<p>When dealing with Stochastic Differential Equations, we can adapt some of the rules of classical calculus such as the product rule: <img src="https://latex.codecogs.com/png.latex?d(xy)%20=%20xdy%20+%20ydx"></p>
<p>Let’s say we have 2 stochastic processes: <img src="https://latex.codecogs.com/png.latex?d(X(t))%20=%20%5Cmu_1%20X(t)%20dt%20+%20%5Csigma_1%20X(t)%20%20dW_t"> <img src="https://latex.codecogs.com/png.latex?d(Y(t))%20=%20%5Cmu_2%20Y(t)%20dt%20+%20%5Csigma_2%20Y(t)%20dW_t"></p>
<p>And we define a function <img src="https://latex.codecogs.com/png.latex?F"> which is a product of these 2 stochastic processes such that <img src="https://latex.codecogs.com/png.latex?F%20=%20F(X,Y)%20=%20XY">.</p>
<p>Using a Taylor Series Expansion, we can write: <img src="https://latex.codecogs.com/png.latex?F(X%20+%20dX,%20Y%20+%20dY)%20%5Capprox%20F(X,Y)%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20dX%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20Y%7D%20dY%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20X%5E2%7D%20dX%5E2%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20Y%5E2%7D%20dY%5E2%20+%20%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20X%20%5Cpartial%20Y%7D%20dXdY%20+%20%5Cdots"></p>
<p>Hence, <span id="eq-product-TS-expan"><img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20dX%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20Y%7D%20dY%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20X%5E2%7D%20dX%5E2%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20Y%5E2%7D%20dY%5E2%20+%20%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20X%20%5Cpartial%20Y%7D%20dXdY%20+%20%5Cdots%20%5Ctag%7B1%7D"></span></p>
<p>Now, we can calculate all these partial derivatives and plugged them back in the above equation. <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20=%20Y"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2%20F%7D%7B%5Cpartial%20X%5E2%7D%20=%200">.</p>
<p>Similarly <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20Y%7D%20=%20X"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2%20F%7D%7B%5Cpartial%20Y%5E2%7D%20=%200">.</p>
<p>Finally: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20X%20%5Cpartial%20Y%7D%20=%201"></p>
<p>Plugging it all back in Equation&nbsp;1: <span id="eq-product-rule"><img src="https://latex.codecogs.com/png.latex?dF%20=%20Y%20dX%20+%20X%20dY%20+%20dXdY%20%5Ctag%7B2%7D"></span></p>
</section>
<section id="integral-by-parts" class="level1">
<h1>Integral by parts</h1>
<p>In classical calculus, we re-use the product rule to come up with the integration by part: <img src="https://latex.codecogs.com/png.latex?d(xy)%20=%20xdy%20+%20ydx">. That is <img src="https://latex.codecogs.com/png.latex?xdy%20=%20d(xy)%20-%20ydx"> which we can integrate for and get: <img src="https://latex.codecogs.com/png.latex?%5Cint%20xdy%20=%20%5Cint%20d(xy)%20-%20%5Cint%20y%20dx"> which is the same as <img src="https://latex.codecogs.com/png.latex?%5Cint%20x%20dy%20=%20xy%20-%20%5Cint%20y%20dx">.</p>
<p>Let’s bring this to stochastic calculus. Again <img src="https://latex.codecogs.com/png.latex?F"> is a function of the product of 2 stochastic processes: <img src="https://latex.codecogs.com/png.latex?F%20=%20F(X,Y)%20=%20XY"> Using the same logic and our previous result Equation&nbsp;2, we write <img src="https://latex.codecogs.com/png.latex?d(XY)%20=%20Y%20dX%20+%20X%20dY%20+%20dXdY"> <img src="https://latex.codecogs.com/png.latex?X%20dY%20=%20d(XY)%20-%20Y%20dX%20-%20dXdY%20"> <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20X_s%20dY_s%20=%20%5Cint_0%5Et%20d(X_sY_s)%20-%20%5Cint_0%5Et%20Y_s%20dX_s%20-%20%5Cint_0%5Et%20dX_sdY_s"> <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20X_s%20dY_s%20=%20X_tY_t%20-%20X_0Y_0%20-%20%5Cint_0%5Et%20Y_s%20dX_s%20-%20%5Cint_o%5Et%20dX_sdY_s"></p>
</section>
<section id="quotient-rule-within-stochastic-calculus" class="level1">
<h1>Quotient Rule within Stochastic Calculus</h1>
<p>We will re-use the Taylor Series Expansion (Equation&nbsp;1) except this time the function <img src="https://latex.codecogs.com/png.latex?F"> is a function of the quotient of 2 stochastic processes: <img src="https://latex.codecogs.com/png.latex?F%20=%20F(X,%20Y)%20=%20%5Cfrac%7BX%7D%7BY%7D">. Calculating all the partial derivatives: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20=%20%5Cfrac%7B1%7D%7BY%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2%20F%7D%7B%5Cpartial%20X%5E2%7D%20=%200">.</p>
<p>Similarly <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20Y%7D%20=%20%5Cfrac%7B-X%7D%7BY%5E2%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2%20F%7D%7B%5Cpartial%20Y%5E2%7D%20=%20%5Cfrac%7B2X%7D%7BY%5E3%7D">.</p>
<p>Finally: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20X%20%5Cpartial%20Y%7D%20=%20%5Cfrac%7B-1%7D%7BY%5E2%7D"></p>
<p>Putting it all back together: <img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7B1%7D%7BY%7D%20dX%20+%20%5Cfrac%7B-X%7D%7BY%5E2%7D%20dY%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B2X%7D%7BY%5E3%7D%20dY%5E2+%20%5Cfrac%7B-1%7D%7BY%5E2%7D%20dXdY"> Which we can re-write as: <span id="eq-quotient-rule"><img src="https://latex.codecogs.com/png.latex?dF%20=%20d%20%5Cleft(%20%5Cfrac%7BX%7D%7BY%7D%20%5Cright)%20=%20%5Cfrac%7BX%7D%7BY%7D%20%5Ccdot%20%5Cleft(%20%5Cfrac%7B1%7D%7BX%7D%20dX%20-%20%5Cfrac%7B1%7D%7BY%7D%20dY%20-%20%5Cfrac%7B1%7D%7BXY%7D%20dXdY%20+%20%5Cfrac%7B1%7D%7BY%5E2%7D%20dY%5E2%5Cright)%20%5Ctag%7B3%7D"></span></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
In the quant world.
</div>
</div>
<div class="callout-body-container callout-body">
<p>we can word these results in the following way - taken from <a href="https://fermatslastspreadsheet.com/2011/12/28/itos-product-and-quotient-rules-as-described-by-a-trader/">here</a>:</p>
<ul>
<li><strong>Itô product rule:</strong> we buy correlation when we have a product</li>
<li><strong>Itô quotient rule:</strong> we sell correlation when we have a ratio, and we are long vol of the denominator.</li>
</ul>
</div>
</div>


</section>

 ]]></description>
  <category>time-series</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part2/SDE-part3/index.html</guid>
  <pubDate>Sun, 02 Jul 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Quant Puzzle #01</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-puzzle-01/index.html</link>
  <description><![CDATA[ 




<p>This is attempt to start a series of puzzles for quant. The source for these puzzles is <a href="https://ntquant.substack.com/p/quant-puzzles-week-1-portfolio-theory">this noteworthy substack on quant finance</a></p>
<section id="puzzle-1" class="level1">
<h1>Puzzle 1</h1>
<blockquote class="blockquote">
<p>An investment strategy has an annualized expected return of 3% and an annualized volatility of 10%. Assume returns are normally distributed and independent from one year to the next. After how many years will the mean annualized returns of a portfolio be positive with at least 91.3% probability? What about the compounded returns?</p>
</blockquote>
<p>Our previous post on the <a href="../../posts/quant-part1/random-behavior-assets/index.html">random behavior of assets</a> is a good start.</p>
<p>To calculate the mean annualized returns, we will use <img src="https://latex.codecogs.com/png.latex?Ret%20=%20%5Cfrac%20%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20R_i%7D%7Bn%7D"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?R_i"> is the annual return for the year i</li>
<li><img src="https://latex.codecogs.com/png.latex?n"> is the number of year.</li>
</ul>
<section id="solving-using-r" class="level2">
<h2 class="anchored" data-anchor-id="solving-using-r">Solving using R</h2>
<section id="using-the-mean-annualized-returns" class="level3">
<h3 class="anchored" data-anchor-id="using-the-mean-annualized-returns">Using the mean annualized returns</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mutate(), tibble(), if_else(), group_by(), summarize()</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pmap()</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unnest()</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">num_sim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a function to get yearly return (both average and compounded)</span></span>
<span id="cb1-8">create_simul_ret <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(mu, sigma, num_year) { </span>
<span id="cb1-9">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>num_year, </span>
<span id="cb1-10">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ret =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(num_year, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> sigma)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ann_ret =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ret, </span>
<span id="cb1-12">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cum_ret =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(ann_ret) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> year_num,           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function for mean annualized returns </span></span>
<span id="cb1-13">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">compounded_ret =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumprod</span>(ann_ret)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>year_num), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to get compounded returns</span></span>
<span id="cb1-14">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">posit_cum_ret =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(cum_ret <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb1-15">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">posit_comp_ret =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(compounded_ret <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb1-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df)</span>
<span id="cb1-17">}</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To get all different random return numbers, I need to fetch the data from the row</span></span>
<span id="cb1-20"></span>
<span id="cb1-21">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sim_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>num_sim, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num_year =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sim_ret =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(mu, sigma, num_year), create_simul_ret)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(sim_ret)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># large df with 30 rows/year per simulation</span></span>
<span id="cb1-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(year_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># group by year to calculate average returns</span></span>
<span id="cb1-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">avg_num_pos_ret =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(posit_cum_ret), </span>
<span id="cb1-26">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">avg_num_comp_pos_ret =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(posit_comp_ret))</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">

<div id="nagbzeudmx" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#nagbzeudmx table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#nagbzeudmx thead, #nagbzeudmx tbody, #nagbzeudmx tfoot, #nagbzeudmx tr, #nagbzeudmx td, #nagbzeudmx th {
  border-style: none;
}

#nagbzeudmx p {
  margin: 0;
  padding: 0;
}

#nagbzeudmx .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#nagbzeudmx .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#nagbzeudmx .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#nagbzeudmx .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#nagbzeudmx .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#nagbzeudmx .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#nagbzeudmx .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#nagbzeudmx .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#nagbzeudmx .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#nagbzeudmx .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#nagbzeudmx .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#nagbzeudmx .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#nagbzeudmx .gt_spanner_row {
  border-bottom-style: hidden;
}

#nagbzeudmx .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#nagbzeudmx .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#nagbzeudmx .gt_from_md > :first-child {
  margin-top: 0;
}

#nagbzeudmx .gt_from_md > :last-child {
  margin-bottom: 0;
}

#nagbzeudmx .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#nagbzeudmx .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#nagbzeudmx .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#nagbzeudmx .gt_row_group_first td {
  border-top-width: 2px;
}

#nagbzeudmx .gt_row_group_first th {
  border-top-width: 2px;
}

#nagbzeudmx .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#nagbzeudmx .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#nagbzeudmx .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#nagbzeudmx .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#nagbzeudmx .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#nagbzeudmx .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#nagbzeudmx .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#nagbzeudmx .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#nagbzeudmx .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#nagbzeudmx .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#nagbzeudmx .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#nagbzeudmx .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#nagbzeudmx .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#nagbzeudmx .gt_left {
  text-align: left;
}

#nagbzeudmx .gt_center {
  text-align: center;
}

#nagbzeudmx .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#nagbzeudmx .gt_font_normal {
  font-weight: normal;
}

#nagbzeudmx .gt_font_bold {
  font-weight: bold;
}

#nagbzeudmx .gt_font_italic {
  font-style: italic;
}

#nagbzeudmx .gt_super {
  font-size: 65%;
}

#nagbzeudmx .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#nagbzeudmx .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#nagbzeudmx .gt_indent_1 {
  text-indent: 5px;
}

#nagbzeudmx .gt_indent_2 {
  text-indent: 10px;
}

#nagbzeudmx .gt_indent_3 {
  text-indent: 15px;
}

#nagbzeudmx .gt_indent_4 {
  text-indent: 20px;
}

#nagbzeudmx .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
  <thead>
    
    <tr class="gt_col_headings">
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="year_num">year_num</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="avg_num_pos_ret">avg_num_pos_ret</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="avg_num_comp_pos_ret">avg_num_comp_pos_ret</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="year_num" class="gt_row gt_right">1</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.6091</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.6091</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">2</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.6605</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.6475</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">3</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.6962</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.6759</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">4</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.7210</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.6948</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">5</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.7429</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.7126</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">6</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.7660</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.7332</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">7</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.7830</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.7481</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">8</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.7982</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.7581</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">9</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.8114</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.7733</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">10</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.8254</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.7828</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">11</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.8374</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.7974</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">12</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.8489</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8077</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">13</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.8613</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8188</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">14</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.8680</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8257</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">15</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.8742</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8334</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">16</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.8803</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8410</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">17</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.8896</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8484</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">18</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.8950</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8540</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">19</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.8990</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8601</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">20</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.9083</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8662</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right" style="background-color: rgba(128,188,216,0.8); color: #000000; font-weight: normal;">21</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right" style="background-color: rgba(128,188,216,0.8); color: #000000; font-weight: normal;">0.9109</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right" style="background-color: rgba(128,188,216,0.8); color: #000000; font-weight: normal;">0.8700</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">22</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.9156</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8758</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">23</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.9201</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8809</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">24</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.9295</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8872</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">25</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.9325</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8939</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">26</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.9355</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.8997</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">27</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.9400</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.9036</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">28</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.9431</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.9062</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right">29</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right">0.9447</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right">0.9110</td></tr>
    <tr><td headers="year_num" class="gt_row gt_right" style="background-color: rgba(128,188,216,0.8); color: #000000; font-weight: normal;">30</td>
<td headers="avg_num_pos_ret" class="gt_row gt_right" style="background-color: rgba(128,188,216,0.8); color: #000000; font-weight: normal;">0.9464</td>
<td headers="avg_num_comp_pos_ret" class="gt_row gt_right" style="background-color: rgba(128,188,216,0.8); color: #000000; font-weight: normal;">0.9136</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
</section>
</section>
<section id="solving-using-python" class="level2">
<h2 class="anchored" data-anchor-id="solving-using-python">Solving Using Python</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Computes a moving average from a gaussian sample over n trials</span></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> gauss_moving_average(mu,sigma,n):</span>
<span id="cb2-4">    moving_average_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb2-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-7">            moving_average_list.append(random.gauss(mu,sigma))</span>
<span id="cb2-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-9">            moving_average_list.append((moving_average_list[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>random.gauss(mu,sigma))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> moving_average_list</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Outputs a list of guassian moving average time series</span></span>
<span id="cb2-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_sims(mu, sigma, n, years):</span>
<span id="cb2-14">    sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb2-16">        sims.append(gauss_moving_average(mu,sigma,years))</span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sims</span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Outputs the percentage of positive entries in a column of a matrix</span></span>
<span id="cb2-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> percent_positive_column(matrix,column):</span>
<span id="cb2-20">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(matrix)</span>
<span id="cb2-21">    percent_positive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb2-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> matrix[i][column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-24">            percent_positive<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n) </span>
<span id="cb2-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> percent_positive<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb2-26"></span>
<span id="cb2-27"></span>
<span id="cb2-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Runs the simulation and checks for our confidence level</span></span>
<span id="cb2-29">matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_sims(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb2-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb2-31">    conf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> percent_positive_column(matrix, i)</span>
<span id="cb2-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(conf)</span>
<span id="cb2-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>  conf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">91.3</span>:</span>
<span id="cb2-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"has positive returns with probability"</span>, conf)</span>
<span id="cb2-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>61.93999999998159
66.66699999996007
70.11999999994435
72.92899999993158
75.1649999999214
77.24099999991195
79.06299999990367
80.68199999989629
81.95799999989049
83.17599999988494
84.27499999987994
85.2739999998754
86.20499999987116
87.1399999998669
87.92999999986331
88.63799999986009
89.30399999985706
90.13199999985329
90.65399999985091
91.18599999984849
91.68499999984621
Year 21 has positive returns with probability 91.68499999984621</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>R-code</category>
  <category>quant-finance</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-puzzle-01/index.html</guid>
  <pubDate>Mon, 12 Jun 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Naive-Bayes - Part 1</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/naives-bayes-intro/index.html</link>
  <description><![CDATA[ 




<p>Some very basic ML using Naive-Bayes and the tidymodel framework.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mutate(), row_number()</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/financial_news.csv'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentiment'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sentiment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(sentiment))</span></code></pre></div>
</div>
<p>Using the tidyverse, we’ll</p>
<ul>
<li>split the df into a training and testing set.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rsample)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial_split(), training(), testing()</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(recipes)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(parsnip)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># naive_bayes(), set_engine()</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(workflows)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># workflow()</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(discrim)</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(textrecipes)</span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(yardstick)</span>
<span id="cb2-9"></span>
<span id="cb2-10">list_splits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">initial_split</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strata =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentiment'</span>)</span>
<span id="cb2-11">df_train <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">training</span>(list_splits)</span>
<span id="cb2-12">df_test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testing</span>(list_splits)</span>
<span id="cb2-13"></span>
<span id="cb2-14">list_recipe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(sentiment <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df_train) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_tokenize</span>(text) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_stopwords</span>(text) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_tokenfilter</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_tokens =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_tfidf</span>(text)</span>
<span id="cb2-19">  </span>
<span id="cb2-20"></span>
<span id="cb2-21">mod_nb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">naive_Bayes</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'naivebayes'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_mode</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classification'</span>)</span>
<span id="cb2-22">mod_svm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">svm_poly</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kernlab'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_mode</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classification'</span>)</span>
<span id="cb2-23">list_cv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vfold_cv</span>(df_train, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">v =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strata =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentiment'</span>)</span>
<span id="cb2-24"></span>
<span id="cb2-25">wf_nb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_recipe</span>(list_recipe) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_model</span>(mod_nb)</span>
<span id="cb2-26">wf_nb</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: naive_Bayes()

── Preprocessor ────────────────────────────────────────────────────────────────
4 Recipe Steps

• step_tokenize()
• step_stopwords()
• step_tokenfilter()
• step_tfidf()

── Model ───────────────────────────────────────────────────────────────────────
Naive Bayes Model Specification (classification)

Computational engine: naivebayes </code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">wf_svm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_recipe</span>(list_recipe) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_model</span>(mod_svm)</span>
<span id="cb4-2"></span>
<span id="cb4-3">fit_mod_nb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(wf_nb, df_train)</span>
<span id="cb4-4">pred_mod_nb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(fit_mod_nb, df_test)</span>
<span id="cb4-5">pred_mod_nb_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(fit_mod_nb, df_test, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prob'</span>)</span>
<span id="cb4-6"></span>
<span id="cb4-7">fit_mod_svm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(wf_svm, df_train)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Setting default kernel parameters  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">pred_mod_svm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(fit_mod_svm, df_test)</span>
<span id="cb6-2">pred_mod_svm_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(fit_mod_svm, df_test, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prob'</span>)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(df_test, pred_mod_nb) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">conf_mat</span>(sentiment, .pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          Truth
Prediction negative neutral positive
  negative       65      55       81
  neutral        53     509      168
  positive        3      12       24</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(df_test, pred_mod_svm) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">conf_mat</span>(sentiment, .pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          Truth
Prediction negative neutral positive
  negative       31       6       17
  neutral        71     526      181
  positive       19      44       75</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#roc_nb &lt;- bind_cols(df_test, pred_mod_nb_prob) |&gt; roc_curve()</span></span></code></pre></div>
</div>



 ]]></description>
  <category>ML</category>
  <category>Naive-Bayes</category>
  <category>sentiment analysis</category>
  <guid>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/naives-bayes-intro/index.html</guid>
  <pubDate>Mon, 15 May 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>02 - Normality of asset returns</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part1/normality-returns/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As mentioned in one of our <a href="../../../posts/quant-part1/random-behavior-assets/index.html">previous posts</a>, we know that in quantitative finance, assets returns are assumed to be random. That being said they are not totally normally distributed. This post is to digg in a bit further in assessing the normality (or non-normality) of equity returns.</p>
<p>As reminder, a dataset can be said to be normally distributed if its probability density function can be modelled by <img src="https://latex.codecogs.com/png.latex?P(X%20=%20x)%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7B2%20%5Cpi%7D%7D%20%5Ccdot%20e%5E%7B-%5Cfrac%7B(x-%5Cmu)%5E2%7D%7B2%20%5Csigma%5E2%7D%7D"></p>
<p>When testing for normality, there are many ways to get there.</p>
<ul>
<li>Visual ways: histogram, density plot and QQ-plots<br>
</li>
<li>Using Skewness or Kurtosis</li>
<li>Statistical tests such as the Shapiro-Wilk test (small to medium sample size, <img src="https://latex.codecogs.com/png.latex?n%20%5Cleq%20300">) or the Kolmogorov-Smirnov test</li>
</ul>
<p>Let’s start by considering an ETF (low-ish volatility) like the SPY500.<br>
To better illustrate our point, we’ll also consider a fictitious stock with random and almost perfectly normally distributed returns.</p>
<p>From previous post, returns can be explained with a drift rate + some randomness: <img src="https://latex.codecogs.com/png.latex?R_i%20=%20%5Cmu%20%5Cdelta%20t%20+%20%5Cphi%20%5Csigma%20%5Cdelta%20t%5E%7B1/2%7D"></p>
</section>
<section id="comparing-spy-returns-with-a-similar-imaginary-stock" class="level1">
<h1>Comparing SPY returns with a similar imaginary stock</h1>
<p>Let’s make some assumptions on how to get the drift rate and volatility of SPY. Using all the trading sessions since 01 Jan 2020, we’ll use the mean historical returns and standard deviation of returns as drift and volatility.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">df_spy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/SPY.csv'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(date, adjClose) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">return =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(adjClose <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lag</span>(adjClose))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020-01-01'</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7">drift <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(df_spy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>return) </span>
<span id="cb1-8">sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(df_spy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>return) </span></code></pre></div>
</div>
<p>So over the last 3-ish years, SPY had an annualized drift rate of 9.04% with an volatility of 24.4%</p>
<p>Let’s consider now an imaginary stock with a similar drift rate and standard deviation as SPY.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21042023</span>)</span>
<span id="cb2-2">phi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df_spy), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create randomness from a normal distribution</span></span>
<span id="cb2-3">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(phi),            </span>
<span id="cb2-4">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">phi =</span> phi, </span>
<span id="cb2-5">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">return =</span> drift <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phi)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the return as drift + randomness </span></span>
<span id="cb2-6"></span>
<span id="cb2-7">prices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb2-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df))) {</span>
<span id="cb2-9">  prices[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> prices[i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>return[i])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create a vector of prices based on the returns</span></span>
<span id="cb2-10">}</span>
<span id="cb2-11"></span>
<span id="cb2-12">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_column</span>(df, prices)</span></code></pre></div>
</div>
<p>Let’s have a quick check that indeed mean and standard deviation of returns are similar.</p>
<table class="table">
<caption>Summary of first 2 moments for both assets</caption>
<thead>
<tr class="header">
<th></th>
<th>Drift</th>
<th>Volatility</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SPY</td>
<td>3.6^{-4}</td>
<td>0.0152</td>
</tr>
<tr class="even">
<td>Fictitious Asset</td>
<td>7.3^{-4}</td>
<td>0.0154</td>
</tr>
</tbody>
</table>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> prices)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Imaginary Stock'</span>, </span>
<span id="cb3-4">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Same drift as volatility as SPY'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/normality-returns/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_spy, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> adjClose)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SPY'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/normality-returns/index_files/figure-html/unnamed-chunk-4-2.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="visual-checks-on-imaginary-stock-vs-spy" class="level1">
<h1>Visual checks on imaginary stock vs SPY</h1>
<p>Usual visual checks for normality are the histogram and the QQ-plot.</p>
<section id="histograms" class="level2">
<h2 class="anchored" data-anchor-id="histograms">Histograms</h2>
<p>Let’s see how well the returns stack to our imaginary stock (with close to perfect pseudo-randomness)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(return)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(density)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> drift, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> sigma), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.055</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.055</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/normality-returns/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The black line is the actual density of returns, while the red line is the density of the normal distribution with same drift and volatility as earlier. Lines are pretty close to each other.</p>
<p>And now onto the histogram on SPY (again same drift and volatility) as fictitious stock above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_spy, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(return)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(density)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> drift<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> drift<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sigma),  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> drift, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> sigma), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.055</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.055</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/normality-returns/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>And here, we clearly see the big disconnect from normality: above expected number of returns at the mean (aka too peaked), less returns next to the mean (between 1 and 2 or 2 1/2 sd) and then higher number of observations than expected in the tails (aka fat tails). Distribution of returns for equity are interesting in that sense: both too peaked and fat tails.</p>
</section>
<section id="qq-plots" class="level2">
<h2 class="anchored" data-anchor-id="qq-plots">QQ Plots</h2>
<p>Another way to visually check for normality is to use a quantile-quantile plot (aka QQ-plot). On the y-axis, we have the returns, on the x-axis the theoretical quantiles.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample =</span> return)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_qq</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_qq_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'QQ-Plot for fictious stock returns'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/normality-returns/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>And now the QQ-plot for the returs of SPY.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_spy, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample =</span> return)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_qq</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_qq_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'QQ-Plot for SPY returns'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/normality-returns/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Oh boy! Again, our second plot clearly indicate how the returns deviate from normality.</p>
<p>This QQ-plot can also be used to check for asymetry in the distribution of returns. We can see a slightly left skew distribution (a negatively skew distribution).</p>
</section>
</section>
<section id="skewness-and-kurtosis" class="level1">
<h1>Skewness and Kurtosis</h1>
<p>Skewness and Kurtosis are the third and fourth <a href="../../../posts/time-series/02-statistical-moments/index.html">statistical moments</a> of a distribution.</p>
<section id="skewness" class="level2">
<h2 class="anchored" data-anchor-id="skewness">Skewness</h2>
<p>Ideally, skewness as a measure of symmetry should be close to 0 (perfectly symmetric).</p>
<p>Let’s test the symmetry of our 2 sets of returns. Unfortunately, we did not find any function to calculate skewness in base R (seems strange!).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">moments<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">skewness</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>return)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.0398789</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">moments<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">skewness</span>(df_spy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>return)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -0.7418496</code></pre>
</div>
</div>
<p>As expected, our fictitious stock has almost 0 skew (symmetric around the mean), while the SPY has a moderate negative skew (which we could see already on the QQ-plot and histogram.)</p>
</section>
<section id="kurtosis" class="level2">
<h2 class="anchored" data-anchor-id="kurtosis">Kurtosis</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">moments<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kurtosis</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>return)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2.879684</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">moments<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kurtosis</span>(df_spy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>return)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 12.75883</code></pre>
</div>
</div>
<p>Again, our fictitious asset has kurtosis pretty close to perfect normality (almost 3). SPY deviate very much from normality and displays leptokurotic kurtosis.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In <a href="../../../posts/time-series/02-statistical-moments/index.html">this post</a> on the statistical moments, we have showed a couple of transformation methods (log transform and Box-Cox transform) to normalize data.</p>
</div>
</div>
</section>
</section>
<section id="statistical-tests" class="level1">
<h1>Statistical tests</h1>
<section id="shapiro-wilk-test" class="level2">
<h2 class="anchored" data-anchor-id="shapiro-wilk-test">Shapiro-Wilk test</h2>
<p>Shapiro-Wilk test should actually not be used on large data set. Although, we use it here for demonstration purposes, results should be interpreted with a big spoon of salt.</p>
<p>Let’s specify our hypothesis:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?H_0">: the data follows a normal distribution</li>
<li><img src="https://latex.codecogs.com/png.latex?H_1">: the data does not follow a normal distribution</li>
</ul>
<p>Let’s first test on our fictitious equity.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shapiro.test</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>return)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Shapiro-Wilk normality test

data:  df$return
W = 0.99895, p-value = 0.9215</code></pre>
</div>
</div>
<p>Expected, as the randomness of our fictitious stock was randomly distributed.</p>
<p>And then on the return of SPY</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shapiro.test</span>(df_spy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>return)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Shapiro-Wilk normality test

data:  df_spy$return
W = 0.894, p-value &lt; 2.2e-16</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Normal Distribution</category>
  <category>qq-plot</category>
  <category>Kurtosis</category>
  <category>Skewness</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part1/normality-returns/index.html</guid>
  <pubDate>Tue, 18 Apr 2023 17:00:00 GMT</pubDate>
  <media:content url="https://fderyckel.github.io/blog.html/posts/quant-part1/normality-returns/qqplot-spy.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>01 - Random Behavior of Financial Assets</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part1/random-behavior-assets/index.html</link>
  <description><![CDATA[ 




<p>One of the main pillar of quantitative finance is the assumption that assets’ returns behave in a random manner. Assets returns are normally distributed. It is a poor assumption as asset’s return are usually not normally distributed (fat tails, skewness, etc.), but it is one that is considered when approaching finance with a quantitative finance. Check <a href="../../../posts/quant-part1/normality-returns/index.html">this post</a> on the normality of assets returns for a deeper dive into how random (or not) are assets returns.</p>
<section id="discrete-approach" class="level1">
<h1>Discrete approach</h1>
<p><span id="eq-ret1"><img src="https://latex.codecogs.com/png.latex?R_i%20=%20%5Cfrac%7BS_%7Bi+1%7D-S_i%7D%7BS_i%7D%20%5Ctag%7B1%7D"></span> <img src="https://latex.codecogs.com/png.latex?%5Cbar%7BR%7D%20=%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20R_i%7D%7Bn%7D"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?R_i"> = return of an asset at time i</li>
<li><img src="https://latex.codecogs.com/png.latex?S_i"> = price of an asset at time i</li>
</ul>
<p>If returns are normally distributed, we could re-write Equation&nbsp;1 as <span id="eq-ret2"><img src="https://latex.codecogs.com/png.latex?R_i%20=%20%5Cfrac%7BS_%7Bi+1%7D%20-%20S_i%7D%7BS_i%7D%20=%20%5Cbar%7BR%7D%20+%20std%20%5Ccdot%20%5Cphi%20%5Ctag%7B2%7D"></span></p>
<ul>
<li>Std of returns (std): <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B%5Cfrac%7B1%7D%7Bn-1%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D(R_i%20-%20%5Cbar%7BR%7D)%5E2%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cphi"> is just a number taken from the normal distribution with mean = 0 and std = 1</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cphi%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%20%5Cpi%7D%7D%20%5Ccdot%20e%5E%7B-%20%5Cfrac%7Bx%5E2%7D%7B2%7D%7D"></li>
</ul>
</section>
<section id="continuous-approach" class="level1">
<h1>Continuous approach</h1>
<p>Returns should scale with time.</p>
<p>Mean returns = <img src="https://latex.codecogs.com/png.latex?%5Cmu%20%5Ccdot%20%5Cdelta%20t"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmu"> = Annualized means returns on a continuous basis (usually not known, or hard to know)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t"> = a small time increment</li>
</ul>
<section id="ignoring-randomness" class="level2">
<h2 class="anchored" data-anchor-id="ignoring-randomness">Ignoring randomness</h2>
<p><img src="https://latex.codecogs.com/png.latex?R_i%20=%20%5Cfrac%7BS_%7Bi+1%7D%20-%20S_i%7D%7BS_i%7D%20=%20mean%20%20=%20%5Cmu%20%5Cdelta%20t"> <img src="https://latex.codecogs.com/png.latex?S_%7Bi+1%7D%20-%20S_i=%20S_i%20%5Cmu%20%5Cdelta%20t"> <span id="eq-asset-price1"><img src="https://latex.codecogs.com/png.latex?S_%7Bi+1%7D%20=%20S_i%20%5Ccdot%20(1%20+%20%20%5Cmu%20%5Cdelta%20t)%20%5Ctag%7B3%7D"></span></p>
<p>We could also rewrite Equation&nbsp;3 so it depends of the initial (starting) price, instead of the previous price.</p>
<p><img src="https://latex.codecogs.com/png.latex?S_n%20=%20S_0%20(1+%5Cmu%20%5Cdelta%20t)%5En"></p>
<p>Using natural log:</p>
<p><img src="https://latex.codecogs.com/png.latex?S_n%20=%20S_0%20e%5E%7Blog%20(1+%5Cmu%20%5Cdelta%20t)%5En%7D%20=%20S_0%20e%5E%7Bn%20%5Ccdot%20log%7B(1+%5Cmu%20%5Cdelta%20t)%7D%7D"></p>
<p>We could argue that <img src="https://latex.codecogs.com/png.latex?log(1+%5Cmu%20%5Cdelta%20t)%20%5Capprox%20%5Cmu%20%5Cdelta%20t"> as <img src="https://latex.codecogs.com/png.latex?log(1+x)%20%5Capprox%20x"> for small values of x.</p>
<p><span id="eq-asset-price2"><img src="https://latex.codecogs.com/png.latex?S_n%20%5Capprox%20S_0%20%5Ccdot%20e%5E%7Bn%20%5Cmu%20%5Cdelta%20t%7D%20%5Ctag%7B4%7D"></span></p>
<p>Now, <img src="https://latex.codecogs.com/png.latex?n%20%5Ccdot%20%5Cdelta%20t"> is the same as <img src="https://latex.codecogs.com/png.latex?t">. Hence,</p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p><img src="https://latex.codecogs.com/png.latex?S(t)%20%5Capprox%20S_0%20%5Ccdot%20e%5E%7B%5Cmu%20t%7D"></p>
</div>
</div>
</div>
</section>
<section id="considering-randomness" class="level2">
<h2 class="anchored" data-anchor-id="considering-randomness">Considering randomness</h2>
<p>Let’s restart with Equation&nbsp;2</p>
<p><img src="https://latex.codecogs.com/png.latex?R_i%20=%20%5Cfrac%7BS_%7Bi+1%7D%20-%20S_i%7D%7BS_i%7D%20=%20%5Cbar%7BR%7D%20+%20std%20%5Ccdot%20%5Cphi%20=%20%5Cmu%20%5Cdelta%20t%20+%20%5Csigma%20%5Cphi%20%5Cdelta%20t%5E%7B1/2%7D"> <span id="eq-asset-price2"><img src="https://latex.codecogs.com/png.latex?S_%7Bi+1%7D%20-%20S_i=%20S_i%20%5Cmu%20%5Cdelta%20t%20+%20S_i%20%5Csigma%20%5Cphi%20%5Cdelta%20t%5E%7B1/2%7D%20%5Ctag%7B5%7D"></span></p>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p><span id="eq-asset-price3"><img src="https://latex.codecogs.com/png.latex?S_%7Bi+1%7D%20=%20S_i%20%5Ccdot%20(1%20+%20%20%5Cmu%20%5Cdelta%20t%20+%20%20%5Csigma%20%5Cphi%20%5Csqrt%7B%5Cdelta%20t%7D)%20%5Ctag%7B6%7D"></span></p>
<p>This last Equation&nbsp;6 is the basis for Monte-Carlo simulation.</p>
<ul>
<li>Notice the standard deviation of return: <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5Csqrt%7B%5Cdelta%20t%7D"></li>
<li>unit of <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%20%5Cfrac%7B1%7D%7Bt%7D"></li>
<li>unit of <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7Bt%7D%7D"></li>
<li>this is because we can only add variance together (no sd). For independent variable X and Y: <img src="https://latex.codecogs.com/png.latex?Var(X+Y)%20=%20Var(X)%20+%20Var(Y)"></li>
<li>the standard deviation of returns scale up with the square root of the time step.</li>
</ul>
</div>
</div>
</div>
</section>
<section id="going-to-continuous-time" class="level2">
<h2 class="anchored" data-anchor-id="going-to-continuous-time">Going to continuous time</h2>
<p>Restarting from Equation&nbsp;5 : <img src="https://latex.codecogs.com/png.latex?S_%7Bi+1%7D%20-%20S_i=%20S_i%20%5Cmu%20%5Cdelta%20t%20+%20S_i%20%5Csigma%20%5Csqrt%7B%5Cdelta%20t%7D%20%5Cphi"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?S_%7Bi+1%7D%20-%20S_i%20=%20dS"></li>
<li><img src="https://latex.codecogs.com/png.latex?S_i%20=%20S(t)"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t%20=%20dt"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cphi%20%5Csqrt%7B%5Cdelta%20t%7D%20=%20dX"> where <img src="https://latex.codecogs.com/png.latex?dX"> is a random variable with mean = 0 and variance = dt. Hence <img src="https://latex.codecogs.com/png.latex?E%5BdX%5D%20=%200"> and <img src="https://latex.codecogs.com/png.latex?E%5B(dX)%5E2%5D%20=%20dt"></li>
</ul>
<div class="callout callout-style-simple callout-tip no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p><img src="https://latex.codecogs.com/png.latex?dS%20=%20S%20%5Cmu%20dt%20+%20S%20%5Csigma%20dX"> This stochastic differential equation on the change of prices assume:</p>
<ul>
<li>returns are treated as random</li>
<li>returns are assumed to be normally distributed (again not totally exact)</li>
<li>prices (S) are modelled as a log-normal walk (SDE)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmu"> is the drift rate or growth rate</li>
<li>because of the different scaling of time (<img src="https://latex.codecogs.com/png.latex?t"> and <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bt%7D">), on a short time frame, drift is negligible and volatility matters.</li>
</ul>
</div>
</div>
</div>
</section>
</section>
<section id="practice-in-r" class="level1">
<h1>Practice in R</h1>
<p>Let’s use the above notes with the ticker SBUX as a financial asset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read_csv()</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select(), filter(), mutate()</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drop_na()</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/SBUX.csv'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(date, adjClose) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019-07-01'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop_na</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ret =</span> (adjClose <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lag</span>(adjClose)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lag</span>(adjClose))</span>
<span id="cb1-9"></span>
<span id="cb1-10">r_bar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ret, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T)</span>
<span id="cb1-11">stdev <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ret, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T)</span>
<span id="cb1-12"></span>
<span id="cb1-13">delta_t <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">mu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> r_bar <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> delta_t</span>
<span id="cb1-16">sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> stdev <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(delta_t)</span>
<span id="cb1-17"></span>
<span id="cb1-18">r_bar</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1.073652e-06</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">stdev</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.02092624</code></pre>
</div>
</div>
<p>Knowing the average daily return of SBUX over the last 3-ish year and using <img src="https://latex.codecogs.com/png.latex?%5Cbar%7BR%7D%20=%20%5Cmu%20%5Cdelta%20t"> , or <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%20%5Cfrac%7B%5Cbar%7BR%7D%7D%7B%5Cdelta%20t%7D"> and in our case <img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t%20=%20%5Cfrac%7B1%7D%7B252%7D">; we find the average annualized returns <img src="https://latex.codecogs.com/png.latex?%5Cmu"> is: -0.027 % with standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csigma"> of 33.2 % annualized.</p>
<p>We could plot the returns and the std of returns</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop_na</span>(), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> ret)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> stdev, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dotted'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>stdev, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dotted'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>stdev, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dotted'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>stdev, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dotted'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Daily returns'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Daily returns'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/random-behavior-assets/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We could standardized the returns (aka ensure they have a mean = 0 and std = 1) and compare it to the standard normal distribution.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">std_ret =</span> (ret <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> r_bar) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> stdev) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop_na</span>()</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df1, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(std_ret)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> ..density..), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/random-behavior-assets/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This graph exemplifies what is very common with asset returns: fat tail, and under representation of returns just outside the mean. We discuss this further in our post: <a href="../../../posts/quant-part1/normality-returns/index.html">The normality of asset returns</a></p>
<section id="the-euler-maruyana-method-to-compute-the-sde" class="level2">
<h2 class="anchored" data-anchor-id="the-euler-maruyana-method-to-compute-the-sde">The Euler-Maruyana Method to compute the SDE</h2>
<p>We start with Equation&nbsp;6 : <img src="https://latex.codecogs.com/png.latex?S_%7Bi+1%7D%20=%20S_i%20%5Ccdot%20(1%20+%20%5Cmu%20%5Cdelta%20t%20+%20%5Csigma%20%5Cphi%20%5Csqrt%7B%5Cdelta%20t%7D)"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create one simulation for price </span></span>
<span id="cb7-2">ndays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span> </span>
<span id="cb7-3">price <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb7-4">price[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">last</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>adjClose)</span>
<span id="cb7-5"></span>
<span id="cb7-6">phi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(ndays, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ndays){ </span>
<span id="cb7-9">  price[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> price[i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mu <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> delta_t <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phi[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(delta_t))</span>
<span id="cb7-10">}</span>
<span id="cb7-11"></span>
<span id="cb7-12">yo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ndays, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> price)</span>
<span id="cb7-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(yo, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/random-behavior-assets/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We can now create 100’s such simulations re-using previous code in a function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">create_price_simul <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb8-2">  price <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>() </span>
<span id="cb8-3">  price[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">last</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>adjClose) </span>
<span id="cb8-4">  phi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(ndays, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb8-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ndays){ </span>
<span id="cb8-6">    price[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> price[i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mu <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> delta_t <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phi[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(delta_t)) </span>
<span id="cb8-7">    } </span>
<span id="cb8-8">  yo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ndays, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> price)</span>
<span id="cb8-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(yo)</span>
<span id="cb8-10">}</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># map()</span></span>
<span id="cb8-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RColorBrewer)</span>
<span id="cb8-14"></span>
<span id="cb8-15">num_of_simul <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb8-16">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simul_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>num_of_simul) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(simul_num, create_price_simul))</span>
<span id="cb8-18"></span>
<span id="cb8-19">yo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(prices))</span>
<span id="cb8-20"></span>
<span id="cb8-21">getPalette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brewer.pal</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Set1"</span>))</span>
<span id="cb8-22">colourCount <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> num_of_simul</span>
<span id="cb8-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(yo, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> simul_num)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brewer.pal</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accent"</span>))(colourCount)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> simul_num)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in brewer.pal(9, "Accent"): n too large, allowed maximum for palette Accent is 8
Returning the palette you asked for with that many colors</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/random-behavior-assets/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>R-code</category>
  <category>quant-finance</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part1/random-behavior-assets/index.html</guid>
  <pubDate>Mon, 17 Apr 2023 17:00:00 GMT</pubDate>
  <media:content url="https://fderyckel.github.io/blog.html/posts/quant-part1/random-behavior-assets/histogram-of-returns.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>Linear Regression</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/linear-regression/index.html</link>
  <description><![CDATA[ 




<p>Linear regression is probably the most basic example of a machine learning algorithms.</p>
<section id="simple-linear-regression" class="level1">
<h1>Simple linear regression</h1>
<section id="finding-the-coefficients-from-scratch" class="level2">
<h2 class="anchored" data-anchor-id="finding-the-coefficients-from-scratch">Finding the coefficients from scratch</h2>
<p>In the case of simple linear regression, we just have one independent variable and one dependent variable. Let’s say we have <img src="https://latex.codecogs.com/png.latex?n"> observations <img src="https://latex.codecogs.com/png.latex?(x_i,%20y_i)"> and we want to find a linear equations that predict y <img src="https://latex.codecogs.com/png.latex?%5Chat%7By_i%7D"> based on a given <img src="https://latex.codecogs.com/png.latex?x_i">.</p>
<p><img src="https://latex.codecogs.com/png.latex?y_i%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20x_i%20+%20%5Cepsilon_i"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?x_i"> is the independent variable (aka: predictor, explanatory variable)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta_0"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta_1"> are parameters of our model that have to be found.
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta_0"> is the intercept (value of y when x=0)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta_1"> is the slope of our linear model</li>
</ul></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cepsilon_i"> is the residual or error term of the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> observations
<ul>
<li>From a probabilistic perspective, <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> can be seen as a random variable with the following properties: <img src="https://latex.codecogs.com/png.latex?E(%5Cepsilon)=0"> and <img src="https://latex.codecogs.com/png.latex?Var(%5Cepsilon)=%20%5Csigma_%7B%5Cepsilon%7D%5E2%20=%20%5Csigma%5E2"></li>
</ul></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Chat%7By_i%7D"> is the estimated or predicted value of y. In that sense <img src="https://latex.codecogs.com/png.latex?%5Chat%7By_i%7D%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20x_i">. The error term is then the difference between the actual y and the predicted y: <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_i%20=%20y_i%20-%20%5Chat%7By_i%7D"></li>
</ul>
<p>The cost function (or loss function) is to minimize the sum of squared error. In that sense, we seek to minimize <span id="eq-loss-function"><img src="https://latex.codecogs.com/png.latex?%20%5Ctext%7Bmin%20%7D%20SSE%20=%20min%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Cepsilon_i%5E2%20=%0A%20%20%20%20%20%20%20%20%5Cunderset%7B%5Cbeta_0,%20%5Cbeta1%7D%7Bargmin%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20(y_i-%5Cbeta_0%20-%20%5Cbeta_1%20x_i)%5E2%20%5Ctag%7B1%7D"></span></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/linear-regression/errors_visual.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Trying to minimize the sum of the squared of the vertical bars</figcaption>
</figure>
</div>
<p>To minimize the SSE, we will need to use partial derivatives for both coefficients and solve it for 0.</p>
<p>Let’s first focus on <img src="https://latex.codecogs.com/png.latex?%5Cbeta_0"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20SSE%7D%7B%5Cpartial%20%5Cbeta_0%7D%20=%20-2%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20(y_i-%5Cbeta_0%20-%20%5Cbeta_1%20x_i)%20=%200"> Breaking down our sum: <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_i%20-%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Cbeta_0%20-%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Cbeta_1%20x_i%20=%200"> <img src="https://latex.codecogs.com/png.latex?%5Cbeta0"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta_1"> are coefficient, hence: <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_i%20-%20n%20%5Cbeta_0%20-%20%5Cbeta_1%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_i%20=%200"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta_0%20=%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_i%20-%20%5Cbeta_1%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_i%7D%7Bn%7D"> <img src="https://latex.codecogs.com/png.latex?%5Cbar%7By%7D%20=%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_i%7D%7Bn%7D"> (mean of y values) and <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Bx%7D=%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_i%7D%7Bn%7D"> (mean of x values).</p>
<p>and our previous equation can then be simplified as <span id="eq-beta0"><img src="https://latex.codecogs.com/png.latex?%5Cbeta_0%20=%20%5Cbar%7By%7D%20-%20%5Cbeta_1%20%5Cbar%7Bx%7D%20%5Ctag%7B2%7D"></span></p>
<p>Let’s now address the second partial derivative wrt <img src="https://latex.codecogs.com/png.latex?%5Cbeta_1">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20SSE%7D%7B%5Cpartial%20%5Cbeta_1%7D%20=%20-2%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_i%20(y_i-%5Cbeta_0%20-%20%5Cbeta_1%20x_i)%20=%200">.</p>
<p>Distributing the <img src="https://latex.codecogs.com/png.latex?x_i"> and substituting in the value of <img src="https://latex.codecogs.com/png.latex?%5Cbeta_0"> from Equation&nbsp;2<br>
<img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5E%7Bn%7D%20(x_i%20y_i%20-%20x_i%20(%5Cbar%7By%7D%20-%20%5Cbeta_1%20%5Cbar%7Bx%7D)%20-%20%5Cbeta_1%20x_i%5E2)%20=%200">.</p>
<p>Factoring <img src="https://latex.codecogs.com/png.latex?%5Cbeta_1"> and breaking down the sum and being careful to the sign, we get: <span id="eq-beta1a"><img src="https://latex.codecogs.com/png.latex?%5Cbeta_1%20=%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_i%20(y_i%20-%20%5Cbar%7By%7D)%7D%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_i%20(x_i%20-%20%5Cbar%7Bx%7D)%7D%20%5Ctag%7B3%7D"></span></p>
<p>Knowing <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Bx%7D%20=%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_i%7D%7Bn%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cbar%7By%7D%20=%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_i%7D%7Bn%7D">, we can get one step further (have a common denominator with over n). I have also removed the index on the sum for readability.<br>
<span id="eq-beta1"><img src="https://latex.codecogs.com/png.latex?%5Cbeta_1%20=%20%5Cfrac%7Bn%20%5CSigma%20x_i%20y_i%20-%20%5CSigma%20x_i%20%5CSigma%20y_i%7D%7Bn%20%5CSigma%20x_i%5E2%20-%20(%5CSigma%20x_i)%5E2%7D%20%5Ctag%7B4%7D"></span></p>
<p>We can now use the values of <img src="https://latex.codecogs.com/png.latex?%5Cbeta_0"> Equation&nbsp;2 and <img src="https://latex.codecogs.com/png.latex?%5Cbeta_1"> Equation&nbsp;4 into our estimate of y: <img src="https://latex.codecogs.com/png.latex?%5Chat%7By_i%7D%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20x_i"></p>
</section>
<section id="linking-the-slope-and-covariance" class="level2">
<h2 class="anchored" data-anchor-id="linking-the-slope-and-covariance">Linking the slope and covariance</h2>
<p>While going over some textbooks or online resources, we find another formula for the slope of our regression line. That formula involve the covariance and or the Pearson coefficient of correlation.</p>
<p><span id="eq-beta1-cov"><img src="https://latex.codecogs.com/png.latex?%5Cbeta_1%20=%20%5Cfrac%7BCov(x,%20y)%7D%7B%5Csigma%5E2%20x%7D%20%5Ctag%7B5%7D"></span></p>
<p>Now let’s connect both Equation&nbsp;3 and Equation&nbsp;5</p>
<p>I’ll rewrite Equation&nbsp;3 in a slightly simpler form just to lighten the notation <img src="https://latex.codecogs.com/png.latex?%5Cbeta_1%20=%20%5Cfrac%7B%5Csum%20x_i%20(y_i%20-%20%5Cbar%7By%7D)%7D%7B%5Csum%20x_i%20(x_i%20-%20%5Cbar%7Bx%7D)%7D"></p>
<p>Now, it can be noted that that <img src="https://latex.codecogs.com/png.latex?%5Csum%20(x_i%20-%20%5Cbar%7Bx%7D)%20=%200"> or similarly <img src="https://latex.codecogs.com/png.latex?%5Csum%20(y_i%20-%20%5Cbar%7By%7D)%20=%200">. Hence <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Bx%7D%20%5Csum%20(y_i%20-%20%5Cbar%7By%7D)%20=%200"></p>
<p>Considering <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Bx%7D"> or <img src="https://latex.codecogs.com/png.latex?%5Cbar%7By%7D"> are constant, we could also write <img src="https://latex.codecogs.com/png.latex?%5Csum%20%5Cbar%7Bx%7D%20(y_i%20-%20%5Cbar%7By%7D)%20=%200"> and similarly <img src="https://latex.codecogs.com/png.latex?%5Csum%20%5Cbar%7Bx%7D%20(x_i%20-%20%5Cbar%7Bx%7D)%20=%200">.</p>
<p>With that in mind, we can now, go back on our Equation&nbsp;3 <img src="https://latex.codecogs.com/png.latex?%5Cbeta_1%20=%20%5Cfrac%7B%5Csum%20x_i%20(y_i%20-%20%5Cbar%7By%7D)%7D%7B%5Csum%20x_i%20(x_i%20-%20%5Cbar%7Bx%7D)%7D%20=%0A%5Cfrac%7B%5Csum%20x_i%20(y_i%20-%20%5Cbar%7By%7D)%20-%20%5Csum%20%5Cbar%7Bx%7D%20(y_i%20-%20%5Cbar%7By%7D)%7D%7B%5Csum%20x_i%20(x_i%20-%20%5Cbar%7Bx%7D)%20-%20%5Csum%20%5Cbar%7Bx%7D%20(x_i%20-%20%5Cbar%7Bx%7D)%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbeta1%20=%20%5Cfrac%7B%5Csum%20(x_i%20-%20%5Cbar%7Bx%7D)%20(y_i%20-%20%5Cbar%7By%7D)%7D%7B%5Csum%20(x_i%20-%20%5Cbar%7Bx%7D)%5E2%7D"></p>
<p>Defining <img src="https://latex.codecogs.com/png.latex?Cov(x,%20y)%20=%20%5Cfrac%7B%5Csum%20(x_i%20-%20%5Cbar%7Bx%7D)%20(y_i%20-%20%5Cbar%7By%7D)%7D%7Bn%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma_x%20=%20%5Csqrt%7B%5Cfrac%7B%5Csum%20(x_i%20-%20%5Cbar%7Bx%7D)%5E2%7D%7Bn%7D%7D"></p>
<p>We can finally rewrite</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbeta_1%20=%20%5Cfrac%7BCov(x,%20y)%7D%7B%5Csigma_x%5E2%7D"></p>
<p>Finally, if we want to involve the Pearson coefficient of correlation <img src="https://latex.codecogs.com/png.latex?%5Crho%20=%20%5Cfrac%7BCov(x,%20y)%7D%7B%5Csigma_x%20%5Csigma_y%7D">, we could also re-write our slope as <img src="https://latex.codecogs.com/png.latex?%5Cbeta_1%20=%20%5Crho%20%5Cfrac%7B%5Csigma_y%7D%7B%5Csigma_x%7D"></p>
</section>
<section id="considerations-when-doing-linear-regression" class="level2">
<h2 class="anchored" data-anchor-id="considerations-when-doing-linear-regression">Considerations when doing linear regression</h2>
<ul>
<li>Start with a <strong>scatter plot</strong> to check if data have a linear trend. No points of doing a linear regression on a set of data, if data are not showing a linear trend.<br>
</li>
<li>How well the data fits the regression line (correlation) have NO incidence on causality. Correlation is no indication of causation</li>
<li>Variables have to be normally distributed. This can be checked using histogram or QQ-plot or some other stat tests - Shapiro-Wilk test, Kolmogorov–Smirnov test. Skewness and kurtosis can also be used for that. In case of violation of this assumption, a Box-Cox transformation could be used.</li>
<li>Homoscedasticity in the residuals. Variance in the spread of residuals should be constant. <img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/linear-regression/residuals_visual.png" class="img-fluid" alt="Visuals on how error terms can behave"></li>
<li>Error terms are normally distributed (visual: histogram, QQ-plot)</li>
<li>In the case of multi-variables linear regression, ensure no correlation between independent variables</li>
</ul>
</section>
</section>
<section id="sources" class="level1">
<h1>Sources</h1>
<ul>
<li><a href="https://www.analyticsvidhya.com/blog/2021/05/all-you-need-to-know-about-your-first-machine-learning-model-linear-regression/">All you need to know about your first Machine Learning model – Linear Regression</a></li>
<li><a href="https://towardsai.net/p/machine-learning/linear-regression-complete-derivation-with-mathematics-explained">Linear Regression Complete Derivation With Mathematics Explained!</a></li>
<li><a href="https://youtu.be/ewnc1cXJmGA">Involving cavariance in the slope</a></li>
</ul>


</section>

 ]]></description>
  <category>R-code</category>
  <category>linear-regression</category>
  <guid>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/linear-regression/index.html</guid>
  <pubDate>Thu, 13 Apr 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>05 - Trinomials models for Quantitative Finance</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part1/trinomial-model/index.html</link>
  <description><![CDATA[ 




<section id="transition-density-function" class="level1">
<h1>Transition Density Function</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tibble()</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mutate()</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ggplot()</span></span></code></pre></div>
</div>
<section id="setting-the-stage" class="level2">
<h2 class="anchored" data-anchor-id="setting-the-stage">Setting the stage</h2>
<p>A discrete random variable (DRV) <img src="https://latex.codecogs.com/png.latex?y"> can either go up with a probability of <img src="https://latex.codecogs.com/png.latex?%5Calpha"> or down with a probability of <img src="https://latex.codecogs.com/png.latex?%5Calpha"> or stay the same with a probability of <img src="https://latex.codecogs.com/png.latex?1%20-%202%5Calpha">.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart RL
  y' -- alpha --&gt; y'+delta_y
  y' -- 1 - 2*alpha --&gt; y
  y' -- alpha --&gt; y'-delta_y
</pre>
</div>
</div>
</div>
</div>
<p>We call that a trinomial walk.</p>
</section>
<section id="generating-an-instance-of-a-trinomial-walk" class="level2">
<h2 class="anchored" data-anchor-id="generating-an-instance-of-a-trinomial-walk">Generating an instance of a trinomial walk</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">alpha <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probability to go up or down </span></span>
<span id="cb2-2">                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hence, prob to stay the same is 0.4</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#let's do a 252 steps trinomial walk (aka a year of daily movement). </span></span>
<span id="cb2-5"></span>
<span id="cb2-6">num_steps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span></span>
<span id="cb2-7">prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(num_steps)</span>
<span id="cb2-8"></span>
<span id="cb2-9">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">step =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>num_steps, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> prob) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">direction =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(prob <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> alpha, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(prob <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)), </span>
<span id="cb2-11">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cum_walk =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(direction))</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> step, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> cum_walk)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Instance of a trinomial walk'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'with 252 steps and symetric move'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cumulative distance'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/trinomial-model/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is just one instance of a trinomial walk. In reality, we are interested in getting to know the probabilistic properties of the <img src="https://latex.codecogs.com/png.latex?y"> variable.</p>
</section>
</section>
<section id="deriving-the-forward-equation" class="level1">
<h1>Deriving the Forward equation</h1>
<p><span id="eq-tran-prob-fct"><img src="https://latex.codecogs.com/png.latex?Prob(a%3Cy'%3Cb%20%5Ctext%7B%20at%20time%20t'%20%7D%20%7C%20%5Ctext%7B%20y%20at%20time%20t%7D)%20=%20%5Cint_a%5Eb%20p(y,%20t;%20y',%20t')%20dy'%20%5Ctag%7B1%7D"></span></p>
<p>This (Equation&nbsp;1) means: <em>What is the probability that the random variable y’ lies between a and b at time t’ given it was at y at time t?</em> In this case (y, t) are given, they are constant, they are known; while (y’, t’) are the variables.</p>
<p>We re-write this (Equation&nbsp;1) for conciseness as <img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y',%20t')">.</p>
<p>Hence, another way to write (Equation&nbsp;1) is <span id="eq-tran-prob-fct2"><img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y',%20t')%20=%20%5Calpha%20%5Ccdot%20P(y,%20t;%20y'+%5Cdelta%20y,%20t'-%5Cdelta%20t)%20+%20(1-2%5Calpha)%20P(y,%20t;%20y',%20t'-%5Cdelta%20t)%20+%20%5Calpha%20%5Ccdot%20P(y,%20t;%20y'-%5Cdelta%20y,%20t'%20-%20%5Cdelta%20t)%20%5Ctag%7B2%7D"></span></p>
<p>Each terms in the sum of (Equation&nbsp;2) could be evaluated using a <em>Taylor Series Expansion</em>. Note that <img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t%5E2%20%3C%3C%20%5Cdelta%20t"> as <img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t"> is already quite small.</p>
<p><img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y'%20+%20%5Cdelta%20y,%20t'-%5Cdelta%20t)%20%20%5Capprox%20P(y,t;y',t')%20+%20%5Cdelta%20y%20%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20y'%7D%20-%20%5Cdelta%20t%20%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cdelta%20y%5E2%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D%20+%20%5Cdots"> <img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y',%20t'-%5Cdelta%20t)%20%20%5Capprox%20P(y,t;y',t')%20-%20%5Cdelta%20t%20%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20+%20%5Cdots"></p>
<p><img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y'-%20%5Cdelta%20y,%20t'-%5Cdelta%20t)%20%20%5Capprox%20P(y,t;y',t')%20-%20%5Cdelta%20y%20%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20y'%7D%20-%20%5Cdelta%20t%20%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cdelta%20y%5E2%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D%20+%20%5Cdots"></p>
<p>We have ignored all the terms less than <img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t">.</p>
<p>Adding the 3 equations above with their coefficients, we end up with</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t%20%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20%5Calpha%20%5Cdelta%20y%5E2%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20%5Calpha%20%5Cfrac%7B%5Cdelta%20y%5E2%7D%7B%5Cdelta%20t%7D%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D"></p>
<p>Note how <img src="https://latex.codecogs.com/png.latex?%5Calpha">, <img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t"> and <img src="https://latex.codecogs.com/png.latex?%5Cdelta%20y"> are all positive values. Hence, we can let <img src="https://latex.codecogs.com/png.latex?C%5E2%20=%20%5Calpha%20%5Cfrac%7B%5Cdelta%20y%5E2%7D%7B%5Cdelta%20t%7D">, and we get: <span id="eq-FKE"><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20C%5E2%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D%20%5Ctag%7B3%7D"></span></p>
<p>This last (Equation&nbsp;3) can be recognized as the <strong>Forward Kolmogorov Equation</strong> or Heat-diffusion equation or also Fokker-Plank equation.</p>
<p>Note that:</p>
<ul>
<li>We used <img src="https://latex.codecogs.com/png.latex?P"> instead of <img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y',%20t')"> just for brievety</li>
<li>This is a PDE for p with 2 independent variables <img src="https://latex.codecogs.com/png.latex?y'"> and <img src="https://latex.codecogs.com/png.latex?t'"></li>
<li><img src="https://latex.codecogs.com/png.latex?y"> and <img src="https://latex.codecogs.com/png.latex?t"> are like parameters. They are fixed, they are starting point</li>
<li>This should model a random-walk that is finite in a finite time.</li>
</ul>
</section>
<section id="solving-the-fke-by-similarity-reduction" class="level1">
<h1>Solving the FKE (by similarity reduction)</h1>
<p>To solve this PDE, we solve it by (as per the CQF) similarity reduction. We use a solution of the form <span id="eq-FKE-sol"><img src="https://latex.codecogs.com/png.latex?P%20=%20t'%5Ea%20f%20%5Cleft(%20%5Cfrac%7By'%7D%7Bt'%5Eb%7D%20%5Cright)%20%5Cspace%20a,%20b%20%5Cin%20%5Cmathbb%7BR%7D%20%5Ctag%7B4%7D"></span></p>
<p>Letting <img src="https://latex.codecogs.com/png.latex?%5Cxi%20=%20%5Cfrac%7By'%7D%7Bt'%5Eb%7D">, we are looking for a solution of the form <img src="https://latex.codecogs.com/png.latex?P%20=%20t'%5Ea%20f(%5Cxi)%20"></p>
<p>Finding the partial derivatives based on the above solution’s form.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20y'%7D%20=%20t'%5Ea%20%5Ccdot%20%5Cfrac%7Bdf%7D%7Bd%20%5Cxi%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cxi%7D%7B%5Cpartial%20y'%7D"> Note how f is just a function of <img src="https://latex.codecogs.com/png.latex?%5Cxi"> while <img src="https://latex.codecogs.com/png.latex?%5Cxi"> is a function of both <img src="https://latex.codecogs.com/png.latex?y'"> and <img src="https://latex.codecogs.com/png.latex?t'">; hence the difference in notation for the derivatives.</p>
<p>Since <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cxi%7D%7B%5Cpartial%20y'%7D%20=%20t'%5E%7B-b%7D">, we have <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20y'%7D%20=%20t'%5E%7Ba-b%7D%20%5Ccdot%20%5Cfrac%7Bdf%7D%7Bd%20%5Cxi%7D%20"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%5E2%7D%7B%5Cpartial%20y'%5E2%7D%20=%20t'%5E%7Ba-b%7D%20%5Cfrac%7Bd%5E2f%7D%7Bd%20%5Cxi%5E2%7D%20%5Cfrac%7B%5Cpartial%20%5Cxi%7D%7B%5Cpartial%20y'%7D%20=%20t'%5E%7Ba-2b%7D%20%5Cfrac%7Bd%5E2f%7D%7Bd%20%5Cxi%5E2%7D"></p>
<p>Also, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cxi%7D%7B%5Cpartial%20t'%7D%20=%20-b%20%5Ccdot%20y'%20%5Ccdot%20t'%5E%7B-b-1%7D">. Using product rule to find <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D">, we get: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20a%20t'%5E%7Ba-1%7D%20f(%5Cxi)%20+%20t'%5Ea%20%5Cfrac%7Bdf%7D%7Bd%20%5Cxi%7D%20%5Cfrac%7B%5Cpartial%20%5Cxi%7D%7B%5Cpartial%20t'%7D%20=%20a%20%5Ccdot%20t'%5E%7Ba-1%7D%20%5Ccdot%20f(%5Cxi)%20-%20b%20%5Ccdot%20t'%5E%7Ba-b-1%7D%20%5Ccdot%20y'%20%5Ccdot%20%5Cfrac%7Bdf%7D%7Bd%20%5Cxi%7D%20"> which we could also re-write as: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20a%20%5Ccdot%20t'%5E%7Ba-1%7D%20%5Ccdot%20f(%5Cxi)%20-%20b%20%5Ccdot%20t'%5E%7Ba-1%7D%20%5Ccdot%20%5Cxi%20%5Ccdot%20%5Cfrac%7Bdf%7D%7Bd%20%5Cxi%7D"> since <img src="https://latex.codecogs.com/png.latex?%5Cxi%20=%20%5Cfrac%7By'%7D%7Bt'%5Eb%7D"></p>
<p>Putting everything back together into Equation&nbsp;3, we get: <span id="eq-FKE-sol1"><img src="https://latex.codecogs.com/png.latex?a%20%5Ccdot%20t'%5E%7Ba-1%7D%20%5Ccdot%20f(%5Cxi)%20-%20b%20%5Ccdot%20t'%5E%7Ba-1%7D%20%5Ccdot%20%5Cxi%20%5Ccdot%20%5Cfrac%7Bdf%7D%7Bd%20%5Cxi%7D%20=%20C%5E2%20%5Ccdot%20t'%5E%7Ba-2b%7D%20%5Cfrac%7Bd%5E2f%7D%7Bd%20%5Cxi%5E2%7D%20%5Ctag%7B5%7D"></span></p>
<p>Considering the exponents of <img src="https://latex.codecogs.com/png.latex?t'">, we need to have <img src="https://latex.codecogs.com/png.latex?a-1%20=%20a-2b">. Hence <img src="https://latex.codecogs.com/png.latex?b%20=%20%5Cfrac%7B1%7D%7B2%7D">. We can already re-write <img src="https://latex.codecogs.com/png.latex?%5Cxi%20=%20%5Cfrac%7By'%7D%7B%5Csqrt%7Bt'%7D%7D"></p>
<p>To find the value of <img src="https://latex.codecogs.com/png.latex?a">, we will use the fact that <img src="https://latex.codecogs.com/png.latex?%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20P(y',%20t')%20dy'%20=%201"> <img src="https://latex.codecogs.com/png.latex?%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20t'%5Ea%20%5Ccdot%20f%20%5Cleft(%20%5Cfrac%7By'%7D%7B%5Csqrt%7Bt'%7D%7D%20%5Cright)%20dy'%20=%201"></p>
<p>Using the substitution <img src="https://latex.codecogs.com/png.latex?u%20=%20%5Cfrac%7By'%7D%7B%5Csqrt%7Bt'%7D%7D">, we have <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bdu%7D%7Bdy'%7D%20=%20t'%5E%5Cfrac%7B-1%7D%7B2%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?t'%5Ea%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20f(u)%20du%20%5Ccdot%20t'%5E%5Cfrac%7B1%7D%7B2%7D%20=%201"> <img src="https://latex.codecogs.com/png.latex?t'%5E%7Ba+%5Cfrac%7B1%7D%7B2%7D%7D%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20f(u)%20du%20=%201"></p>
<p>Considering <img src="https://latex.codecogs.com/png.latex?%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20f(u)%20du%20=%201">, we deduce that <img src="https://latex.codecogs.com/png.latex?a+%5Cfrac%7B1%7D%7B2%7D%20=%200"> and <img src="https://latex.codecogs.com/png.latex?a%20=%20%5Cfrac%7B-1%7D%7B2%7D"></p>
<p>Re-writing Equation&nbsp;5 using our new values for <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B-1%7D%7B2%7D%20f(%5Cxi)%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Cxi%20=%20C%5E2%20%5Cfrac%7Bd%5E2f%7D%7Bd%20%5Cxi%5E2%7D"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B-1%7D%7B2%7D%20%5Cfrac%7Bd(%5Cxi%20f(%5Cxi))%7D%7Bd(%5Cxi)%7D%20=%20C%5E2%20%5Cfrac%7Bd%5E2f%7D%7Bd%20%5Cxi%5E2%7D"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B-1%7D%7B2%7D%20%5Cxi%20f(%5Cxi))%20=%20C%5E2%20%5Cfrac%7Bdf%7D%7Bd%20%5Cxi%7D%20+%20const."></p>
<p>We make the constant = 0.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B-1%7D%7B2%7D%20%5Cxi%20=%20C%5E2%20%5Cfrac%7B1%7D%7Bf(%5Cxi)%7D%20%5Cfrac%7Bdf%7D%7Bd%20%5Cxi%7D"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B-1%7D%7B2%7D%20%5Cxi%20=%20C%5E2%20%5Cfrac%7Bd(log%20%5Cspace%20f(%5Cxi))%7D%7Bd(f(%5Cxi))%7D%20"></p>
<p>Integrating both side for <img src="https://latex.codecogs.com/png.latex?%5Cxi">, we get: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B-1%7D%7B2%7D%20%5Cint%20%5Cxi%20%5Cspace%20d%5Cxi=%20C%5E2%20log%20%5Cspace%20f(%5Cxi)"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B-1%7D%7B2%7D%20%5Cfrac%7B%5Cxi%5E2%7D%7B2%7D%20+%20c_1=%20C%5E2%20log%20%5Cspace%20f(%5Cxi)"></p>
<p><img src="https://latex.codecogs.com/png.latex?log%20%5Cspace%20f(%5Cxi)%20=%20%5Cfrac%7B-1%7D%7B4%20C%5E2%7D%20%5Cxi%5E2%20+%20c"></p>
<p><img src="https://latex.codecogs.com/png.latex?f(%5Cxi)%20=%20e%5E%7B%5Cfrac%7B-1%7D%7B4%20C%5E2%7D%20%5Cxi%5E2%20+%20c%7D%20=%20A%20%5Ccdot%20e%5E%7B%5Cfrac%7B-1%7D%7B4%20C%5E2%7D%20%5Cxi%5E2%7D"> Time, to revisit our initial solution Equation&nbsp;4:</p>
<p><img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y',%20t')%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7Bt%7D%7D%20A%20%5Ccdot%20e%5E%7B%5Cfrac%7B-1%7D%7B4%20C%5E2%7D%20%5Cfrac%7By'%5E2%7D%7Bt'%7D%7D"></p>
<p>We choose <img src="https://latex.codecogs.com/png.latex?A"> such that <img src="https://latex.codecogs.com/png.latex?%5Cint_%5Cmathbb%7BR%7D%20f(%5Cxi)%20%5Cspace%20d%5Cxi%20=%201"></p>
<p><img src="https://latex.codecogs.com/png.latex?A%20%5Ccdot%20%5Cint_%5Cmathbb%7BR%7D%20e%5E%7B%5Cfrac%7B-1%7D%7B4%20C%5E2%7D%20%5Cxi%5E2%7D%20%5Cspace%20d%5Cxi%20=%201"></p>
<p>Using substitution <img src="https://latex.codecogs.com/png.latex?x%20=%20%5Cfrac%7B%5Cxi%7D%7B2C%7D">, we get <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bdx%7D%7Bd%5Cxi%7D%20=%20%5Cfrac%7B1%7D%7B2C%7D">, hence:</p>
<p><img src="https://latex.codecogs.com/png.latex?A%20%5Ccdot%202C%20%5Ccdot%20%5Cint_%5Cmathbb%7BR%7D%20e%5E%7B-x%5E2%7D%20dx%20=%201"></p>
<p><img src="https://latex.codecogs.com/png.latex?A%20=%20%5Cfrac%7B1%7D%7B2C%20%5Csqrt%7B%5Cpi%7D%7D"> <img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y',%20t')%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7Bt%7D%7D%20%5Cspace%20%5Ccdot%20%5Cfrac%7B1%7D%7B2C%20%5Csqrt%7B%5Cpi%7D%7D%20%5Ccdot%20e%5E%7B%5Cfrac%7B-1%7D%7B4%20C%5E2%7D%20%5Cfrac%7By'%5E2%7D%7Bt'%7D%7D"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Probability Density Function for normal distribution
</div>
</div>
<div class="callout-body-container callout-body">
<p>Recall the Probability Density Function for a random normal variable.</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7B2%20%5Cpi%7D%7D%20%5Ccdot%20e%5E%7B%5Cfrac%7B-1%7D%7B2%7D%20%5Cfrac%7B(x-%5Cmu)%5E2%7D%7B%5Csigma%5E2%7D%7D"></p>
</div>
</div>
<p>With this in mind, we could set <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%20C%20%5Ccdot%20%5Csqrt%7B2t'%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2%20=%202%20%5Ccdot%20C%5E2%20%5Ccdot%20t'"></p>
<p><img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y',%20t')%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7B2%20%5Cpi%7D%7D%20%5Cspace%20%5Ccdot%20e%5E%7B%5Cfrac%7B-1%7D%7B2%7D%20%5Cfrac%7By'%5E2%7D%7B%5Csigma%5E2%7D%7D"></p>
<p>Hence <img src="https://latex.codecogs.com/png.latex?y'"> is a random variable such that <img src="https://latex.codecogs.com/png.latex?y'%20%5Csim%20N%20%5Cleft(%200,%20(C%20%5Csqrt%7B2t'%7D%20%5Cspace)%5E2%20%5Cright)"></p>
</section>
<section id="an-alternative-situation" class="level1">
<h1>An Alternative Situation</h1>
<p>We could imagine that instead of the trinomial walk, we a have a <strong>Symmetric Random Walk</strong>. We defined some properties of such symmetric random walk in an earlier <a href="../../../posts/quant-part1/random-behavior-assets/index.html">post</a></p>
<p>This mean that our random walker can move in steps <img src="https://latex.codecogs.com/png.latex?%5Cdelta%20y"> in time-step <img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t">.</p>
<p>Similarly to what we have done above, <img src="https://latex.codecogs.com/png.latex?Prob(a%3Cy'%3Cb%20%5Ctext%7B%20at%20time%20t'%20%7D%20%7C%20%5Ctext%7B%20y%20at%20time%20t%7D)%20=%20%5Cint_a%5Eb%20p(y,%20t;%20y',%20t')%20dy'"> and</p>
<p><img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y',%20t')%20=%20%5Calpha%20%5Ccdot%20P(y,%20t;%20y'+%5Cdelta%20y,%20t'-%5Cdelta%20t)%20+%20%5Calpha%20%5Ccdot%20P(y,%20t;%20y'-%5Cdelta%20y,%20t'%20-%20%5Cdelta%20t)"> Because the random walk is symmetric <img src="https://latex.codecogs.com/png.latex?%5Calpha"> has to be <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y'%20+%20%5Cdelta%20y,%20t'-%5Cdelta%20t)%20%20%5Capprox%20P(y,t;y',t')%20+%20%5Cdelta%20y%20%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20y'%7D%20-%20%5Cdelta%20t%20%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cdelta%20y%5E2%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D%20+%20%5Cdots"></p>
<p><img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y'-%20%5Cdelta%20y,%20t'-%5Cdelta%20t)%20%20%5Capprox%20P(y,t;y',t')%20-%20%5Cdelta%20y%20%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20y'%7D%20-%20%5Cdelta%20t%20%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cdelta%20y%5E2%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D%20+%20%5Cdots"></p>
<p>Putting it all back together and again using <img src="https://latex.codecogs.com/png.latex?P(y,%20t;%20y',%20t')%20=%20P(y',%20t')"> for brevity:</p>
<p><img src="https://latex.codecogs.com/png.latex?P(y',%20t')%20=%20P(y',%20t')%20-%20%5Cdelta%20t%20%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cdelta%20y%5E2%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t%20%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cdelta%20y%5E2%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cdelta%20y%5E2%7D%7B%5Cdelta%20t%7D%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D"></p>
<p>When we take the limit for <img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t"> and <img src="https://latex.codecogs.com/png.latex?%5Cdelta%20y'%5E2"> to tend -&gt; 0, this expression would only make sense if <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cdelta%20y%5E2%7D%7B%5Cdelta%20t%7D%20-%3E%201">; otherwise the probability will either be <img src="https://latex.codecogs.com/png.latex?0"> or <img src="https://latex.codecogs.com/png.latex?%5Cinfty">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D"></p>


</section>

 ]]></description>
  <category>Probability</category>
  <category>Probability Density Function</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part1/trinomial-model/index.html</guid>
  <pubDate>Fri, 07 Apr 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>04 - Binomials models for Quantitative Finance</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part1/binomials_models/index.html</link>
  <description><![CDATA[ 




<section id="binomial-models" class="level1">
<h1>Binomial models</h1>
<p>The idea is to develop an intuition for delta hedging and risk-neutrality when valuing an option.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/binomials_models/draw1.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Stock and Option Value perspectives</figcaption>
</figure>
</div>
<ul>
<li>S is the stock price at the start (time <img src="https://latex.codecogs.com/png.latex?t=0">)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t"> is a one increment of time (one unit of time)</li>
<li><img src="https://latex.codecogs.com/png.latex?u"> is the factor when stock price rise</li>
<li><img src="https://latex.codecogs.com/png.latex?v"> is the factor when stock price fall
<ul>
<li><img src="https://latex.codecogs.com/png.latex?0%3Cv%3C1%3Cu"></li>
</ul></li>
<li><img src="https://latex.codecogs.com/png.latex?V"> is the option value at time <img src="https://latex.codecogs.com/png.latex?t=0"></li>
<li><img src="https://latex.codecogs.com/png.latex?V%5E+"> is the option value at expiration when stock is ITM (case of a call option)</li>
<li><img src="https://latex.codecogs.com/png.latex?V%5E-"> is the option value at expiration when stock is OTM (case of a call option)</li>
</ul>
<section id="delta-hedging-and-no-arbitrage" class="level2">
<h2 class="anchored" data-anchor-id="delta-hedging-and-no-arbitrage">Delta hedging and no-arbitrage</h2>
<p>Now we are going to introduce <img src="https://latex.codecogs.com/png.latex?%5CDelta"> as the amount of stock to hedge (a percentage of a stock) to be risk-free. Because the portfolio is risk-free it must return the risk-free rate to prevent arbitrage.</p>
<p>We can model our stock and option as part of a portfolio (we call it <img src="https://latex.codecogs.com/png.latex?%5CPi">). Hence, <img src="https://latex.codecogs.com/png.latex?%5CPi%20=%20V%20-%20%5CDelta%20%5Ccdot%20S"> At this stage, we are assuming that the probability to go up or down is the same (it’s basically irrelevant in this case).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/binomials_models/draw2.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Option value with delta hedging</figcaption>
</figure>
</div>
<p>If we want to hedge the stock to be risk-free, then at expiration we should have this equation</p>
<p><img src="https://latex.codecogs.com/png.latex?V%5E+%20-%20%5CDelta%20us%20=%20V%5E--%5CDelta%20vs"> Solving for <img src="https://latex.codecogs.com/png.latex?%5CDelta">, we get:</p>
<p><span id="eq-delta1"><img src="https://latex.codecogs.com/png.latex?%5CDelta%20=%20%5Cfrac%7BV%5E+-V%5E-%7D%7B(u-v)S%7D%20=%20%5Cfrac%7B%5Ctext%7Brange%20of%20options%20payoff%7D%7D%7B%5Ctext%7Brange%20of%20asset%20prices%7D%7D%20%5Ctag%7B1%7D"></span></p>
<p>In other words, we could see <img src="https://latex.codecogs.com/png.latex?%5CDelta"> as the rate of change of the option price in function of the stock price. <img src="https://latex.codecogs.com/png.latex?%5CDelta%20=%20%5Cfrac%7B%5Cpartial%7BV%7D%7D%7B%5Cpartial%7BS%7D%7D"></p>
<p>Once we found <img src="https://latex.codecogs.com/png.latex?%5CDelta">, we could find <img src="https://latex.codecogs.com/png.latex?V"> by just making today’s value of the trade = tomorrow’s value of the trade (at expiration). Just solve for <img src="https://latex.codecogs.com/png.latex?V"> <img src="https://latex.codecogs.com/png.latex?V%20-%20%5CDelta%20S%20=%20V%5E-%20-%20%5CDelta%20vS"> or <img src="https://latex.codecogs.com/png.latex?V%20-%20%5CDelta%20S%20=%20V%5E+%20-%20%5CDelta%20uS"> which ever is easier to calculate.</p>
<p>Now, of course, cash is not free and there is a time value associated to it. In that sense, today’s value for the trade should be equal a discounted value of tomorrow’s trade value (at expiration).<br>
The thinking is that if we want to hedge to be risk-free, it should return the risk-free rate otherwise there is an arbitrate opportunity. <img src="https://latex.codecogs.com/png.latex?%5CPi%20=%20V%20-%20%5CDelta%20S%20=%20%5Cfrac%7B1%7D%7B1+r%20%5Cdelta%20t%7D%20%5Cleft(V%5E-%20-%20%5CDelta%20vS%20%5Cright)"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?r"> is the value of the risk-free asset</li>
<li>we are dealing with annualized values, if assets expires in one month and risk-free asset is let’s say 3%, we would multiply 3% by 21 days or <img src="https://latex.codecogs.com/png.latex?0.03%20%5Ccdot%20%5Cfrac%7B21%7D%7B252%7D"></li>
</ul>
<p>Using our value of <img src="https://latex.codecogs.com/png.latex?%5CDelta"> from Equation&nbsp;1, we can isolate <img src="https://latex.codecogs.com/png.latex?V"> as <span id="eq-delta-hedging"><img src="https://latex.codecogs.com/png.latex?V%20=%20%5Cleft(%5Cfrac%7BV%5E+-V%5E-%7D%7Bu-v%7D%20%5Cright)%20+%20%5Cfrac%7B1%7D%7B1+r%20%5Cdelta%20t%7D%20%5Cleft(V%5E-%20-%20%5CDelta%20vS%20%5Cright)%20%5Ctag%7B2%7D"></span></p>
<p>With delta-hedging, we say that the portfolio is deterministic (aka risk-free)</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>A stock is trading at $100. A call option with strike price of $100. Stock can either go to $103 or $98.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart LR 
  100 --&gt; 103
  100 --&gt; 98
</pre>
</div>
</div>
</div>
</div>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?V%5E+%20=%203"></li>
<li><img src="https://latex.codecogs.com/png.latex?V%5E-%20=%200"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5CDelta%20=%20%5Cfrac%7B3-0%7D%7B103-98%7D%20=%20%5Cfrac%7B3%7D%7B5%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?V%20-%20%5CDelta%20S%20=%20V%5E+%20-%20%5CDelta%20us">, plugging the value from above we get <img src="https://latex.codecogs.com/png.latex?V%20=%20%5C$1.2"></li>
</ul>
</div>
</div>
</section>
<section id="the-risk-neutral" class="level2">
<h2 class="anchored" data-anchor-id="the-risk-neutral">The Risk-Neutral</h2>
<p>Using the same idea as earlier and introducing some probabilities. <img src="https://latex.codecogs.com/png.latex?p'"> is the risk-neutral probability.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart LR
  S -- p' --&gt; uS
  S -- 1-p' --&gt; vS
</pre>
</div>
</div>
</div>
</div>
<p>From a probabilistic perspective we could write: <img src="https://latex.codecogs.com/png.latex?S%20=%20p'uS%20+%20(1-p')vS"> Or in the presence of a risk free asset, <img src="https://latex.codecogs.com/png.latex?S%20=%20%5Cfrac%7B1%7D%7B1+r%20%5Cdelta%20t%7D%20%5Cleft(p'%20uS%20+%20(1-p')vS%20%5Cright)"></p>
<p>We could isolate <img src="https://latex.codecogs.com/png.latex?p'"> in this last equation: <img src="https://latex.codecogs.com/png.latex?s%20+%20s%20r%20%5Cdelta%20t%20=%20p'%20u%20s%20+%20vs%20-%20p'v%20s"> <img src="https://latex.codecogs.com/png.latex?p'%20=%20%5Cfrac%7Bs%20+%20s%20r%20%5Cdelta%20t%20-%20vs%7D%7Bus%20-%20vs%7D"> <span id="eq-pprime1"><img src="https://latex.codecogs.com/png.latex?p'%20=%20%5Cfrac%7B1+r%20%5Cdelta%20t%20-%20v%7D%7Bu-v%7D%20%5Ctag%7B3%7D"></span></p>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart LR
  V -- p' --&gt; V+
  V -- 1-p' --&gt; V-
</pre>
</div>
</div>
</div>
</div>
<p>To find <img src="https://latex.codecogs.com/png.latex?V">: <img src="https://latex.codecogs.com/png.latex?V%20=%20p'%20V%5E+%20+%20(1-p')%20V%5E-"></p>
<p>Interesting to note that the option price <img src="https://latex.codecogs.com/png.latex?V"> is like an expectation (the sum of the probability) and <img src="https://latex.codecogs.com/png.latex?p'"> is from Equation&nbsp;3</p>
<p>Actually, we should also include the discounted factor (V is the present value of the expectation): <span id="eq-risk-neutral"><img src="https://latex.codecogs.com/png.latex?V%20=%20%5Cfrac%7B1%7D%7B1%20+%20r%20%5Cdelta%20t%7D%20%5Ccdot%20%5Cleft(%20p'%20V%5E+%20+%20(1-p')%20V%5E-%20%5Cright)%20%5Ctag%7B4%7D"></span></p>
</section>
<section id="mixing-real-world-and-risk-free-world" class="level2">
<h2 class="anchored" data-anchor-id="mixing-real-world-and-risk-free-world">Mixing real-world and risk-free world</h2>
<p>Now if we collide both world: the real-world with drift and volatility (Equation&nbsp;2) and the risk-free world (Equation&nbsp;4) with <img src="https://latex.codecogs.com/png.latex?p'">: we can set up this 2 equations: One for the expected mean rate of change of prices and another for the variance of these rate of change.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bequation%7D%0A%20%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%5Cmu%20S%20%5Cdelta%20t%20=%20puS+(1-p)vS-S%20%5C%5C%0A%20%20%20%20%5Csigma%5E2S%5E2dt%20=%20S%5E2%20(p%20%5Ccdot%20%5Bu-1-(pu%20+%20(1-p)v-1)%5D%5E2%20+%20(1-p)%20%5Ccdot%20%5Bv-1-(pu%20+%20(1-p)v-1)%5D%5E2)%0A%20%20%5Cend%7Bcases%7D%0A%5Cend%7Bequation%7D%0A"></p>
<p>(TODO re-write these 2 equations)</p>
<p>2 equations and 3 unknowns, we can choose a solution (the prettiest one!) among the infinitely many:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?u%20=%201%20+%20%5Csigma%20%5Csqrt%7B%5Cdelta%20t%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?v%20=%201%20-%20%5Csigma%20%5Csqrt%7B%5Cdelta%20t%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?p%20=%20%5Cfrac%7B1%7D%7B2%7D%20+%20%5Cfrac%7B%5Cmu%20%5Csqrt%7B%5Cdelta%20t%7D%7D%7B2%20%5Csigma%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?p'%20=%20%5Cfrac%7B1%7D%7B2%7D%20+%20%5Cfrac%7Br%20%5Csqrt%7B%5Cdelta%20t%7D%7D%7B2%20%5Csigma%7D"> <img src="https://latex.codecogs.com/png.latex?p'"> is the risk-neutral probability.</li>
</ul>
</section>
</section>
<section id="the-binomial-tree" class="level1">
<h1>The binomial tree</h1>
<ul>
<li>After one time step <img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t"> our stock, initially at <img src="https://latex.codecogs.com/png.latex?S"> will either be at <img src="https://latex.codecogs.com/png.latex?uS"> or <img src="https://latex.codecogs.com/png.latex?vS">.<br>
</li>
<li>After two time steps, the stock will either be at <img src="https://latex.codecogs.com/png.latex?u%5E2S"> or <img src="https://latex.codecogs.com/png.latex?uvS"> or <img src="https://latex.codecogs.com/png.latex?v%5E2S"></li>
<li>After three time steps, the stock will either be at <img src="https://latex.codecogs.com/png.latex?u%5E3S"> or <img src="https://latex.codecogs.com/png.latex?u%5E2vS"> or <img src="https://latex.codecogs.com/png.latex?uv%5E2S"> or finally <img src="https://latex.codecogs.com/png.latex?v%5E3S"></li>
<li>etc.</li>
</ul>
<p>A bit of a crude representation using Geogebra</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part1/binomials_models/binomial-tree.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Binomial tree representation</figcaption>
</figure>
</div>
<p>Using the equations from the previous sections, we can now create a function to price the value of an option.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">calculate_option_price <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(spot, strike, rfr, sigma, time, steps) {</span>
<span id="cb1-2">  dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>steps            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get delta_t</span></span>
<span id="cb1-3">  u <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(dt)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># multiplying factor when asset rise</span></span>
<span id="cb1-4">  v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(dt)</span>
<span id="cb1-5">  p_prime <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (rfr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(dt)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sigma))</span>
<span id="cb1-6">  discount_factor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rfr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt)</span>
<span id="cb1-7">  </span>
<span id="cb1-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculating vector of prices at maturity </span></span>
<span id="cb1-9">  s <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a vector for prices at maturity - (terminal nodes on the trees)</span></span>
<span id="cb1-10">  s[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> spot <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> v<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>steps <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># #initialize the first end-price - (the most bottom right node of the tree)</span></span>
<span id="cb1-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) { </span>
<span id="cb1-12">    s[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> s[i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> u<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>v <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is the trick: to go up one leave = going back one step and then up</span></span>
<span id="cb1-13">  }</span>
<span id="cb1-14">  </span>
<span id="cb1-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculating vector of options values at maturity </span></span>
<span id="cb1-16">  opt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, steps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) { </span>
<span id="cb1-18">    opt[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, s[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> strike)</span>
<span id="cb1-19">  }</span>
<span id="cb1-20">  </span>
<span id="cb1-21">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We have now to work backward and up in the trees (from bottom right and up)</span></span>
<span id="cb1-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We know the final option value.</span></span>
<span id="cb1-23">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We need know to calculate the options in the intermediates nodes</span></span>
<span id="cb1-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (j <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>i) {</span>
<span id="cb1-26">      opt[j] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> discount_factor <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (p_prime <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> opt[j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p_prime)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>opt[j])</span>
<span id="cb1-27">    }</span>
<span id="cb1-28">  }</span>
<span id="cb1-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(glue::glue('Asset price for each time step:', s))</span></span>
<span id="cb1-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(glue::glue('Option price for each time step: ', opt))</span></span>
<span id="cb1-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(opt)</span>
<span id="cb1-32">}</span></code></pre></div>
</div>
<p>Let’s try our function to get some results</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_option_price</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">spot =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strike =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rfr =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">steps =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  5.415051  8.117623 11.822154 16.506917 21.550625</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Binomial Models</category>
  <category>Options Pricing</category>
  <category>Delta Hedging</category>
  <category>Risk-Neutrality</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part1/binomials_models/index.html</guid>
  <pubDate>Wed, 05 Apr 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Linear Algebra for Quantitative Finance</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/lin-algebra-quant/index.html</link>
  <description><![CDATA[ 




<p>On this post, I am just sharing some linear algebra tools and tricks useful in quantitative finance. This is mainly a post for myself to have a place where I can remember them for when I need them.</p>
<section id="finding-the-inverse-of-a-3x3-matrix" class="level1">
<h1>Finding the inverse of a 3x3 matrix</h1>
<ul>
<li>Find the transpose of the cofactor matrix.
<ul>
<li>for each element of the matrix, find its minor (cross the row <img src="https://latex.codecogs.com/png.latex?i"> and column <img src="https://latex.codecogs.com/png.latex?j"> for element <img src="https://latex.codecogs.com/png.latex?ij">, and find the determinant of the square matrix left)</li>
<li>alternate the signs (diagonals are positive) <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bpmatrix%7D%20+%20&amp;%20-%20&amp;%20+%20%5C%5C%20-%20&amp;%20+%20&amp;%20-%20%5C%5C%20+%20&amp;%20-%20&amp;%20+%20%5C%5C%20%5Cend%7Bpmatrix%7D"></li>
</ul></li>
<li>Find the determinant of the 3x3 matrix
<ul>
<li><img src="https://latex.codecogs.com/png.latex?a_%7B1,1%7D%20%5Ccdot%20(%5Cmbox%7B%20cofactor%20of%20%7D%20a_%7B1,1%7D)%20-%20a_%7B1,2%7D%20%5Ccdot%20(%5Cmbox%7B%20cofactor%20of%20%7D%20a_%7B1,2%7D)%20+%20a_%7B1,3%7D%20%5Ccdot%20(%5Cmbox%7B%20cofactor%20of%20%7D%20a_%7B1,3%7D)"></li>
</ul></li>
</ul>
</section>
<section id="going-from-correlation-to-covariance-matrix" class="level1">
<h1>Going from Correlation to Covariance matrix</h1>
<p>How to go from the correlation matrix and standard deviation vector to the covariance matrix?</p>
<p>The standard deviation vector is defined as <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%20%5Cpmatrix%7B%5Csigma_1%20%5C%5C%20%5Csigma_2%20%5C%5C%20%5Cvdots%20%5C%5C%20%5Csigma_n%7D"></p>
<p>The correlation matrix is defined as <img src="https://latex.codecogs.com/png.latex?%20R%20=%20%5Cbegin%7Bpmatrix%7D%201%20&amp;%20%5Crho_%7B12%7D%20&amp;%20%5Ccdots%20&amp;%20%5Crho_%7B1n%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Crho_%7B21%7D%20&amp;%201%20&amp;%20%5Ccdots%20&amp;%20%5Crho_%7B2n%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Crho_%7Bn1%7D%20&amp;%20%5Crho_%7Bn2%7D%20&amp;%20%5Ccdots%20&amp;%201%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Bpmatrix%7D%20"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Crho_%7Bij%7D"> is the correlation between returns of asset <img src="https://latex.codecogs.com/png.latex?i"> and asset <img src="https://latex.codecogs.com/png.latex?j"></p>
<p>we create a diagonal matrix from the standard deviation vector.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20S%20=%20D(%5Csigma)%20=%20%5Cbegin%7Bpmatrix%7D%20%5Csigma_1%20&amp;%200%20&amp;%20%5Ccdots%20&amp;%200%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20&amp;%20%5Csigma_2%20&amp;%20%5Ccdots%20&amp;%200%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20&amp;%200%20&amp;%20%5Ccdots%20&amp;%20%5Csigma_n%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Bpmatrix%7D%20"> (aka all other entries being 0)</p>
<p>In R, we use the function <strong>diag(x)</strong> with x being a vector! Note that S is symmetric, and so <img src="https://latex.codecogs.com/png.latex?S%20=%20S%5ET"></p>
<p>To get the covariance matrix <img src="https://latex.codecogs.com/png.latex?%5CSigma">, we’ll pre &amp; post-multiply the correlation matrix by the diagonal of standard deviation. Hence: <img src="https://latex.codecogs.com/png.latex?%20S%20%5Ccdot%20R%20%5Ccdot%20S%20=%20%5CSigma%20=%20%5Cbegin%7Bpmatrix%7D%0A%5Csigma_1%5E2%20&amp;%20%5Crho_%7B12%7D%20%5Csigma_1%20%5Csigma2%20&amp;%20%5Ccdots%20&amp;%20%5Crho_%7B1n%7D%20%5Csigma_1%20%5Csigma_n%20%20%5C%5C%0A%5Crho_%7B21%7D%20%5Csigma_2%20%5Csigma1%20&amp;%20%5Csigma2%5E2%20&amp;%20%5Ccdots%20&amp;%20%5Crho_%7B2n%7D%20%5Csigma_2%20%5Csigma_n%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20%5C%5C%0A%5Crho_%7Bn1%7D%20%5Csigma_n%20%5Csigma_1%20&amp;%20%5Crho_%7Bn2%7D%20%5Csigma_n%20%5Csigma_2%20&amp;%20%5Ccdots%20&amp;%20%5Csigma_n%5E2%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Bpmatrix%7D%20"></p>


</section>

 ]]></description>
  <category>R-code</category>
  <category>quant-finance</category>
  <category>Linear-Algebra</category>
  <guid>https://fderyckel.github.io/blog.html/posts/lin-algebra-quant/index.html</guid>
  <pubDate>Fri, 10 Mar 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Portfolio Optimization Part I (in R)</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/portfolio_optimization_parti_inR/index.html</link>
  <description><![CDATA[ 




<p>First post on portfolio optimization from a quantitative finance lense.</p>
<p>We are optimizing a portfolio with <em>N assets</em>, where <img src="https://latex.codecogs.com/png.latex?N%20%5Cgeq%202"> (N is a positive integer)</p>
<div id="def-weights" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 1 </strong></span>The weight of each assets <em>i</em> in the portfolio is defined as:</p>
<p><span id="eq-def-weight"><img src="https://latex.codecogs.com/png.latex?%20W_i%20=%20%5Cfrac%7B%5Cmbox%7BMarket%20value%20of%20asset%20i%7D%7D%7B%5Cmbox%7BTotal%20market%20value%20of%20portfolio%7D%7D%20%20%5Ctag%7B1%7D"></span></p>
</div>
<p>Of course, the sum of all the weights should be equal to 1.<br>
<span id="eq-sum-of-weights"><img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi%20=%201%7D%5E%7BN%7D%20W_i%20=%201%20%20%5Ctag%7B2%7D"></span></p>
<p>Few assumptions made on the assets.</p>
<ul>
<li>each asset has an expected return denoted by <img src="https://latex.codecogs.com/png.latex?%5Cmu_i%20%5Cmbox%7B%20with%20%7D%20i%20=%201,%202,%20%5Cldots,%20N">. In that sense <img src="https://latex.codecogs.com/png.latex?%5Cmu_i%20=%20E%5BR_i%5D"></li>
<li>each asset has standard deviation on their returns denotated by <img src="https://latex.codecogs.com/png.latex?%5Csigma_i%20%5Cmbox%7B%20with%20%7D%20i%20=%201,%202,%20%5Cldots,%20N"></li>
<li>the correlation between asset <em>i</em> and asset <em>j</em> is denoted by <img src="https://latex.codecogs.com/png.latex?%5Crho_%7Bij%7D%20%5Cmbox%7B%20with%20%7D%20i,j%20=%201,%202,%20%5Cldots,%20N">. In that sense, <img src="https://latex.codecogs.com/png.latex?%5Crho_%7Bij%7D%20=%20corr(R_i,%20R_j)"></li>
</ul>
<p>The <strong>Mean-Variance Optimization</strong> problem can be formulated in 2 ways:</p>
<ul>
<li>Highest possible returns for a given amount of risk</li>
<li>Lowest possible amount of risk for a given expected return</li>
</ul>
<p>Return is the expected return of the asset and risk is the variance of the returns of the asset.</p>
<p>The <strong>Risk-Free Asset (RFA)</strong> is the money deposited in a bank account-ish (a secure term-deposit) at a fixed rate <strong>R</strong>. The expected return is thus R and volatitliy is 0. Also the correlation between the RFA and any other assets is 0.</p>
<p>Each asset can be represented on a 2D-plane with the risk on the x-axis and returns on the y-axis.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-asset-plane" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/portfolio_optimization_parti_inR/index_files/figure-html/fig-asset-plane-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Figure&nbsp;1: <strong>?(caption)</strong></figcaption>
</figure>
</div>
</div>
</div>
<p>There are some other assumptions made when trying to construct a mean-variance optimum portfolio:</p>
<ul>
<li>results are based on total returns (include dividends, interest paid, etc.)</li>
<li>fractional shares are possible</li>
<li>can deposit and withdraw money freely at the risk-free rate</li>
<li>no restriction on short selling</li>
<li>doesn’t account for tax, transaction fees, collateral and margins.</li>
</ul>
<section id="in-practice" class="level1">
<h1>In practice</h1>
<p>To bring these idea into practices, there are a few ways to go about it. The first approach is to have <em>Monte-Carlo simulations</em> using historical data for the parameters of the mean and variance. Another approach would be to use numerical methods to find the optimum weights that maximize the sharpe ratio (aka ratio of returns to volatility). In this way, we’ll find the efficient frontier: aka the best returns for a given risk or a lowest risk for a given returns.</p>
<section id="create-mc-simulations-of-weights-to-assess-mean-variance-of-a-portfolio" class="level2">
<h2 class="anchored" data-anchor-id="create-mc-simulations-of-weights-to-assess-mean-variance-of-a-portfolio">Create MC simulations of weights to assess mean-variance of a portfolio</h2>
<p>Let’s get 5 different financial assets: AA, LLY, AMD, SBUX, FDX. Although they are from different industries, it is not a very diverse bunch as they are all from US big companies.</p>
<p>We already have the assets downloaded and we’ll use their closing prices.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read_csv()</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select(), arrange(), filter(), mutate(), summarize()</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># map()</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drop_na(), pivot_wider(), unnest()</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glue)       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># glue()</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read adjusted closing prices and compute annualized daily returns and sd</span></span>
<span id="cb1-9">read_prices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(ticker) { </span>
<span id="cb1-10">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../raw_data/'</span>, {ticker}, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.csv'</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adj_close =</span> adjClose) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018-01-01'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ret1d =</span> (adj_close <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lag</span>(adj_close, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_ret =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(ret1d, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb1-16">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">std_ret =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(ret1d, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-17">}</span>
<span id="cb1-18"></span>
<span id="cb1-19">assets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AA'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LLY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AMD'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SBUX'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FDX'</span>)</span>
<span id="cb1-20">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ticker =</span> assets, </span>
<span id="cb1-21">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(ticker, read_prices)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>()</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div id="tbl-mean-variance" class="anchored">
<table data-quarto-postprocess="true" data-tbl-colwidths="[100,200,200]" class="table table-sm table-striped small">
<caption>Table&nbsp;1: Annualized Mean and Standard Deviation of daily returns</caption>
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">Ticker</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Mean Ret</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Std of Ret</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">AA</td>
<td style="text-align: right;">15.90</td>
<td style="text-align: right;">60.72</td>
</tr>
<tr class="even">
<td style="text-align: left;">LLY</td>
<td style="text-align: right;">31.79</td>
<td style="text-align: right;">29.78</td>
</tr>
<tr class="odd">
<td style="text-align: left;">AMD</td>
<td style="text-align: right;">55.20</td>
<td style="text-align: right;">56.37</td>
</tr>
<tr class="even">
<td style="text-align: left;">SBUX</td>
<td style="text-align: right;">16.43</td>
<td style="text-align: right;">30.36</td>
</tr>
<tr class="odd">
<td style="text-align: left;">FDX</td>
<td style="text-align: right;">4.40</td>
<td style="text-align: right;">37.53</td>
</tr>
</tbody>
</table>
</div>


</div>
</div>
<p>First, we create the df of returns:</p>
<ul>
<li>it’s a long df with only ticker, date, daily returns</li>
<li>one row per daily observation.</li>
<li>we drop first row with no returns</li>
<li>the returns df is a wide df with date and tickers as columns, then daily returns as row</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># functions to get daily returns of each assets</span></span>
<span id="cb2-2">create_returns_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(ticker) { </span>
<span id="cb2-3">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../raw_data/'</span>, {ticker}, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.csv'</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adj_close =</span> adjClose) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018-01-01'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ret1d =</span> (adj_close <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lag</span>(adj_close, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(date, ret1d)</span>
<span id="cb2-9">}</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df of each assets and all their daily returns</span></span>
<span id="cb2-12">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ticker =</span> assets, </span>
<span id="cb2-13">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(ticker, create_returns_df)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(prices)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop_na</span>()</span>
<span id="cb2-16"></span>
<span id="cb2-17"></span>
<span id="cb2-18">returns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(ticker) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> ticker, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> ret1d)  </span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(returns)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 6
  date             AA     AMD       FDX       LLY     SBUX
  &lt;date&gt;        &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 2018-01-03 -0.0121   0.0519  0.0125    0.00543   0.0187 
2 2018-01-04  0.00367  0.0494  0.0156    0.00446   0.00375
3 2018-01-05 -0.0112  -0.0198  0.00393   0.0123    0.0115 
4 2018-01-08  0.0168   0.0337  0.0103   -0.00508  -0.00503
5 2018-01-09 -0.0145  -0.0375 -0.00339  -0.000813 -0.00219
6 2018-01-10  0.0363   0.0118  0.000971  0.000465  0.0108 </code></pre>
</div>
</div>
<p>To optimize the mean-variance of the portfolio, we consider the following</p>
<p>Weights of each assets are <img src="https://latex.codecogs.com/png.latex?w%20=%20%5Cpmatrix%7Bw_1%20%5C%5C%20w_2%20%5C%5C%20%5Cvdots%20%5C%5C%20w_n%7D">.<br>
Mean returns of each assets are <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%20%5Cpmatrix%7B%5Cmu_1%20%5C%5C%20%5Cmu_2%20%5C%5C%20%5Cvdots%20%5C%5C%20%5Cmu_n%7D"></p>
<p>Then, the <strong>expected portfolio return</strong> is <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7B%5Cpi%7D%20=%20w%5E%7BT%7D%20%5Ccdot%20%5Cmu"> where <img src="https://latex.codecogs.com/png.latex?w%5E%7BT%7D"> is the transpose of <img src="https://latex.codecogs.com/png.latex?w"> (aka transforming <img src="https://latex.codecogs.com/png.latex?w"> from a column vector to a row vector in order to have right dimensions to compute the dot product).</p>
<p>And the <strong>expected portfolio variance</strong> is computed by <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Cpi%7D%5E2%20=%20w%5ET%20%5Ccdot%20%5CSigma%20%5Ccdot%20w"> where <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is the covariance matrix. Also, don’t forget to square root the variance when using sd: <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Cpi%7D%20=%20%5Csqrt%7Bw%5ET%20%5Ccdot%20%5CSigma%20%5Ccdot%20w%7D"></p>
<p>To put this into code, we first create the matrix of returns,then create the covariance matrix. Using both matrices, we create a function that return the portfolio mean and variance using the randomly chosen weights.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this df to provide vectors of expected returns</span></span>
<span id="cb4-2">df_stat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(ticker) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_ret =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(ret1d, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(ticker) </span>
<span id="cb4-6"></span>
<span id="cb4-7">mu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(df_stat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mean_ret, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(assets))</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this df to provide the covariance matrix</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note how we have also multiplied it by 252</span></span>
<span id="cb4-11">sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(ticker) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> ticker, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> ret1d) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop_na</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cov</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span></span>
<span id="cb4-15"></span>
<span id="cb4-16">sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(assets))</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this function to create one simulation using random weights</span></span>
<span id="cb4-19">create_one_portfolio_simulation <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) { </span>
<span id="cb4-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pick random weights</span></span>
<span id="cb4-21">  weights_rand <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(assets))</span>
<span id="cb4-22">  weights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(weights_rand <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(weights_rand), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(assets))</span>
<span id="cb4-23">  </span>
<span id="cb4-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#these are textbook formula for return and volat of a portfolio</span></span>
<span id="cb4-25">  return_pi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(weights) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> mu)</span>
<span id="cb4-26">  volat_pi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>((<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(weights) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> sigma) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> weights))</span>
<span id="cb4-27">  sharpe_ratio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> return_pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> volat_pi</span>
<span id="cb4-28">  </span>
<span id="cb4-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrap everything into a df for later checks / analysis</span></span>
<span id="cb4-30">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">portf_ret =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(return_pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">portf_volat =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(volat_pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),  </span>
<span id="cb4-31">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(weights) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sharpe_ratio =</span> sharpe_ratio)</span>
<span id="cb4-32"></span>
<span id="cb4-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df)</span>
<span id="cb4-34">}</span>
<span id="cb4-35"></span>
<span id="cb4-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#this is really the only inputs to get </span></span>
<span id="cb4-37">num_portfolio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7000</span></span>
<span id="cb4-38"></span>
<span id="cb4-39">mc_simu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>num_portfolio) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simul =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(id, create_one_portfolio_simulation)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(simul)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(sharpe_ratio))</span>
<span id="cb4-43"></span>
<span id="cb4-44"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(mc_simu)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
     id portf_ret portf_volat weights[,1]  [,2]  [,3]  [,4]   [,5] sharpe_ratio
  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;        &lt;dbl&gt;
1  5710      37.8        29.4       0.168  31.1 0.757  61.6  6.43          1.29
2  6227      34.7        27.6       0.937  25.3 0.648  55.8 17.2           1.26
3   483      34.8        27.9       0.917  26.1 5.59   58.2  9.18          1.25
4   184      37.6        30.3       0.546  35.6 6.66   53.1  4.14          1.24
5  3169      36.0        29.1       1.90   32.0 4.07   50.2 11.9           1.24
6  1388      34.1        27.5       3.26   18.0 4.97   73.4  0.415         1.24</code></pre>
</div>
</div>
<section id="vizualisation-of-mean-variances-points" class="level3">
<h3 class="anchored" data-anchor-id="vizualisation-of-mean-variances-points">Vizualisation of mean-variances points</h3>
<p>We have highlithed the portfolio with best mean-variance returns with a red square around its dot.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mc_simu, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> portf_volat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> portf_ret)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> sharpe_ratio)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_distiller</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Set1"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mc_simu[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,], <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> portf_volat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> portf_ret), </span>
<span id="cb6-7">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Portfolio Volatility'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Portfolio Returns'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MC simulation for 5 stocks'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sharpe </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Ratio'</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/portfolio_optimization_parti_inR/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>


</section>
</section>
</section>

 ]]></description>
  <category>portfolio</category>
  <category>R-code</category>
  <category>quant-finance</category>
  <category>model</category>
  <guid>https://fderyckel.github.io/blog.html/posts/portfolio_optimization_parti_inR/index.html</guid>
  <pubDate>Sun, 26 Feb 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Stochastic processes - Discrete Time Markov Chain</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/stochastic-processes/index.html</link>
  <description><![CDATA[ 




<p>This post is an introduction to Markov Chain with a presentation of Discrete Time Markov Chains.</p>
<section id="definition" class="level2">
<h2 class="anchored" data-anchor-id="definition">Definition</h2>
<p>A stochastic process is <img src="https://latex.codecogs.com/png.latex?%5C%7B%20X(t),%20t%20%5Cin%20T%20%5C%7D"> is a collection of random variables indexed by a parameter t that belongs to a set T.</p>
<ul>
<li>t is generally the time</li>
<li><img src="https://latex.codecogs.com/png.latex?X(t)"> is the state of the process at time t</li>
<li>The <em>state space</em> <img src="https://latex.codecogs.com/png.latex?S"> of a stochastic process is all possible state <img src="https://latex.codecogs.com/png.latex?X(t)"> for any <img src="https://latex.codecogs.com/png.latex?t%20%5Cin%20T"></li>
<li>if T is a countable set, we call this a <strong>discrete-time process</strong></li>
</ul>
<p>A <strong>discrete-time Markov Chain</strong> is a discrete-time stochastic process which state space <em>S</em> is finite such that: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BP%7D(X_%7Bn+1%7D%20=%20j%20%7C%20X_0%20=%20i_0,%20X_1%20=%20i_1,%20X_2%20=%20i_2,%20%5Cdots,%20x_n%20=%20i)%20=%20%5Cmathbb%7BP%7D(X_%7Bn+1%7D%20=%20j%20%7C%20X_n%20=%20i)%20=%20P_%7Bij%7D"></p>
<p>that is, the conditional probability of the process being in state j at time n + 1 given all the previous states depends only on the last-known position (state i at time n).</p>
</section>
<section id="some-other-teminology" class="level2">
<h2 class="anchored" data-anchor-id="some-other-teminology">Some other teminology</h2>
<ul>
<li>A state is called <strong>absorbing</strong> if the chain cannot leave it once it enters it. An absorbing Markov chain has at least one absorbing state.</li>
<li>A state is termed <strong>reflecting</strong> if once the chain leaves it, it cannot return to it.</li>
<li>The <strong>period d of a state i</strong> is the number such that, starting in i, the chain can return to i only in the number of steps that are multiples of d.&nbsp;A state with period d = 1 is called <strong>aperiodic.</strong> Periodicity is a class property.
<ul>
<li>For a reflecting state, the period is infinite, since the chain never comes back to this state.</li>
<li>Absorbing states necessarily have loops and thus are aperiodic states.</li>
</ul></li>
<li>a state is called recurrent if with probability 1 the chain ever reenters that state. Otherwise, the state is called transient.</li>
<li>A Markov Chain that has a unique stationary distribution (or steady-state distribution) is called an <strong>ergodic</strong> chain.</li>
</ul>
</section>
<section id="chapman-kolmogorov-equations" class="level2">
<h2 class="anchored" data-anchor-id="chapman-kolmogorov-equations">Chapman-Kolmogorov equations</h2>
<p>We denote the probability to go from state <img src="https://latex.codecogs.com/png.latex?i"> to state <img src="https://latex.codecogs.com/png.latex?j"> in n-steps by <img src="https://latex.codecogs.com/png.latex?%5Cbf%7BP%7D_%7Bij%7D%5E%7B(n)%7D">. It is also denoted as the <strong>n-steps transition probability matrix</strong>. That is for any time <img src="https://latex.codecogs.com/png.latex?m%20%3E=%200,%20%5Cbf%7BP%7D_%7Bij%7D%5En%20=%20%5Cmathbb%7BP%7D(X_%7Bm+n%7D%20=%20j%20%7C%20X_m%20=%20i)"> . <img src="https://latex.codecogs.com/png.latex?%5Cbf%7BP%7D%5E%7B(n)%7D%20=%20%5Cbf%7BP%7D%5En"> based on the Chapman-Kolmogorov equation.</p>
<p>The Chapman-Kolmogorov equation states that for all positive integers <img src="https://latex.codecogs.com/png.latex?m"> and <img src="https://latex.codecogs.com/png.latex?n"> , <img src="https://latex.codecogs.com/png.latex?%5Cbf%7BP%7D%5E%7B(m+n)%7D%20=%20%5Cbf%7BP%7D%5Em%20%5Ccdot%20%5Cbf%7BP%7D%5En"> where P is a one-step probability transition matrix (a square matrix)</p>
</section>
<section id="example-1" class="level2">
<h2 class="anchored" data-anchor-id="example-1">Example 1</h2>
<p>To model a Markov Chain, let’s first set up a <em>one-step probability transition matrix</em> (called here <strong>osptm</strong>).</p>
<p>We start with an easy 3 possible state process. That is the state space <img src="https://latex.codecogs.com/png.latex?S%20=%20%5C%7B1,%202,%203%5C%7D">. The osptm will provide the probability to go from one state to another.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">osptm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-2">osptm</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]  0.7  0.1  0.2
[2,]  0.0  0.6  0.4
[3,]  0.5  0.2  0.3</code></pre>
</div>
</div>
<p>We can always have a look at how the osptm looks like.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note we have to transpose the osptm matrix first. </span></span>
<span id="cb3-2">osptm_transposed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(osptm)</span>
<span id="cb3-3">osptm_transposed</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]  0.7  0.0  0.5
[2,]  0.1  0.6  0.2
[3,]  0.2  0.4  0.3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">diagram<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plotmat</span>(osptm_transposed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arr.length =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb5-2">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.prop =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>, </span>
<span id="cb5-3">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">self.cex =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">self.shifty=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">self.shiftx =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/stochastic-processes/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The <em>markovchain</em> package can provide us with all the state characteristics of a one-step probabilty transition matrix.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(markovchain)</span>
<span id="cb6-2">osptm_mc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"markovchain"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">transitionMatrix =</span> osptm)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recurrentClasses</span>(osptm_mc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "1" "2" "3"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transientClasses</span>(osptm_mc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>list()</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">absorbingStates</span>(osptm_mc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>character(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">period</span>(osptm_mc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steadyStates</span>(osptm_mc), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          1      2      3
[1,] 0.4651 0.2558 0.2791</code></pre>
</div>
</div>
<p>The next step is to calculate, for instance, what is the probability to go from state 1 to state 3 in 4 steps.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(expm)</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the expm library brings in the " %^%" operator for power. </span></span>
<span id="cb16-4">osptm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%^%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       [,1]   [,2]   [,3]
[1,] 0.5021 0.2303 0.2676
[2,] 0.3860 0.3104 0.3036
[3,] 0.4760 0.2483 0.2757</code></pre>
</div>
</div>
<p>Looking at the result, we can see that the probability to go from State 1 to State 3 in 4 steps is 0.2676</p>
<p>We can also calculate the unconditional distribution after 4 steps</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">initial_pro <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb18-2">initial_pro <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> (osptm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%^%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       [,1]  [,2]   [,3]
[1,] 0.4547 0.263 0.2823</code></pre>
</div>
</div>
</section>
<section id="example-2" class="level2">
<h2 class="anchored" data-anchor-id="example-2">Example 2</h2>
<p>Using a slightly more interesting one-step probability transition matrix having 6 different states.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#specifying transition probability matrix</span></span>
<span id="cb20-2">osptm<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb20-3">osptm</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]  0.3  0.7  0.0    0  0.0  0.0
[2,]  1.0  0.0  0.0    0  0.0  0.0
[3,]  0.5  0.0  0.0    0  0.0  0.5
[4,]  0.0  0.0  0.6    0  0.0  0.4
[5,]  0.0  0.0  0.0    0  0.1  0.9
[6,]  0.0  0.0  0.0    0  0.7  0.3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">osptm_transposed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(osptm)</span>
<span id="cb22-2">diagram<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plotmat</span>(osptm_transposed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arr.length =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arr.width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, </span>
<span id="cb22-3">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.prop =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.09</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>, </span>
<span id="cb22-4">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cex.txt =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">self.cex =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">self.shifty=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">self.shiftx =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.13</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://fderyckel.github.io/blog.html/posts/stochastic-processes/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">osptm_mc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"markovchain"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">transitionMatrix =</span> osptm)</span>
<span id="cb23-2"></span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recurrentClasses</span>(osptm_mc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "1" "2"

[[2]]
[1] "5" "6"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transientClasses</span>(osptm_mc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "3"

[[2]]
[1] "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">absorbingStates</span>(osptm_mc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>character(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">period</span>(osptm_mc)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in period(osptm_mc): The matrix is not irreducible</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steadyStates</span>(osptm_mc), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          1      2 3 4      5      6
[1,] 0.0000 0.0000 0 0 0.4375 0.5625
[2,] 0.5882 0.4118 0 0 0.0000 0.0000</code></pre>
</div>
</div>
<p>We can see that there are 2 possible steady states. Hence the Markov Chain is non-ergodic.</p>


</section>

 ]]></description>
  <category>Markov Chain</category>
  <guid>https://fderyckel.github.io/blog.html/posts/stochastic-processes/index.html</guid>
  <pubDate>Fri, 11 Nov 2022 17:00:00 GMT</pubDate>
</item>
</channel>
</rss>
