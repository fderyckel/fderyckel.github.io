<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>QUANT dira-t-on?</title>
<link>https://fderyckel.github.io/blog.html/blog.html</link>
<atom:link href="https://fderyckel.github.io/blog.html/blog.xml" rel="self" type="application/rss+xml"/>
<description>Curating notes from a Quant learning journey.</description>
<generator>quarto-1.6.39</generator>
<lastBuildDate>Sat, 05 Oct 2024 17:00:00 GMT</lastBuildDate>
<item>
  <title>PCA</title>
  <dc:creator>François de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/10-PCA/</link>
  <description><![CDATA[ 





<p>Principal Component Analysis is a widely used method to reduce the dimensionality of a dataset as well as to de-correlate it. It can also be used to weight the importance of variables. The PCA transforms variables into another set of variables called <em>Principal Components</em>.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>According to Hughes phenomenon, If the number of training samples is fixed and we keep on increasing the number of dimensions then the predictive power of our machine learning model first increases, but after a certain point it tends to decrease.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/10-PCA/curse_of_dimensionality.png" class="img-fluid figure-img"></p>
<figcaption>The Curse of Dimensionality</figcaption>
</figure>
</div>
</div>
</div>
<p>It takes the data and tries to find a direction (let’s say vector l) such that variance of points projected on vector l is maximum.</p>
<p>This is unsupervised learning. So we don’t need the label of that data set.</p>
<p>Let’s take an example without label.</p>
<section id="example-1" class="level1">
<h1>Example 1</h1>
<p>In our very basic fictious example, we have 3 variables.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Python</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"></span>
<span id="cb1-3">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">english =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>), </span>
<span id="cb1-4">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">math =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>), </span>
<span id="cb1-5">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">art =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span>
<span id="cb1-6"></span>
<span id="cb1-7">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 3
  english  math   art
    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1      90    60    90
2      90    90    30
3      60    60    60
4      60    60    90
5      30    30    30</code></pre>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-2"></span>
<span id="cb3-3">df_py <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'english'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>], </span>
<span id="cb3-4">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'math'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>], </span>
<span id="cb3-5">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'art'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>]})</span>
<span id="cb3-6"></span>
<span id="cb3-7">df_py</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   english  math  art
0       90    60   90
1       90    90   30
2       60    60   60
3       60    60   90
4       30    30   30</code></pre>
</div>
</div>
</div>
</div>
</div>
<section id="step-1-find-the-mean-of-each-variable" class="level2">
<h2 class="anchored" data-anchor-id="step-1-find-the-mean-of-each-variable">Step 1: find the mean of each variable</h2>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Python</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), mean))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  english  math   art
    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1      66    60    60</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or another way</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(df))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>english    math     art 
     66      60      60 </code></pre>
</div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df_py.mean()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>english    66.0
math       60.0
art        60.0
dtype: float64</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="step-2-compute-the-covariance-matrix-of-the-whole-dataset" class="level2">
<h2 class="anchored" data-anchor-id="step-2-compute-the-covariance-matrix-of-the-whole-dataset">Step 2: Compute the Covariance matrix of the whole dataset</h2>
<p>As a reminder, we find the covariance between 2 variables <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>,</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X, Y</annotation></semantics></math> as <math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>v</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>X</mi><mo>,</mo><mi>Y</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo>⋅</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mo stretchy="true" form="prefix">(</mo><mrow><mo stretchy="true" form="prefix">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover><mi>x</mi><mo accent="true">‾</mo></mover><mo stretchy="true" form="postfix">)</mo></mrow><mrow><mo stretchy="true" form="prefix">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover><mi>y</mi><mo accent="true">‾</mo></mover><mo stretchy="true" form="postfix">)</mo></mrow><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">cov(X, Y) = \frac{1}{n-1} \cdot \sum_{i=1}^{n} \left( (x_i - \bar{x}) (y_i - \bar{y}) \right)</annotation></semantics></math></p>
<p>So let’s show the covariance of English and Math.</p>
<ul>
<li>Mean of english <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><mn>66</mn></mrow><annotation encoding="application/x-tex">= 66</annotation></semantics></math></li>
<li>Mean of math <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><mn>60</mn></mrow><annotation encoding="application/x-tex">= 60</annotation></semantics></math> <math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mfrac><mrow><mrow><mo stretchy="true" form="prefix">(</mo><mn>90</mn><mo>−</mo><mn>66</mn><mo stretchy="true" form="postfix">)</mo></mrow><mo>⋅</mo><mrow><mo stretchy="true" form="prefix">(</mo><mn>60</mn><mo>−</mo><mn>60</mn><mo stretchy="true" form="postfix">)</mo></mrow><mo>+</mo><mrow><mo stretchy="true" form="prefix">(</mo><mn>90</mn><mo>−</mo><mn>66</mn><mo stretchy="true" form="postfix">)</mo></mrow><mo>⋅</mo><mrow><mo stretchy="true" form="prefix">(</mo><mn>90</mn><mo>−</mo><mn>60</mn><mo stretchy="true" form="postfix">)</mo></mrow><mo>+</mo><mrow><mo stretchy="true" form="prefix">(</mo><mn>60</mn><mo>−</mo><mn>66</mn><mo stretchy="true" form="postfix">)</mo></mrow><mo>⋅</mo><mrow><mo stretchy="true" form="prefix">(</mo><mn>60</mn><mo>−</mo><mn>60</mn><mo stretchy="true" form="postfix">)</mo></mrow><mo>+</mo><mrow><mo stretchy="true" form="prefix">(</mo><mn>60</mn><mo>−</mo><mn>66</mn><mo stretchy="true" form="postfix">)</mo></mrow><mo>⋅</mo><mrow><mo stretchy="true" form="prefix">(</mo><mn>60</mn><mo>−</mo><mn>60</mn><mo stretchy="true" form="postfix">)</mo></mrow><mo>+</mo><mrow><mo stretchy="true" form="prefix">(</mo><mn>30</mn><mo>−</mo><mn>66</mn><mo stretchy="true" form="postfix">)</mo></mrow><mo>⋅</mo><mrow><mo stretchy="true" form="prefix">(</mo><mn>30</mn><mo>−</mo><mn>60</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><mn>4</mn></mfrac><annotation encoding="application/x-tex">\frac{(90 - 66) \cdot (60-60) + (90 - 66) \cdot (90-60) + (60 - 66) \cdot (60-60) + (60 - 66) \cdot (60-60) + (30 - 66) \cdot (30-60)}{4}</annotation></semantics></math> <math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mfrac><mrow><mn>24</mn><mo>⋅</mo><mn>0</mn><mo>+</mo><mn>24</mn><mo>⋅</mo><mn>30</mn><mo>+</mo><mi>−</mi><mn>6</mn><mo>⋅</mo><mn>0</mn><mo>+</mo><mi>−</mi><mn>6</mn><mo>⋅</mo><mn>0</mn><mo>+</mo><mi>−</mi><mn>36</mn><mo>⋅</mo><mi>−</mi><mn>30</mn></mrow><mn>4</mn></mfrac><annotation encoding="application/x-tex">\frac{24 \cdot 0 + 24 \cdot 30 + -6 \cdot 0 + -6 \cdot 0 + -36 \cdot -30}{4}</annotation></semantics></math> <math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mn>0</mn><mo>+</mo><mn>720</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>1080</mn></mrow><mn>4</mn></mfrac><mo>=</mo><mfrac><mn>1800</mn><mn>4</mn></mfrac><mo>=</mo><mn>450</mn></mrow><annotation encoding="application/x-tex">\frac{0 + 720 + 0 + 0 + 1080}{4} = \frac{1800}{4} = 450</annotation></semantics></math></li>
</ul>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Python</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cov</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        english math art
english     630  450 225
math        450  450   0
art         225    0 900</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or using matrix</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cov</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(df))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        english math art
english     630  450 225
math        450  450   0
art         225    0 900</code></pre>
</div>
</div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">df_py.cov()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         english   math    art
english    630.0  450.0  225.0
math       450.0  450.0    0.0
art        225.0    0.0  900.0</code></pre>
</div>
</div>
</div>
</div>
</div>
<p>Using matrices, another way to compute the covariance matrix is the following:</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><msup><mrow><mo stretchy="true" form="prefix">(</mo><mtext mathvariant="bold">𝐗</mtext><mo>−</mo><mover><mi>X</mi><mo accent="true">‾</mo></mover><mo stretchy="true" form="postfix">)</mo></mrow><mi>T</mi></msup><mo>⋅</mo><mrow><mo stretchy="true" form="prefix">(</mo><mtext mathvariant="bold">𝐗</mtext><mo>−</mo><mover><mi>X</mi><mo accent="true">‾</mo></mover><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">\frac{1}{n-1} \left( \textbf{X} - \bar{X} \right)^T \cdot \left( \textbf{X} - \bar{X} \right)</annotation></semantics></math></p>
<p>Remember, the positive covariance between math and english indicates that both subject covary in the same direction. And the null covariance between math and art indicates that there is no predictable relationship between the art and math subject.</p>
</section>
<section id="step-3-compute-the-eigenvectors-and-eigenvalues-of-the-covariance-matrix" class="level2">
<h2 class="anchored" data-anchor-id="step-3-compute-the-eigenvectors-and-eigenvalues-of-the-covariance-matrix">Step 3: Compute the eigenvectors and eigenvalues of the covariance matrix</h2>
<p>Recall that the eigenvectors satifies the following relationship:</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="bold">𝐀</mtext><mo>⋅</mo><mi>v</mi><mo>=</mo><mi>λ</mi><mo>⋅</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">\textbf{A}\cdot v = {\lambda} \cdot v</annotation></semantics></math> <math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo stretchy="true" form="prefix">(</mo><mtext mathvariant="bold">𝐀</mtext><mo>−</mo><mi>λ</mi><mo stretchy="true" form="postfix">)</mo></mrow><mi>v</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\left( \textbf{A} - \lambda \right) v = 0</annotation></semantics></math> <math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mrow><mo stretchy="true" form="prefix">(</mo><mtext mathvariant="bold">𝐀</mtext><mo>−</mo><mi>λ</mi><mtext mathvariant="bold">𝐈</mtext><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">det\left( \textbf{A} - \lambda \textbf{I} \right) = 0</annotation></semantics></math></p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Python</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eigen</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cov</span>(df)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>eigen() decomposition
$values
[1] 1137.58744  786.38798   56.02458

$vectors
           [,1]       [,2]       [,3]
[1,] -0.6558023 -0.3859988  0.6487899
[2,] -0.4291978 -0.5163664 -0.7410499
[3,] -0.6210577  0.7644414 -0.1729644</code></pre>
</div>
</div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb19-2"></span>
<span id="cb19-3">df_py_cov_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_py.cov()</span>
<span id="cb19-4"></span>
<span id="cb19-5">eigenvalues, eigenvectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.eig(df_py_cov_mat)</span>
<span id="cb19-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(eigenvalues)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[  56.02457535 1137.5874413   786.38798335]</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(eigenvectors)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[ 0.6487899  -0.65580225 -0.3859988 ]
 [-0.74104991 -0.4291978  -0.51636642]
 [-0.17296443 -0.62105769  0.7644414 ]]</code></pre>
</div>
</div>
</div>
</div>
</div>
<p>It is serendipity that the first eigenvectors is the highest (aka explained most of the variance). The second one is the second highest and third one is last.</p>
<p>This is a 3D space with each eigen vector being orthogonal to the other. In an N-dimensional space, each eigenvectors are orthogonal.</p>
<p>To find the percentage of variance expalained by the eigenvalue <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>k</mi><annotation encoding="application/x-tex">k</annotation></semantics></math> (where <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>k</mi><annotation encoding="application/x-tex">k</annotation></semantics></math> is one of the dimension), we compute:</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mfrac><msub><mi>λ</mi><mi>k</mi></msub><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover></mfrac><annotation encoding="application/x-tex">\frac{\lambda_k}{\sum_{i=1}^{n}}</annotation></semantics></math></p>
</section>
<section id="step-4-compute-the-new-data-frame-based-on-the-principal-components." class="level2">
<h2 class="anchored" data-anchor-id="step-4-compute-the-new-data-frame-based-on-the-principal-components.">Step 4: Compute the new data frame based on the principal components.</h2>
<p>To transform the eigenvectors to the new subspace we used: <math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mtext mathvariant="bold">𝐖</mtext><mi>t</mi></msup><mo>⋅</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">\textbf{W}^t \cdot X</annotation></semantics></math></p>
<ul>
<li><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>X</mi><annotation encoding="application/x-tex">X</annotation></semantics></math> is our initial data matrix. Our df in the above steps</li>
<li><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msup><mtext mathvariant="bold">𝐖</mtext><mi>t</mi></msup><annotation encoding="application/x-tex">\textbf{W}^t</annotation></semantics></math> is the transpose of the eigenvector matrix.</li>
</ul>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-5-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-1" aria-controls="tabset-5-1" aria-selected="true">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-5-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-2" aria-controls="tabset-5-2" aria-selected="false">Python</a></li></ul>
<div class="tab-content">
<div id="tabset-5-1" class="tab-pane active" aria-labelledby="tabset-5-1-tab">

</div>
<div id="tabset-5-2" class="tab-pane" aria-labelledby="tabset-5-2-tab">

</div>
</div>
</div>
</section>
</section>
<section id="another-example." class="level1">
<h1>Another Example.</h1>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-6-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-6-1" aria-controls="tabset-6-1" aria-selected="true">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-6-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-6-2" aria-controls="tabset-6-2" aria-selected="false">Python</a></li></ul>
<div class="tab-content">
<div id="tabset-6-1" class="tab-pane active" aria-labelledby="tabset-6-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">x_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb23-2">x_mat[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.3</span>)</span>
<span id="cb23-3">x_mat[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.2</span>)</span></code></pre></div>
</div>
</div>
<div id="tabset-6-2" class="tab-pane" aria-labelledby="tabset-6-2-tab">

</div>
</div>
</div>
<p>Find the covariance matrix.<br>
Remember we d</p>


</section>

 ]]></description>
  <category>ML</category>
  <category>PCA</category>
  <category>Covariance</category>
  <guid>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/10-PCA/</guid>
  <pubDate>Sat, 05 Oct 2024 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Logistic Regression</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/02-logistic-regression/</link>
  <description><![CDATA[ 





<p>Logistic Regression predict categorical variables based on quantitative data. It does this using the <strong>logit</strong> function</p>
<p><img src="https://latex.codecogs.com/png.latex?logit%20=%20log(oods)%20=%20w_0+w_1x_1+w_2x_2+%20%5Ccdots%20+%20w_nx_n"></p>
<p>The logit is the log of the odds. This can be mapped back into a probability (with the sigmoid function) and then back to a class.</p>
<p>The logistic sigmoid is defined as <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cfrac%7B1%7D%7B1+e%5E%7B-x%7D%7D%20=%20%5Cfrac%7Be%5Ex%7D%7Be%5Ex+1%7D"> The sigmoid allows to transform values from <img src="https://latex.codecogs.com/png.latex?-%5Cinfty%20%5Clt%20x%20%5Clt%20%5Cinfty"> into a <img src="https://latex.codecogs.com/png.latex?-1%20%3C%20f(x)%20%3C%201"> interval.</p>
<p>Assume p(x) be the linear function. However, the problem is that p is the probability that should vary from 0 to 1 whereas p(x) is an unbounded linear equation. To address this problem, let us assume, log p(x) be a linear function of x and further, to bound it between a range of (0,1), we will use logit transformation.</p>
<p><img src="https://latex.codecogs.com/png.latex?log%20%5Cleft(%20%5Cfrac%7Bp(x)%7D%7B1-p(x)%7D%20%5Cright)%20=%20%5Calpha_0%20+%20%5Calpha%20%5Ccdot%20x"></p>
<p>Solve for <img src="https://latex.codecogs.com/png.latex?p(x)"> using exponential on both sides, isolate <img src="https://latex.codecogs.com/png.latex?p(x)"> and factoringthe coefficient. We get: <img src="https://latex.codecogs.com/png.latex?p(x)%20=%20%5Cfrac%7Be%5E%7B%5Calpha_0%20+%20%5Calpha%20%5Ccdot%20x%7D%7D%7Be%5E%7B%5Calpha_0%20+%20%5Calpha%20%5Ccdot%20x%7D+1%7D"></p>
<p>Since Logistic regression predicts probabilities, we can fit it using likelihood. Therefore, for each training data point x, the predicted class is y. Now, the likelihood can be written as: <img src="https://latex.codecogs.com/png.latex?L(%5Calpha_0,%20%5Calpha)%20=%20%5Cprod_%7Bi=1%7D%5En%20p(x_i)%5E%7By_i%7D%20%5Cleft(1-p(x_i)%20%5Cright)%5E%7B1-y_i%7D"> Take log on both side, we can transform that product into a sum. <img src="https://latex.codecogs.com/png.latex?Log(L(%5Calpha_0,%20%5Calpha))%20=%20%5Csum_%7Bi=1%7D%5En%20y_i%20%5Ccdot%20log(p(x_i))%20+%20(1-y_i)%20%5Ccdot%20log((1-p(x_i)%20)"></p>
<section id="examples" class="level1">
<h1>Examples</h1>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"></span>
<span id="cb1-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/XME.csv'</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, parse_dates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dayfirst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-6">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sort_index(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-7">df.info()</span>
<span id="cb1-8">df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10">plt.plot(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>])</span>
<span id="cb1-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
Index: 4500 entries, 2006-06-22 to 2024-05-08
Data columns (total 12 columns):
 #   Column            Non-Null Count  Dtype  
---  ------            --------------  -----  
 0   open              4500 non-null   float64
 1   high              4500 non-null   float64
 2   low               4500 non-null   float64
 3   close             4500 non-null   float64
 4   adjClose          4500 non-null   float64
 5   volume            4500 non-null   int64  
 6   unadjustedVolume  4500 non-null   int64  
 7   change            4500 non-null   float64
 8   changePercent     4500 non-null   float64
 9   vwap              4500 non-null   float64
 10  label             4500 non-null   object 
 11  changeOverTime    4500 non-null   float64
dtypes: float64(9), int64(2), object(1)
memory usage: 457.0+ KB</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/02-logistic-regression/index_files/figure-html/cell-2-output-2.png" width="581" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.describe().T</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checking for missing values</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#df.isnull.sum()</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count</th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">std</th>
<th data-quarto-table-cell-role="th">min</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">max</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">open</td>
<td>4500.0</td>
<td>4.224556e+01</td>
<td>1.496800e+01</td>
<td>11.7800</td>
<td>3.001000e+01</td>
<td>4.150000e+01</td>
<td>5.173500e+01</td>
<td>9.535000e+01</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">high</td>
<td>4500.0</td>
<td>4.279536e+01</td>
<td>1.514187e+01</td>
<td>12.1900</td>
<td>3.040000e+01</td>
<td>4.195500e+01</td>
<td>5.241250e+01</td>
<td>9.609000e+01</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">low</td>
<td>4500.0</td>
<td>4.160857e+01</td>
<td>1.472447e+01</td>
<td>11.3800</td>
<td>2.963000e+01</td>
<td>4.100500e+01</td>
<td>5.110250e+01</td>
<td>9.353000e+01</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">close</td>
<td>4500.0</td>
<td>4.220901e+01</td>
<td>1.494711e+01</td>
<td>11.9700</td>
<td>2.998750e+01</td>
<td>4.143500e+01</td>
<td>5.175000e+01</td>
<td>9.458000e+01</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">adjClose</td>
<td>4500.0</td>
<td>3.686377e+01</td>
<td>1.241720e+01</td>
<td>10.6000</td>
<td>2.709750e+01</td>
<td>3.530500e+01</td>
<td>4.583000e+01</td>
<td>7.545000e+01</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">volume</td>
<td>4500.0</td>
<td>3.141904e+06</td>
<td>2.199371e+06</td>
<td>0.0000</td>
<td>1.769072e+06</td>
<td>2.725635e+06</td>
<td>4.039529e+06</td>
<td>2.454848e+07</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">unadjustedVolume</td>
<td>4500.0</td>
<td>3.141904e+06</td>
<td>2.199371e+06</td>
<td>0.0000</td>
<td>1.769072e+06</td>
<td>2.725635e+06</td>
<td>4.039529e+06</td>
<td>2.454848e+07</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">change</td>
<td>4500.0</td>
<td>-3.655796e-02</td>
<td>8.801642e-01</td>
<td>-11.2400</td>
<td>-4.200000e-01</td>
<td>-2.001000e-02</td>
<td>3.900000e-01</td>
<td>3.980000e+00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">changePercent</td>
<td>4500.0</td>
<td>-6.299599e-02</td>
<td>2.019533e+00</td>
<td>-13.8100</td>
<td>-1.110000e+00</td>
<td>-5.836411e-02</td>
<td>1.020000e+00</td>
<td>1.414000e+01</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">vwap</td>
<td>4500.0</td>
<td>4.221463e+01</td>
<td>1.493961e+01</td>
<td>11.8625</td>
<td>2.999438e+01</td>
<td>4.150750e+01</td>
<td>5.178875e+01</td>
<td>9.488750e+01</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">changeOverTime</td>
<td>4500.0</td>
<td>-6.299599e-04</td>
<td>2.019533e-02</td>
<td>-0.1381</td>
<td>-1.110000e-02</td>
<td>-5.836411e-04</td>
<td>1.020000e-02</td>
<td>1.414000e-01</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">

</div>
</div>
</div>


</section>

 ]]></description>
  <category>logistic-regression</category>
  <guid>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/02-logistic-regression/</guid>
  <pubDate>Tue, 14 May 2024 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Gradient Descent</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/06-gradient-descent/</link>
  <description><![CDATA[ 





<p>Gradient Descent is an optimization technique used in many Machine Learning algorithms to find the minimum of a function. It does require a convex and differentiable function to ensure we have a minimum. At its core it’s like searching for the lowest valley in a hilly landscape. The idea is to take <strong>small steps</strong> in the <strong>steepest downhill direction</strong> until you reach the lowest point.</p>
<p>Gradient Descent is used to find the parameters of the cost function. Think the parameters in the linear regression for instance.</p>
<section id="basic-gradient-descent" class="level1">
<h1>Basic Gradient Descent</h1>
<p>One of the main disadvantage of gradient descent is getting stuck to a local minimum or a saddle point and not finding the global minimum.</p>
<p>To perform a gradient descent, we need</p>
<ul>
<li>a function</li>
<li>its derivative</li>
<li>a starting point (where do we start going down)</li>
<li>the size of a step (aka <strong>learning rate</strong>)</li>
<li>the number of iterations (aka how many steps do we intend to take)</li>
<li>optionally, we can set a threshold for when we stop the iterative process of going down the hill.</li>
</ul>
<p>Let’s take a quadratic function to start.</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%200.91%20x%5E2%20+%2011x%20-%207"></p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the original function </span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cost_function(x): </span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.91</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the derivative of our function </span></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gradient(x): </span>
<span id="cb1-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.91</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checking our function</span></span>
<span id="cb1-13">cost_function(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>42.67750000000001</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># quick visual check </span></span>
<span id="cb3-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb3-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cost_function(x)</span>
<span id="cb3-4"></span>
<span id="cb3-5">plt.clf()</span>
<span id="cb3-6">plt.plot(x, y)</span>
<span id="cb3-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb3-8">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cost_function(x)'</span>)</span>
<span id="cb3-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Plot of the cost_function(x) vs x'</span>)</span>
<span id="cb3-10">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/06-gradient-descent/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the original function </span></span>
<span id="cb4-6">cost_function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x){</span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.91</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>)</span>
<span id="cb4-8">}</span>
<span id="cb4-9"></span>
<span id="cb4-10">gradient <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.91</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-12">}</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checking our function</span></span>
<span id="cb4-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cost_function</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 42.6775</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># quick visual check </span></span>
<span id="cb6-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, cost_function))</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#xlab('x') + ylab('cost_function(x)') + </span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>,  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cost_function(x)'</span>, </span>
<span id="cb6-9">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Plot of the cost_function(x) vs x'</span>) </span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/06-gradient-descent/index_files/figure-html/r_createFunctions-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
<p>We can now put everything together and define our gradient descent function.</p>
<p><img src="https://latex.codecogs.com/png.latex?x_%7Bn+1%7D%20=%20x_n%20-%20%7BGradient%7D%20%5Cspace%20%5Ccdot%20%5Cspace%20%7BLearning%20%5Cspace%20Rate%7D"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gradient_descent(f, deriv, start, learning_rate, n_iter): </span>
<span id="cb7-2">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start</span>
<span id="cb7-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_iter): </span>
<span id="cb7-4">    grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gradient(x)</span>
<span id="cb7-5">    </span>
<span id="cb7-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we now update x</span></span>
<span id="cb7-7">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grad </span>
<span id="cb7-8">    </span>
<span id="cb7-9">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Minimum value of x: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-10">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Minimum value for our Cost function: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cost_function(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-11"></span>
<span id="cb7-12">gradient_descent(cost_function, gradient, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Minimum value of x: -1.28
Minimum value for our Cost function: -59.000</code></pre>
</div>
</div>
<p>We could change slightly our code to store the iterations for visualization or analysis.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gradient_descent(f, deriv, start, learning_rate, n_iter): </span>
<span id="cb9-2">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start</span>
<span id="cb9-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a list to store values </span></span>
<span id="cb9-4">  cost_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-5">  </span>
<span id="cb9-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_iter): </span>
<span id="cb9-7">    cost <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cost_function(x)</span>
<span id="cb9-8">    grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gradient(x)</span>
<span id="cb9-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update of x</span></span>
<span id="cb9-10">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grad</span>
<span id="cb9-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># append the value of cost to the list</span></span>
<span id="cb9-12">    cost_values.append(cost)</span>
<span id="cb9-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print the progress</span></span>
<span id="cb9-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>: </span>
<span id="cb9-15">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Iteration </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: x = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, cost = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cost<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-16">  </span>
<span id="cb9-17">gradient_descent(cost_function, gradient, </span>
<span id="cb9-18">                 start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(), learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, </span>
<span id="cb9-19">                 n_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Iteration 0: x = 1.2439, cost = -45.1770
Iteration 10: x = 0.4142, cost = -55.6721
Iteration 20: x = -0.1426, cost = -59.4457
Iteration 30: x = -0.5163, cost = -60.5056
Iteration 40: x = -0.7671, cost = -60.5538
Iteration 50: x = -0.9354, cost = -60.2875
Iteration 60: x = -1.0483, cost = -59.9742
Iteration 70: x = -1.1241, cost = -59.7034
Iteration 80: x = -1.1750, cost = -59.4944
Iteration 90: x = -1.2091, cost = -59.3419
Iteration 100: x = -1.2320, cost = -59.2340
Iteration 110: x = -1.2474, cost = -59.1590
Iteration 120: x = -1.2577, cost = -59.1077
Iteration 130: x = -1.2646, cost = -59.0727
Iteration 140: x = -1.2693, cost = -59.0489
Iteration 150: x = -1.2724, cost = -59.0329
Iteration 160: x = -1.2745, cost = -59.0221
Iteration 170: x = -1.2759, cost = -59.0149
Iteration 180: x = -1.2768, cost = -59.0100
Iteration 190: x = -1.2775, cost = -59.0067</code></pre>
</div>
</div>
<p>We could visualize how the process happen. We’ll return the <em>cost_values</em> list for that to our function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the original function </span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cost_function(x): </span>
<span id="cb11-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.91</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>)</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the derivative of our function </span></span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gradient(x): </span>
<span id="cb11-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.91</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gradient_descent(f, deriv, start, learning_rate, n_iter): </span>
<span id="cb11-10">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start</span>
<span id="cb11-11">  cost_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-12">  x_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [start]</span>
<span id="cb11-13">  </span>
<span id="cb11-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_iter): </span>
<span id="cb11-15">    cost <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cost_function(x)</span>
<span id="cb11-16">    grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gradient(x)</span>
<span id="cb11-17">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grad</span>
<span id="cb11-18">    cost_values.append(cost)</span>
<span id="cb11-19">    x_list.append(x)</span>
<span id="cb11-20">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Iteration </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: x = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, cost = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(i, x, cost))</span>
<span id="cb11-21">      </span>
<span id="cb11-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(x_list)</span>
<span id="cb11-23"></span>
<span id="cb11-24">x_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gradient_descent(cost_function, gradient, </span>
<span id="cb11-25">                          start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb11-26">                          n_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Iteration 0: x = 3.589, cost = 20.590000000000003
Iteration 1: x = 1.109203, cost = -29.33336189
Iteration 2: x = -0.693609419, cost = -52.33438352135981
Iteration 3: x = -2.004254047613, cost = -62.03025153122578
Iteration 4: x = -2.9570926926146512, cost = -65.36576903655549</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb13-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cost_function(x)</span>
<span id="cb13-3"></span>
<span id="cb13-4">plt.clf()</span>
<span id="cb13-5">plt.plot(x, y)</span>
<span id="cb13-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_list) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb13-7">    x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_list[i]</span>
<span id="cb13-8">    y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cost_function(x1)</span>
<span id="cb13-9">    x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_list[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb13-10">    y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cost_function(x2)</span>
<span id="cb13-11">    plt.plot([x1, x2], [y1, y2], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ro--'</span>)</span>
<span id="cb13-12">    plt.text(x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(y1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Label the final cost value</span></span>
<span id="cb13-14">x_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_list[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb13-15">y_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cost_function(x_final)</span>
<span id="cb13-16">plt.text(x_final, y_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(y_final, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb13-17"></span>
<span id="cb13-18">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb13-19">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f(x)'</span>)</span>
<span id="cb13-20">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gradient Descent for f(x)'</span>)</span>
<span id="cb13-21">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/06-gradient-descent/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="stochastic-gradient-descent" class="level1">
<h1>Stochastic Gradient Descent</h1>


</section>

 ]]></description>
  <category>Gradient Descent</category>
  <category>Regression</category>
  <guid>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/06-gradient-descent/</guid>
  <pubDate>Thu, 25 Apr 2024 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Regularized Regressions</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/04-lasso-ridge/</link>
  <description><![CDATA[ 




<p>Linear models obtained with minimizing the SSR (Sum of Square Residuals) are great and easy to grasp. However, rarely all conditions are met and/or as the number of predictors increased, conditions of linear regression start to break: multicollinearity between variables, breaking of homoskedasticity, etc.) To address these issues, we introduce regularized regression where the coefficient of the predictors (aka <strong>the estimated coefficient</strong>) received a given penalty. The goal of that penalty is to reduce the variance of the model (with many predictors models tends to overfit the data and performed poorly on test data).</p>
<p>The objective functions of reguliarized models are the same as for OLS except they have a penalty term. Hence, it becomes <img src="https://latex.codecogs.com/png.latex?minimize%20(SSR%20+%20P)"></p>
<section id="ridge-regression" class="level1">
<h1>Ridge Regression</h1>
<p>For Ridge Regression the additional penalty term is <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%5Csum_%7Bj=1%7D%5E%7Bp%7D%20%5Cbeta_j%5E2"> The loss function becomes <img src="https://latex.codecogs.com/png.latex?minimize%20%5Cleft(%20SSR%20+%20%5Clambda%20%5Csum_%7Bj=1%7D%5E%7Bp%7D%20%5Cbeta_j%5E2%20%5Cright)"></p>
<p><span id="eq-ridge_loss_function"><img src="https://latex.codecogs.com/png.latex?minimize%20%5Cleft(%20%5Csum_%7Bi=1%7D%5E%7Bn%7D(y_i%20-%20%5Chat%7By_i%7D)%5E2%20+%20%5Clambda%20%5Csum_%7Bj=1%7D%5E%7Bp%7D%20%5Cbeta_j%5E2%20%5Cright)%20%5Ctag%7B1%7D"></span></p>
<p>The cost function has a dual goal: minimize the sum of the residuals and minimize the predictors coeffecients for a given <img src="https://latex.codecogs.com/png.latex?%5Clambda">.</p>
<div class="callout callout-style-simple callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
indexing and notation
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>The <img src="https://latex.codecogs.com/png.latex?i"> index refers to the number of observations. <img src="https://latex.codecogs.com/png.latex?y_i"> is the actual ‘target’ value of * the <img src="https://latex.codecogs.com/png.latex?i_th"> observation. <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D_i"> is the predicted value for the <img src="https://latex.codecogs.com/png.latex?i_th"> observation.<br>
</li>
<li>The <img src="https://latex.codecogs.com/png.latex?j"> index refers to the number of predictors.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta_j"> is the coefficient of the predictors <img src="https://latex.codecogs.com/png.latex?j"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Clambda"> is the Ridge Penalty hyper-parameter. Note that when <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is 0, there is no more Regularized Regression and it becomes just a normal OLS regression.</li>
</ul>
</div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%5Clambda"> can take any real values from <img src="https://latex.codecogs.com/png.latex?0"> to <img src="https://latex.codecogs.com/png.latex?%5Cinfty">. As <img src="https://latex.codecogs.com/png.latex?%5Clambda"> increases, it will forces the <img src="https://latex.codecogs.com/png.latex?%5Cbeta_j"> parameters toward 0 in order to minimize the loss function.</p>
<div class="callout callout-style-simple callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Scaling
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the modeling process, we need to normalize all the predictors otherwise the one with higher values will have a bigger incident no the penalty terms.</p>
</div>
</div>
<p>Some advantage of Ridge (over Lasso)</p>
<p><strong>More stable</strong>: Ridge regression shrinks all the coefficients towards zero by a small amount, but it never sets them to zero. This makes the model more stable and less prone to variations in the data compared to Lasso. <strong>Computationally faster</strong>: The calculations involved in ridge regression are simpler than Lasso, making it faster to train the model. <strong>Better for correlated features</strong>: When you have many correlated features, Lasso might set some coefficients to zero arbitrarily. Ridge regression avoids this by shrinking all coefficients together, which can be beneficial in such cases.</p>
<p>Disadvantages of Ridge Not ideal for feature selection as it reduces all the predictors parameters together.</p>
</section>
<section id="lasso-regression" class="level1">
<h1>Lasso Regression</h1>
<p>Lasso Regression uses a <strong>L1-style penalty</strong> in the cost function: <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%5Csum_%7Bj=1%7D%5E%7Bp%7D%20%5Clvert%20%5Cbeta_j%20%5Crvert"><br>
The loss function becomes <img src="https://latex.codecogs.com/png.latex?minimize%20%5Cleft(%20SSR%20+%20%5Clambda%20%5Csum_%7Bj=1%7D%5E%7Bp%7D%20%5Clvert%20%5Cbeta_j%20%5Crvert%20%5Cright)"> <span id="eq-ridge_loss_function"><img src="https://latex.codecogs.com/png.latex?minimize%20%5Cleft(%20%5Csum_%7Bi=1%7D%5E%7Bn%7D(y_i%20-%20%5Chat%7By_i%7D)%5E2%20+%20%5Clambda%20%5Csum_%7Bj=1%7D%5E%7Bp%7D%20%5Clvert%20%5Cbeta_j%20%5Crvert%20%5Cright)%20%5Ctag%7B2%7D"></span></p>
<p>During gradient descent optimization, the Lasso penalty shrunk weights close to zero or zero. Those weights which are shrunken to zero eliminates the features present in the hypothetical function. Due to this, irrelevant features don’t participate in the predictive model. This penalization of weights makes the hypothesis more simple which encourages the sparsity ( model with few parameters ).</p>
<p>Increasing <img src="https://latex.codecogs.com/png.latex?%5Clambda"> has also the effect of showing which predictors matter the most (as some predictors will be shrunk close to 0). This is one of the main advantage of Lasso in that some predictors parameters might be reduce to 0 (or close to 0) and it will make the model less complex and hence better. And for that reason as well, Lasso is also <strong>robust to multicollinearity</strong>.</p>
</section>
<section id="elastic-net-regression" class="level1">
<h1>Elastic Net Regression</h1>
<p>Elastic Net is adding a double penalty to the normal Regression cost function. And both penalty are in proportion of each other. Elastic Net combine both a L1 and L2 style penalty.</p>
<p><img src="https://latex.codecogs.com/png.latex?minimize%20%5Cleft(%20%5Csum_%7Bi=1%7D%5E%7Bn%7D(y_i%20-%20%5Chat%7By_i%7D)%5E2%20+%20%5Clambda%20%5Cleft(%20(1-%5Calpha)%20%5Csum_%7Bj=1%7D%5E%7Bp%7D%20%5Clvert%20%5Cbeta_j%20%5Crvert%20+%20%5Calpha%20%5Csum_%7Bj=1%7D%5E%7Bp%7D%20%5Cbeta_j%5E2%20%5Cright)%20%5Cright)"></p>
</section>
<section id="example-in-r-predicting-oil-prices" class="level1">
<h1>Example in R predicting oil prices</h1>


</section>

 ]]></description>
  <category>Regression</category>
  <category>Lasso</category>
  <category>Ridge</category>
  <guid>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/04-lasso-ridge/</guid>
  <pubDate>Sun, 21 Apr 2024 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Defining Success</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/05-metrics/</link>
  <description><![CDATA[ 





<p>When evaluating models for a given ML algorithm, we need to define in advance what would be our metric to measure success. How would we decide if this model performs well or if this model is better than this model? Or even deciding which hyper-parameters to use (aka which ones fine-tune to a better model?)</p>
<p>This post is about defining what is <em>‘best’</em> or <em>‘better’</em> when comparing different <strong>supervised models</strong>. we’ll have 2 main parts: measure of success for regression models and measure of success for classification models.</p>
<p>In ML linguo, we are talking about <strong>Loss functions</strong>: how to measure and minimize the errors between the predicted (<img src="https://latex.codecogs.com/png.latex?%5Chat%20y">) and the actual values (<img src="https://latex.codecogs.com/png.latex?y">). So the loss function is used to measure the error on a single observation. On the other hand, the <strong>Cost Function</strong> is the average loss over the entire dataset.</p>
<section id="regression-models" class="level1">
<h1>Regression models</h1>
<p>When modeling for regression, we somehow <strong>measure the distance between our prediction and the actual observed value</strong>. When comparing models, we usually want to keep the model which give the smallest sum of distance.</p>
<p>It has to be noted that quite a few of these concepts have deeper connections in ML as they are not only ‘success’ metrics but also loss functions of ML algorithms.</p>
<section id="rmse" class="level2">
<h2 class="anchored" data-anchor-id="rmse">RMSE</h2>
<p>This is probably the most well-known measure when comparing regression models. Because we are squaring the distance between the predicted and the observed, this penalizes predicted values that are far off the real values. Hence this measures is used when we want to avoid ‘outliers’ predictions (prediction that are far off.)</p>
<p><img src="https://latex.codecogs.com/png.latex?RMSE%20=%20%5Csqrt%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D(y_i%20-%20%5Chat%7By%7D_i)%5E2%7D%7Bn%7D"></p>
<p>The SSE <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5E%7Bn%7D(y_i%20-%20%5Chat%7By%7D_i)%5E2"> (aka sum of square error, aka without square root and average) is also the loss function in the <a href="../../../posts/machine-learning-part1/03-linear-regression/index.html">linear regression algorithm</a>. It is a convex function; hence we can find a minimum; or better than solving partial derivatives, one can use <a href="../../../posts/machine-learning-part1/06-gradient-descent/index.html">Gradient Descent</a> (more feasible/practical when it comes to ML).</p>
</section>
<section id="mae" class="level2">
<h2 class="anchored" data-anchor-id="mae">MAE</h2>
<p>With <strong>Mean Absolute Error</strong>, we just take the average of the errors. Useful when we don’t really care if predictions is far off from the observed data.</p>
<p><img src="https://latex.codecogs.com/png.latex?MAE%20=%20%5Cfrac%20%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%20%5Clvert%20y_i%20-%20%5Chat%7By%7D_i%20%5Crvert%7D%7Bn%7D"></p>
<p>Without the averaging process, this is also called the <strong>L1 loss</strong> or <strong>Laplace Loss</strong>. It is robust to outliers (comparing to L2 Loss). But Absolute Error is not smooth (aka not differentiable everywhere). This has implication when using Gradient Descent Algorithms.</p>
</section>
<section id="huber-loss" class="level2">
<h2 class="anchored" data-anchor-id="huber-loss">Huber Loss</h2>
<p>Huber loss is a mixture of MSE and MAE. Kind of the best of both world basically. We define the Huber Loss function using a step wise functions.</p>
<p><img src="https://latex.codecogs.com/png.latex?L_%5Cdelta%20(y,%20f(x))%20=%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%5Cfrac%7B1%7D%7B2%7D%20(y%20-%20f(x))%5E2%20&amp;%20%5Clvert%20y%20-%20f(x)%20%5Crvert%5Cleq%20%5Cdelta%20%5C%5C%0A%20%20%20%20%20%20%5Cdelta%20%5Clvert%20y%20-%20f(x)%20%5Crvert-%5Cfrac%7B1%7D%7B2%7D%20%5Cdelta%5E2%20&amp;%20otherwise%0A%20%20%20%5Cend%7Bcases%7D%0A"></p>
<p>Note how the Huber Loss function require a parameter <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> which acts as a threshold value (usually by default it is 1).</p>
<p>Basically the function says that for value less than <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> uses MSE and for loss values great than <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> uses MAE.</p>
<p>Some advantages of Huber Loss functions:</p>
<ul>
<li>Robust to outliers</li>
<li>differentiable everywhere (even at the junction of the MAE and MSE). Meanings it can be used with Gradient Descent algorithms as well.</li>
<li>The transition from quadratic to linear behaviour in Huber loss results in a smoother optimization landscape compared to MSE. This can prevent issues related to gradient explosions and vanishing gradients, which may occur in certain cases with MSE.</li>
</ul>
<p>The main disadvantage of the Huber Loss function is how to tune that <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> parameter.</p>
</section>
</section>
<section id="classfication-models" class="level1">
<h1>Classfication models</h1>
<section id="type-i-and-type-ii-errors" class="level2">
<h2 class="anchored" data-anchor-id="type-i-and-type-ii-errors">Type I and Type II errors</h2>
<ul>
<li><p>Type I error is the probability of a false positive; it is the probability of falsely rejecting <img src="https://latex.codecogs.com/png.latex?H_0">, the null-hypothesis. The type I error is consistent with the chosen significant level.</p></li>
<li><p>Type II error is the probability of a false negative; it is the probability of NOT rejecting a null-hypothesis that is actually false.</p></li>
</ul>
</section>
<section id="the-log-loss-function" class="level2">
<h2 class="anchored" data-anchor-id="the-log-loss-function">The log-loss function</h2>
<p>The log-loss function is used with logistic regressions.</p>
</section>
<section id="accuracy" class="level2">
<h2 class="anchored" data-anchor-id="accuracy">Accuracy</h2>
<p>Shortcomings:</p>
<ul>
<li>for imbalanced dataset, we can have good accuracy by just predicting most observation with the most frequent class. For instance in the case of a rare disease or big financial meltdown, we can just predict</li>
</ul>
</section>
<section id="precision" class="level2">
<h2 class="anchored" data-anchor-id="precision">Precision</h2>
<p>If you call it true, is it indeed true? In other words, the proportion of predicted positive that are actually positive.</p>
</section>
<section id="recall" class="level2">
<h2 class="anchored" data-anchor-id="recall">Recall</h2>
<p>If there is a positive, did the model predict a positive.</p>
</section>
<section id="f1-score" class="level2">
<h2 class="anchored" data-anchor-id="f1-score">F1 score</h2>
<p>It is the <strong>harmonic mean</strong> of both precision and recall. The harmonic mean penalizes model that have very low precision or recall. Which wouldn’t be the case with arithmetic mean.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B2%20%5Ccdot%20Precision%20%5Ccdot%20Recall%7D%7BPrecision%20+%20Recall%7D"></p>
</section>
<section id="auc-roc-curve" class="level2">
<h2 class="anchored" data-anchor-id="auc-roc-curve">AUC &amp; ROC Curve</h2>
<p>need to get the prediction as a probability</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(yardstick)</span></code></pre></div>
</div>


</section>
</section>

 ]]></description>
  <category>sklearn</category>
  <category>tidymodel</category>
  <guid>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/05-metrics/</guid>
  <pubDate>Mon, 15 Apr 2024 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Xgboost</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/machine-learning-part2/xgboost/</link>
  <description><![CDATA[ 





<p>Using Xgboost from a quant perspective. We do a whole cycle of model building on a financial time-series. We’ll again show how to do it with both framework <em>Sklearn</em> for Python and <em>tidymodel</em> for R.</p>
<p>We have taken a stock, but this can be applied on an index, or commodity futures, etc.</p>
<section id="setting-up-the-data-frame" class="level1">
<h1>Setting up the data frame</h1>
<p>We are just loading the data set and doing the initial cleaning so the features engineering can be achieved smoothly.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell" data-hash="index_cache/html/py_setting_up_5e3c8b246daa56a3aaec0117b59459b5">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt </span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"></span>
<span id="cb1-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/AA.csv'</span>)</span>
<span id="cb1-6">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>])</span>
<span id="cb1-7">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sort_values(by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>, inplace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-8">df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'low'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volume'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adjClose'</span>]]</span>
<span id="cb1-11"></span>
<span id="cb1-12">df.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             open   high    low  close   volume  adjClose
date                                                     
2001-01-02  80.50  80.95  76.60  77.50  1592010     57.23
2001-01-03  77.50  80.50  75.24  78.55  2011985     58.01
2001-01-04  78.55  81.25  77.65  81.10  1992468     59.89
2001-01-05  81.10  81.70  78.85  79.60  1623845     58.78
2001-01-08  79.60  85.91  79.00  80.80  3073616     59.67</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.describe()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              open         high  ...        volume     adjClose
count  5821.000000  5821.000000  ...  5.821000e+03  5821.000000
mean     46.372343    47.097133  ...  6.519558e+06    40.404558
std      24.755757    25.075361  ...  5.452542e+06    18.945874
min       5.500000     5.950000  ...  4.254680e+05     5.360000
25%      24.990000    25.420000  ...  2.656970e+06    23.620000
50%      38.260000    38.780000  ...  5.129900e+06    36.270000
75%      69.210000    69.980000  ...  8.773242e+06    56.910000
max     115.010000   117.190000  ...  1.007518e+08    96.360000

[8 rows x 6 columns]</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df.isnull().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>open        0
high        0
low         0
close       0
volume      0
adjClose    0
dtype: int64</code></pre>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell" data-hash="index_cache/html/r_setting_up_762b7e82dae93f30220a6b4f78c7075c">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(skimr)</span>
<span id="cb7-4"></span>
<span id="cb7-5">dfr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/AA.csv'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(date, open, high, low, close, volume, adjClose)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">skim</span>(dfr)</span></code></pre></div>
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<caption>Data summary</caption>
<tbody>
<tr class="odd">
<td style="text-align: left;">Name</td>
<td style="text-align: left;">dfr</td>
</tr>
<tr class="even">
<td style="text-align: left;">Number of rows</td>
<td style="text-align: left;">5821</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Number of columns</td>
<td style="text-align: left;">7</td>
</tr>
<tr class="even">
<td style="text-align: left;">_______________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Column type frequency:</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">Date</td>
<td style="text-align: left;">1</td>
</tr>
<tr class="odd">
<td style="text-align: left;">numeric</td>
<td style="text-align: left;">6</td>
</tr>
<tr class="even">
<td style="text-align: left;">________________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Group variables</td>
<td style="text-align: left;">None</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: Date</strong></p>
<table class="caption-top table table-sm table-striped small">
<colgroup>
<col style="width: 17%">
<col style="width: 12%">
<col style="width: 17%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: left;">min</th>
<th style="text-align: left;">max</th>
<th style="text-align: left;">median</th>
<th style="text-align: right;">n_unique</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">date</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">2001-01-02</td>
<td style="text-align: left;">2024-02-22</td>
<td style="text-align: left;">2012-07-27</td>
<td style="text-align: right;">5821</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: numeric</strong></p>
<table class="caption-top table table-sm table-striped small">
<colgroup>
<col style="width: 11%">
<col style="width: 8%">
<col style="width: 11%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 8%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 10%">
<col style="width: 4%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: right;">sd</th>
<th style="text-align: right;">p0</th>
<th style="text-align: right;">p25</th>
<th style="text-align: right;">p50</th>
<th style="text-align: right;">p75</th>
<th style="text-align: right;">p100</th>
<th style="text-align: left;">hist</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">open</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">46.37</td>
<td style="text-align: right;">24.76</td>
<td style="text-align: right;">5.50</td>
<td style="text-align: right;">24.99</td>
<td style="text-align: right;">38.26</td>
<td style="text-align: right;">69.21</td>
<td style="text-align: right;">115.01</td>
<td style="text-align: left;">▇▇▃▅▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">high</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">47.10</td>
<td style="text-align: right;">25.08</td>
<td style="text-align: right;">5.95</td>
<td style="text-align: right;">25.42</td>
<td style="text-align: right;">38.78</td>
<td style="text-align: right;">69.98</td>
<td style="text-align: right;">117.19</td>
<td style="text-align: left;">▇▇▃▅▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">low</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">45.57</td>
<td style="text-align: right;">24.38</td>
<td style="text-align: right;">5.16</td>
<td style="text-align: right;">24.53</td>
<td style="text-align: right;">37.72</td>
<td style="text-align: right;">68.03</td>
<td style="text-align: right;">111.88</td>
<td style="text-align: left;">▇▇▃▅▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">close</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">46.33</td>
<td style="text-align: right;">24.74</td>
<td style="text-align: right;">5.48</td>
<td style="text-align: right;">25.01</td>
<td style="text-align: right;">38.26</td>
<td style="text-align: right;">69.04</td>
<td style="text-align: right;">113.78</td>
<td style="text-align: left;">▇▇▃▅▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">volume</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">6519558.18</td>
<td style="text-align: right;">5452542.48</td>
<td style="text-align: right;">425468.00</td>
<td style="text-align: right;">2656970.00</td>
<td style="text-align: right;">5129900.00</td>
<td style="text-align: right;">8773242.00</td>
<td style="text-align: right;">100751769.00</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">adjClose</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">40.40</td>
<td style="text-align: right;">18.95</td>
<td style="text-align: right;">5.36</td>
<td style="text-align: right;">23.62</td>
<td style="text-align: right;">36.27</td>
<td style="text-align: right;">56.91</td>
<td style="text-align: right;">96.36</td>
<td style="text-align: left;">▆▇▅▅▁</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="feature-engineering" class="level1">
<h1>Feature engineering</h1>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="cell" data-hash="index_cache/html/unnamed-chunk-3_96f60ca94c4ccb24a60ae52669086b9d">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'returns'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adjClose'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adjClose'</span>].shift(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb8-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ret_1m'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'returns'</span>].rolling(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb8-3"></span>
<span id="cb8-4">feature_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">81</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): </span>
<span id="cb8-7">  df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ret_'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(r)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'returns'</span>].rolling(r).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb8-8">  df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'std_'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(r)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'returns'</span>].rolling(r).std()</span>
<span id="cb8-9">  feature_list.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ret_'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(r))</span>
<span id="cb8-10">  feature_list.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'std_'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(r))</span>
<span id="cb8-11"></span>
<span id="cb8-12">df1a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df</span>
<span id="cb8-13"></span>
<span id="cb8-14">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_c'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>]</span>
<span id="cb8-15">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_l'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'low'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>]</span>
<span id="cb8-16">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ret_21d'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>].shift(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>))</span>
<span id="cb8-17">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'roll_sd_ret21d_1Y'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ret_21d'</span>].rolling(window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span>).std()</span>
<span id="cb8-18">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volum_sma200'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volume'</span>].rolling(window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>).mean()</span>
<span id="cb8-19">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perc_above_volu_sma200'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volume'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volum_sma200'</span>])</span>
<span id="cb8-20">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'roll_sd_volum_1Y'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volume'</span>].rolling(window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span>).std()</span>
<span id="cb8-21">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma50'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>].rolling(window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>).mean()</span>
<span id="cb8-22">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perc_above_sma50'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma50'</span>])</span>
<span id="cb8-23">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma200'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>].rolling(window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>).mean()</span>
<span id="cb8-24">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perc_above_sma200'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma200'</span>])</span>
<span id="cb8-25">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'roll_corr_sma50_sma200'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma200'</span>].rolling(window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span>).corr(df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma50'</span>])</span>
<span id="cb8-26"></span>
<span id="cb8-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setting up a target variable. </span></span>
<span id="cb8-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is the stock above 5% in 2 weeks time. </span></span>
<span id="cb8-29">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>].shift(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-30"></span>
<span id="cb8-31">df1a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'low'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adjClose'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volume'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma50'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma200'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volum_sma200'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'returns'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-32">df1a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a.dropna()</span>
<span id="cb8-33"></span>
<span id="cb8-34">target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>]</span>
<span id="cb8-35">df1a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-36"></span>
<span id="cb8-37"></span>
<span id="cb8-38">df.dropna(inplace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)  </span>
<span id="cb8-39"></span>
<span id="cb8-40">df1a.values</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>array([[ 0.15564846,  0.21637398,  0.04071166, ...,  0.05192485,
        -0.27383066,  0.86749277],
       [ 0.1761608 ,  0.22536981,  0.03979403, ...,  0.03793276,
        -0.28789777,  0.87185623],
       [ 0.123086  ,  0.19948936,  0.0422375 , ...,  0.00811607,
        -0.31777658,  0.87606062],
       ...,
       [-0.03425118, -0.09976226,  0.04401878, ..., -0.09835741,
        -0.12808572,  0.89240416],
       [-0.05395427,  0.04088161,  0.03663959, ..., -0.05392038,
        -0.0805411 ,  0.88992296],
       [-0.06992937,  0.00469569,  0.03579207, ..., -0.06330803,
        -0.08669331,  0.8874239 ]])</code></pre>
</div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">

</div>
</div>
</div>
</section>
<section id="base-model" class="level1">
<h1>Base Model</h1>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="cell" data-hash="index_cache/html/unnamed-chunk-5_2f1c487307f28582273edae61f229fd8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (train_test_split, RandomizedSearchCV, TimeSeriesSplit)</span>
<span id="cb10-2"></span>
<span id="cb10-3">x_train, x_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df1a, target, test_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, shuffle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Train set size is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and test set size is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_test)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Train set size is 4296 and test set size is 1075</code></pre>
</div>
</div>
<p>Let’s now fit a basic model without any tuning</p>
<div class="cell" data-hash="index_cache/html/py_xgboost_base_model_8cdd8c3e38cb97d56c6f11e58a244656">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> xgboost <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> XGBClassifier</span>
<span id="cb12-2"></span>
<span id="cb12-3">model_xgb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> XGBClassifier(verbosity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb12-4">model_xgb.fit(x_train, y_train)</span></code></pre></div>
<div class="cell-output-display">
<style>#sk-container-id-1 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-1 {
  color: var(--sklearn-color-text);
}

#sk-container-id-1 pre {
  padding: 0;
}

#sk-container-id-1 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-1 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-1 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-1 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-1 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-1 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-1 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-1 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-1 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-1 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-1 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-1 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-1 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-1 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-1 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-1 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-1 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-1 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-1 div.sk-label label.sk-toggleable__label,
#sk-container-id-1 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-1 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-1 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-1 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-1 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-1 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-1 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-1 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-1 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-1 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-1 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</a></style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=None,
              num_parallel_tree=None, random_state=42, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked=""><label for="sk-estimator-id-1" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;XGBClassifier<span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=None,
              num_parallel_tree=None, random_state=42, ...)</pre></div> </div></div></div></div>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and now go onto prediction </span></span>
<span id="cb13-3">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_xgb.predict(x_test)</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or we can also use probability prediction</span></span>
<span id="cb13-6">y_pred_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_xgb.predict_proba(x_test)</span></code></pre></div>
</div>
<p>And we can check our result on this basic xgboost model</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-7_c7d372dc03342f4d1e87bf7a1bbacef4">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, roc_auc_score, roc_curve</span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ConfusionMatrixDisplay, classification_report, RocCurveDisplay</span>
<span id="cb14-3"></span>
<span id="cb14-4">acc_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_train, model_xgb.predict(x_train))</span>
<span id="cb14-5">acc_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, model_xgb.predict(x_test))</span>
<span id="cb14-6"></span>
<span id="cb14-7"></span>
<span id="cb14-8">disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfusionMatrixDisplay.from_estimator(</span>
<span id="cb14-9">        model_xgb,</span>
<span id="cb14-10">        x_test,</span>
<span id="cb14-11">        y_test,</span>
<span id="cb14-12">        display_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_xgb.classes_,</span>
<span id="cb14-13">        cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.Blues</span>
<span id="cb14-14">    )</span>
<span id="cb14-15">disp.ax_.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Confusion matrix'</span>)</span>
<span id="cb14-16">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part2/xgboost/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-8_ab747d9e41f2a641199091ccbcca8edf">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(classification_report(y_test, y_pred))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              precision    recall  f1-score   support

           0       0.49      0.85      0.62       537
           1       0.46      0.13      0.21       538

    accuracy                           0.49      1075
   macro avg       0.48      0.49      0.42      1075
weighted avg       0.48      0.49      0.42      1075</code></pre>
</div>
</div>
<p>And the ROC curve</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-9_48d709c9f54e0174efb1a9d65e3903c0">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plt.clf()</span></span>
<span id="cb17-2">disp_roc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RocCurveDisplay.from_estimator(</span>
<span id="cb17-3">            model_xgb,</span>
<span id="cb17-4">            x_test,</span>
<span id="cb17-5">            y_test,</span>
<span id="cb17-6">            name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'XGBoost'</span>)</span>
<span id="cb17-7">disp_roc.ax_.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ROC Curve'</span>)</span>
<span id="cb17-8">plt.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb17-9">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part2/xgboost/index_files/figure-html/unnamed-chunk-9-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">

</div>
</div>
</div>
</section>
<section id="hyperparameters-and-fine-tuning" class="level1">
<h1>Hyperparameters and fine tuning</h1>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="cell" data-hash="index_cache/html/unnamed-chunk-10_8702d7cb2716d6469fbc4e8380152273">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TimeSeriesSplit</span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomizedSearchCV</span>
<span id="cb18-3"></span>
<span id="cb18-4">tscv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TimeSeriesSplit(n_splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, gap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb18-5">model_xgb.get_params()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': None, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': None, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': None, 'n_jobs': None, 'num_parallel_tree': None, 'random_state': 42, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': 1}</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">param_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'learning_rate'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.20</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.30</span>],</span>
<span id="cb20-2">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_depth'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>],</span>
<span id="cb20-3">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_child_weight'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>],</span>
<span id="cb20-4">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gamma'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> , <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>],</span>
<span id="cb20-5">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colsample_bytree'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> , <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>]}</span>
<span id="cb20-6">            </span>
<span id="cb20-7">xv_xgb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomizedSearchCV(model_xgb, param_grid, n_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scoring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f1'</span>, cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tscv, verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-8"></span>
<span id="cb20-9">xv_xgb.fit(x_train, y_train, verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<style>#sk-container-id-2 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-2 {
  color: var(--sklearn-color-text);
}

#sk-container-id-2 pre {
  padding: 0;
}

#sk-container-id-2 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-2 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-2 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-2 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-2 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-2 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-2 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-2 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-2 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-2 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-2 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-2 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-2 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-2 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-2 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-2 div.sk-label label.sk-toggleable__label,
#sk-container-id-2 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-2 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-2 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-2 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-2 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-2 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-2 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-2 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-2 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</a></style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>RandomizedSearchCV(cv=TimeSeriesSplit(gap=23, max_train_size=None, n_splits=5, test_size=None),
                   estimator=XGBClassifier(base_score=None, booster=None,
                                           callbacks=None,
                                           colsample_bylevel=None,
                                           colsample_bynode=None,
                                           colsample_bytree=None, device=None,
                                           early_stopping_rounds=None,
                                           enable_categorical=False,
                                           eval_metric=None, feature_types=None,
                                           gamma=None, grow_policy=...
                                           monotone_constraints=None,
                                           multi_strategy=None,
                                           n_estimators=None, n_jobs=None,
                                           num_parallel_tree=None,
                                           random_state=42, ...),
                   n_iter=100,
                   param_distributions={'colsample_bytree': [0.3, 0.4, 0.5,
                                                             0.7],
                                        'gamma': [0.0, 0.1, 0.2, 0.3, 0.4],
                                        'learning_rate': [0.05, 0.1, 0.15, 0.2,
                                                          0.25, 0.3],
                                        'max_depth': [3, 4, 5, 6, 8, 10, 12,
                                                      15],
                                        'min_child_weight': [1, 3, 5, 7]},
                   scoring='f1', verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox"><label for="sk-estimator-id-2" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;RandomizedSearchCV<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.4/modules/generated/sklearn.model_selection.RandomizedSearchCV.html">?<span>Documentation for RandomizedSearchCV</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>RandomizedSearchCV(cv=TimeSeriesSplit(gap=23, max_train_size=None, n_splits=5, test_size=None),
                   estimator=XGBClassifier(base_score=None, booster=None,
                                           callbacks=None,
                                           colsample_bylevel=None,
                                           colsample_bynode=None,
                                           colsample_bytree=None, device=None,
                                           early_stopping_rounds=None,
                                           enable_categorical=False,
                                           eval_metric=None, feature_types=None,
                                           gamma=None, grow_policy=...
                                           monotone_constraints=None,
                                           multi_strategy=None,
                                           n_estimators=None, n_jobs=None,
                                           num_parallel_tree=None,
                                           random_state=42, ...),
                   n_iter=100,
                   param_distributions={'colsample_bytree': [0.3, 0.4, 0.5,
                                                             0.7],
                                        'gamma': [0.0, 0.1, 0.2, 0.3, 0.4],
                                        'learning_rate': [0.05, 0.1, 0.15, 0.2,
                                                          0.25, 0.3],
                                        'max_depth': [3, 4, 5, 6, 8, 10, 12,
                                                      15],
                                        'min_child_weight': [1, 3, 5, 7]},
                   scoring='f1', verbose=1)</pre></div> </div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox"><label for="sk-estimator-id-3" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">estimator: XGBClassifier</label><div class="sk-toggleable__content fitted"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=None,
              num_parallel_tree=None, random_state=42, ...)</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-4" type="checkbox"><label for="sk-estimator-id-4" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">XGBClassifier</label><div class="sk-toggleable__content fitted"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=None,
              num_parallel_tree=None, random_state=42, ...)</pre></div> </div></div></div></div></div></div></div></div></div>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">xv_xgb.best_params_</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'min_child_weight': 7, 'max_depth': 12, 'learning_rate': 0.1, 'gamma': 0.1, 'colsample_bytree': 0.7}</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">xv_xgb.best_score_</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.5009456435677468</code></pre>
</div>
</div>
<p>Now we need to train the model based on the best paramaters fromt the cross-validation process.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-11_21342ef472f66c4a59d196253c6462e4">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cross_val_score</span>
<span id="cb25-2"></span>
<span id="cb25-3">model_xgb_tuned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> XGBClassifier(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>xv_xgb.best_params_)</span>
<span id="cb25-4"></span>
<span id="cb25-5">model_xgb_tuned.fit(x_train, y_train, </span>
<span id="cb25-6">                    eval_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(x_train, y_train), (x_test, y_test)],         </span>
<span id="cb25-7">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#eval_metric = 'precision', </span></span>
<span id="cb25-8">                    verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output-display">
<style>#sk-container-id-3 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-3 {
  color: var(--sklearn-color-text);
}

#sk-container-id-3 pre {
  padding: 0;
}

#sk-container-id-3 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-3 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-3 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-3 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-3 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-3 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-3 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-3 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-3 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-3 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-3 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-3 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-3 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-3 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-3 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-3 div.sk-label label.sk-toggleable__label,
#sk-container-id-3 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-3 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-3 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-3 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-3 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-3 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-3 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-3 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-3 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</a></style><div id="sk-container-id-3" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=0.7, device=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=0.1, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=0.1, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=12, max_leaves=None,
              min_child_weight=7, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=None,
              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox" checked=""><label for="sk-estimator-id-5" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;XGBClassifier<span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=0.7, device=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=0.1, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=0.1, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=12, max_leaves=None,
              min_child_weight=7, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=None,
              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">eval_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_xgb_tuned.evals_result()</span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#eval_results</span></span>
<span id="cb26-3"></span>
<span id="cb26-4">score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_val_score(model_xgb_tuned, x_train, y_train, cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tscv)</span>
<span id="cb26-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean CV score for: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>score<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.4}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mean CV score for: 0.4961</code></pre>
</div>
</div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">

</div>
</div>
</div>
</section>
<section id="feature-importance" class="level1">
<h1>Feature importance</h1>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-5-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-1" aria-controls="tabset-5-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-5-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-2" aria-controls="tabset-5-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-5-1" class="tab-pane active" aria-labelledby="tabset-5-1-tab">

</div>
<div id="tabset-5-2" class="tab-pane" aria-labelledby="tabset-5-2-tab">

</div>
</div>
</div>


</section>

 ]]></description>
  <category>xgboost</category>
  <category>tidymodel</category>
  <guid>https://fderyckel.github.io/blog.html/posts/machine-learning-part2/xgboost/</guid>
  <pubDate>Sun, 14 Apr 2024 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Value at Risk using Python</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/risk-portfolio/03-var/</link>
  <description><![CDATA[ 





<p>Computing Value at Risk (VaR) using Python.</p>
<p>VaR is the maximum amount loss that can happen within a confidence interval over a pre-dertermined interval. If the 1-day 95% confidence Interval Var is $100; this means that 95% of the time, under ‘normal’ market conditions, we do not expect to loose more than $100 per day for our portfolio.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"></span>
<span id="cb1-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/FDX.csv'</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, parse_dates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-5">returns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adjClose'</span>].pct_change().dropna()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df)</span>
<span id="cb2-2"></span>
<span id="cb2-3">df</span>
<span id="cb2-4"></span>
<span id="cb2-5">returns</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  open        high         low       close    adjClose  \
date                                                                     
2023-03-09  211.080000  213.310000  207.300000  207.830000  207.830002   
2023-03-08  205.900000  209.970000  205.390000  209.540000  209.539993   
2023-03-07  209.720000  209.720000  206.160000  206.320000  206.320007   
2023-03-06  209.600000  211.890000  209.350000  210.130000  210.130005   
2023-03-03  208.460000  210.100000  207.130000  209.080000  209.080002   
...                ...         ...         ...         ...         ...   
2001-01-08   36.671723   37.013253   36.432653   36.825411   36.835415   
2001-01-05   38.165914   38.165914   36.722953   37.406011   37.416172   
2001-01-04   36.714414   38.422061   36.458267   37.790232   37.800480   
2001-01-03   32.624599   35.228761   32.445296   35.057997   35.067524   
2001-01-02   33.683341   34.127329   32.616061   32.616061   32.624928   

             volume  unadjustedVolume    change  changePercent    vwap  \
date                                                                     
2023-03-09  1953078           1918911 -3.250000       -1.54000  210.08   
2023-03-08  1073890           1073900  3.640000        1.77000  208.29   
2023-03-07  1527138           1526900 -3.400000       -1.62000  207.00   
2023-03-06  2148072           2148000  0.530000        0.25286  210.52   
2023-03-03  1612507           1612300  0.620000        0.29742  208.87   
...             ...               ...       ...            ...     ...   
2001-01-08  1120700           1120700  0.153688        0.41909   36.76   
2001-01-05  1485800           1485800 -0.759903       -1.99000   37.43   
2001-01-04  3410600           3410600  1.075820        2.93000   37.56   
2001-01-03  2203000           2203000  2.433400        7.46000   34.24   
2001-01-02   936600            936600 -1.067280       -3.17000   33.12   

                     label  changeOverTime  
date                                        
2023-03-09    March 09, 23       -0.015400  
2023-03-08    March 08, 23        0.017700  
2023-03-07    March 07, 23       -0.016200  
2023-03-06    March 06, 23        0.002529  
2023-03-03    March 03, 23        0.002974  
...                    ...             ...  
2001-01-08  January 08, 01        0.004191  
2001-01-05  January 05, 01       -0.019900  
2001-01-04  January 04, 01        0.029300  
2001-01-03  January 03, 01        0.074600  
2001-01-02  January 02, 01       -0.031700  

[5581 rows x 12 columns]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>date
2023-03-08    0.008228
2023-03-07   -0.015367
2023-03-06    0.018466
2023-03-03   -0.004997
2023-03-02   -0.010283
                ...   
2001-01-08    0.020345
2001-01-05    0.015766
2001-01-04    0.010271
2001-01-03   -0.072300
2001-01-02   -0.069654
Name: adjClose, Length: 5580, dtype: float64</code></pre>
</div>
</div>



 ]]></description>
  <category>statistics</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://fderyckel.github.io/blog.html/posts/risk-portfolio/03-var/</guid>
  <pubDate>Tue, 13 Feb 2024 17:00:00 GMT</pubDate>
</item>
<item>
  <title>quantitative Methods</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part2/05-quantitative-methods/</link>
  <description><![CDATA[ 





<p>Starting here a few examples on how to graph functions, how to solve equations and differential equations with computational methods.</p>
<section id="basic-graphs-of-a-functions." class="level1">
<h1>Basic graphs of a functions.</h1>
<p>Let’s take the function <img src="https://latex.codecogs.com/png.latex?Q(t)%20=%2010%20e%5E%7B-%20%5Cfrac%7Bt%7D%7B10%7D%7D"> We want to graph this in the interval 0-40 for instance and know what is the value of <img src="https://latex.codecogs.com/png.latex?Q"> when <img src="https://latex.codecogs.com/png.latex?t=30">.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb1-5">df_point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df_point, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df_point, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, y<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">+0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x = 30, y = '</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part2/05-quantitative-methods/index_files/figure-html/r-basicGraph-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="graphing-slope-fields-from-differential-equations" class="level1">
<h1>Graphing slope fields from differential equations</h1>
<p>Solving <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BdN%7D%7Bdt%7D%20=%20r%20%5Ccdot%20N%20%5Ccdot%20%5Cleft(%201%20-%20%5Cfrac%7BN%7D%7BK%7D%20%5Cright)"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(deSolve)</span>
<span id="cb2-2"></span>
<span id="cb2-3">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(time, y, parms) {</span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(y, parms)), {</span>
<span id="cb2-5">    dN <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>K)</span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(dN)</span>
<span id="cb2-7">  })</span>
<span id="cb2-8">}</span>
<span id="cb2-9"></span>
<span id="cb2-10"></span>
<span id="cb2-11">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb2-12">parms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">K =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-13">times <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-14"></span>
<span id="cb2-15">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ode</span>(y, times, model, parms)</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part2/05-quantitative-methods/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Solving <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BdS%7D%7Bdt%7D%20=%208%20-%20%5Cfrac%7BS(t)%7D%7B4+t%7D"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(t, S, parms) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(S, parms)), {</span>
<span id="cb3-3">    dS <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> S<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>t)</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(dS)</span>
<span id="cb3-5">  })</span>
<span id="cb3-6">}</span>
<span id="cb3-7"></span>
<span id="cb3-8">S0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb3-9">times <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb3-10"></span>
<span id="cb3-11">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ode</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y=</span>S0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> times, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">func =</span> model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parms=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part2/05-quantitative-methods/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># finding S(t) for specific value of time</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb4-3">yo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(out) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t =</span> time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">S =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5">yo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(t <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 2
  t         S        
  &lt;deSolve&gt; &lt;deSolve&gt;
1 20        98.66667 </code></pre>
</div>
</div>
</section>
<section id="using-python" class="level1">
<h1>Using Python</h1>
<section id="eulers-method" class="level2">
<h2 class="anchored" data-anchor-id="eulers-method">Euler’s method</h2>
<p>Let’s define <img src="https://latex.codecogs.com/png.latex?y'%20=%20f(x,%20y)"> and a small increment <img src="https://latex.codecogs.com/png.latex?h"> which is a small steps on the interval <img src="https://latex.codecogs.com/png.latex?%5Bx_0,%20b%5D">. We obtain <img src="https://latex.codecogs.com/png.latex?h"> by dividing that interval in <img src="https://latex.codecogs.com/png.latex?n"> eaual parts. Hence <img src="https://latex.codecogs.com/png.latex?h%20=%20%5Cfrac%7Bb%20-%20x_0%7D%7Bn%7D">. Finally, we approximate <img src="https://latex.codecogs.com/png.latex?y"> in the following way: <img src="https://latex.codecogs.com/png.latex?y_%7Bi+1%7D%20=%20y_i%20+%20h%20%5Ccdot%20f(x_i,%20y_i)"> We need a starting point: <img src="https://latex.codecogs.com/png.latex?y(x_0)%20=%20y_0"> and <img src="https://latex.codecogs.com/png.latex?x_0%20=%200"> and <img src="https://latex.codecogs.com/png.latex?x_1%20=%20x_0%20+%20h"> and so on.</p>
<section id="problem-1" class="level3">
<h3 class="anchored" data-anchor-id="problem-1">Problem 1</h3>
<p>Approximate the function <img src="https://latex.codecogs.com/png.latex?y'%20+%202y%20=%20x%5E3%20%5Ccdot%20e%5E%7B-2x%7D"> at <img src="https://latex.codecogs.com/png.latex?x%20=%201.7"> using increment of <img src="https://latex.codecogs.com/png.latex?h%20=%200.01">. This is an initial-value problem with <img src="https://latex.codecogs.com/png.latex?y(0)%20=%201"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#defining the function first </span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f(x, y): </span>
<span id="cb6-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x))</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># defining the recurisve loop to approximate y'</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## in our problem: h = 0.01, xn = 1.7</span></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> euler_method(f, x0, y0, h, xn): </span>
<span id="cb6-10">  n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.rint(xn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> h).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb6-11">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(x0, xn, n) </span>
<span id="cb6-12">  y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(n) </span>
<span id="cb6-13">  y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y0 </span>
<span id="cb6-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n):  </span>
<span id="cb6-15">    y[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f(x[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], y[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) </span>
<span id="cb6-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x, y</span>
<span id="cb6-17">  </span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># approximatinig our ODE</span></span>
<span id="cb6-19">x0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-20">y0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-21">h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb6-22">xn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span></span>
<span id="cb6-23">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> euler_method(f, x0, y0, h, xn)</span></code></pre></div>
</div>
<p>And bonus we could add some graphs to it</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-2">plt.clf()</span>
<span id="cb7-3">plt.plot(x, y)</span>
<span id="cb7-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb7-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb7-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Approximate solution to an ODE using Euler</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s method'</span> )</span>
<span id="cb7-7">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part2/05-quantitative-methods/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="solving-system-of-coupled-differential-equations" class="level2">
<h2 class="anchored" data-anchor-id="solving-system-of-coupled-differential-equations">Solving system of coupled differential equations</h2>


</section>
</section>

 ]]></description>
  <category>graph</category>
  <category>code</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part2/05-quantitative-methods/</guid>
  <pubDate>Sat, 20 Jan 2024 17:00:00 GMT</pubDate>
</item>
<item>
  <title>05 - AR, MA and ARIMA models</title>
  <dc:creator>François de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/time-series/05-arima/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This post is about introducing ARIMA using the CPI data and various R framework for time series. Autoregressive because it is based on past value and moving average to smooth the time series data. Our <a href="../../../posts/time-series/03-autocorrelation/index.html">previous post</a> on autocorrelation and partial autocorelation could be considered as prior material. The assumption behind these models are that the time-series is stationary (or has been transformed to a stationary time series). Recall that <strong>a stationary time series has constant mean, variance and auto-correlation over time</strong>. In other words, <strong>the covariance between the <em>i-th</em> term and the <em>i + m - th</em> term is not a function of time</strong>.</p>
</section>
<section id="autoregressive-models" class="level1">
<h1>Autoregressive models</h1>
<p>Autoregression is a class of linear model where the outcome variable is regressed on its previous values (lagged observations).</p>
<p><img src="https://latex.codecogs.com/png.latex?Y_t%20=%20%5Cdelta%20+%20%5Cphi_1%20Y_%7Bt-1%7D%20+%20%5Cphi_2%20Y_%7Bt-2%7D%20+%20%5Ccdots%20+%20%5Cphi_p%20Y_%7Bt-p%7D%20+%20%5Cepsilon_t"> <img src="https://latex.codecogs.com/png.latex?Y_t%20=%20%5Cdelta%20+%20%5Csum_%7Bi=1%7D%5E%7Bp%7D%20%5Cphi_i%20%5Ccdot%20Y_%7Bt-i%7D%20+%20%5Cepsilon_t"> This AR model used <img src="https://latex.codecogs.com/png.latex?p"> lags, hence we say it is of order <img src="https://latex.codecogs.com/png.latex?p"> or <img src="https://latex.codecogs.com/png.latex?AR(p)">.</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cdelta"> is an intercept like term</li>
<li><img src="https://latex.codecogs.com/png.latex?Y_%7Bt-i%7D"> are the regressors (time series own lagged observations) with parameters <img src="https://latex.codecogs.com/png.latex?%5Cphi_%7Bt-i%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> is an error term. Also <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_t%20%5Csim%20N%20%5Cleft(%200,%20%5Csigma%5E2%20%5Cright)"></li>
</ul>
<p>AR(1) is then define as <img src="https://latex.codecogs.com/png.latex?Y_t%20=%20%5Cdelta%20+%20%5Cphi_1%20Y_%7Bt-1%7D%20+%20%5Cepsilon_t"></p>
<p>Few characteristics of AR models</p>
<ul>
<li>for stationary time-series, <img src="https://latex.codecogs.com/png.latex?-1%20%3C%20%5Cphi%20%3C%201"></li>
<li>negative <img src="https://latex.codecogs.com/png.latex?%5Cphi"> indicates mean-reversion series</li>
<li>positive <img src="https://latex.codecogs.com/png.latex?%5Cphi"> indicates momentum series</li>
<li>the auto-correlation ACF of the AR time-series decay at the rate of <img src="https://latex.codecogs.com/png.latex?%5Cphi">. So small <img src="https://latex.codecogs.com/png.latex?%5Cphi"> will lead to steeper decay in the auto-correlation. For instance, if <img src="https://latex.codecogs.com/png.latex?%5Cphi%20=%20-0.5">; the first lag autocorrelation will be <img src="https://latex.codecogs.com/png.latex?-0.5">, the second lag will be <img src="https://latex.codecogs.com/png.latex?0.25">, the third lag will be <img src="https://latex.codecogs.com/png.latex?-0.125">, etc.</li>
</ul>
<p>We can simulate an AR(1) timeseries in both R and Python.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>In python, we use the <em>arima_process</em> module from the <em>statsmodels</em> library.<br>
Because these models have been developed with ARIMA in mind, we will set up the MA parameter to 1. Also, we set up the intercept to <img src="https://latex.codecogs.com/png.latex?1">.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> statsmodels.tsa.arima_process <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ArmaProcess</span>
<span id="cb1-4"></span>
<span id="cb1-5">ar1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>])    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the first term: the delta, the second is the phi_1</span></span>
<span id="cb1-6">ma1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as ma is mandatory for ArmaProcess, we set it up to 1</span></span>
<span id="cb1-7">ar_obj1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ArmaProcess(ar1, ma1)</span>
<span id="cb1-8">sim_data1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ar_obj1.generate_sample(nsample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb1-9">plt.clf()</span>
<span id="cb1-10">plt.plot(sim_data1)</span>
<span id="cb1-11">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/py_arma01-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Doing it similar with a positive <img src="https://latex.codecogs.com/png.latex?%5Cphi"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">ar2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>])</span>
<span id="cb2-2">ma2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-3">ar_obj2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ArmaProcess(ar2, ma2)</span>
<span id="cb2-4">sim_data2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ar_obj2.generate_sample(nsample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb2-5">plt.clf()</span>
<span id="cb2-6">plt.plot(sim_data2)</span>
<span id="cb2-7">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/py_arma02-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<section id="auto-correlation" class="level3">
<h3 class="anchored" data-anchor-id="auto-correlation">Auto-correlation</h3>
<p>Looking at the auto-correlation decay.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> statsmodels.graphics.tsaplots <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plot_acf</span>
<span id="cb3-2"></span>
<span id="cb3-3">ar3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>])</span>
<span id="cb3-4">ma3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb3-5">ar_obj3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ArmaProcess(ar3, ma3)</span>
<span id="cb3-6">sim_data3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ar_obj3.generate_sample(nsample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to show fast decay with negative phi</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">plot_acf(sim_data1, alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, lags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb3-9">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/py_arma03-5.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">plt.clf()</span>
<span id="cb4-2">plot_acf(sim_data2, alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, lags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb4-3">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/py_arma03-6.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">plt.clf()</span>
<span id="cb5-2">plot_acf(sim_data3, alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, lags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb5-3">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/py_arma03-7.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/py_arma03-8.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="estimating-the-parameters-of-ar-model" class="level3">
<h3 class="anchored" data-anchor-id="estimating-the-parameters-of-ar-model">Estimating the parameters of AR model</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> statsmodels.tsa.arima.model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ARIMA</span>
<span id="cb6-2"></span>
<span id="cb6-3">model_ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ARIMA(sim_data1, order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the order ensure we are dealing with just AR model</span></span>
<span id="cb6-4">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_ar.fit()</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(res.summary())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                               SARIMAX Results                                
==============================================================================
Dep. Variable:                      y   No. Observations:                  500
Model:                 ARIMA(1, 0, 0)   Log Likelihood                -702.864
Date:                Fri, 14 Jun 2024   AIC                           1411.727
Time:                        08:51:20   BIC                           1424.371
Sample:                             0   HQIC                          1416.689
                                - 500                                         
Covariance Type:                  opg                                         
==============================================================================
                 coef    std err          z      P&gt;|z|      [0.025      0.975]
------------------------------------------------------------------------------
const         -0.4877      0.432     -1.129      0.259      -1.334       0.359
ar.L1          0.8982      0.021     43.704      0.000       0.858       0.939
sigma2         0.9707      0.067     14.506      0.000       0.840       1.102
===================================================================================
Ljung-Box (L1) (Q):                   0.28   Jarque-Bera (JB):                 2.71
Prob(Q):                              0.60   Prob(JB):                         0.26
Heteroskedasticity (H):               1.12   Skew:                            -0.10
Prob(H) (two-sided):                  0.46   Kurtosis:                         2.69
===================================================================================

Warnings:
[1] Covariance matrix calculated using the outer product of gradients (complex-step).</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(res.param_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['const', 'ar.L1', 'sigma2']</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(res.params)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[-0.48768522  0.89822033  0.97072192]</code></pre>
</div>
</div>
<p>Our simulated data had <img src="https://latex.codecogs.com/png.latex?0.9"> as the parameter of the autoregressive term. The estimated parameters is quite close indeed.</p>
</section>
<section id="forecasting-with-an-ar-model" class="level3">
<h3 class="anchored" data-anchor-id="forecasting-with-an-ar-model">Forecasting with an AR model</h3>
<p>We can also use the AR to make prediction.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> statsmodels.graphics.tsaplots <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plot_predict</span>
<span id="cb12-2"></span>
<span id="cb12-3">res.predict(start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">490</span>, end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">510</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>array([-1.13974043, -1.50381221, -2.11834284, -1.86643043, -1.12326524,
        0.25178097,  1.84163869,  2.53226982,  0.70537889,  2.57223097,
        1.97822412,  1.72724467,  1.50180983,  1.29931968,  1.1174389 ,
        0.95406989,  0.80732853,  0.67552245,  0.55713156,  0.45079045,
        0.3552727 ])</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#res.plot_predict(start = 400, end = 510)</span></span>
<span id="cb14-2">res.plot_diagnostics()</span>
<span id="cb14-3">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/unnamed-chunk-6-13.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">

</div>
</div>
</div>
<p>We could also use a specific dataset to fit an autoregressive model on.</p>
<p>Let’s use the famous Nile data set</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb15-3"></span>
<span id="cb15-4">df_nile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/Nile.csv'</span>)</span></code></pre></div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb20-2"></span>
<span id="cb20-3">df_nile <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/Nile.csv'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>New names:
• `` -&gt; `...1`</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 100 Columns: 3
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (3): ...1, time, Nile

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fit a model wit AR = 1</span></span>
<span id="cb23-2">model_ar1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arima</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> df_nile<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Nile, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chek the residuals of the model (should be normallly distributed)</span></span>
<span id="cb23-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">acf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">residuals</span>(model_ar1), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Residuals of AR(1) on Nile River.'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/r-load-Nile-15.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="moving-average-models" class="level1">
<h1>Moving Average Models</h1>
<p>Moving Average (MA) is another class of linear model where the outcome variable is regressed using its own previous error terms. <img src="https://latex.codecogs.com/png.latex?Y_t%20=%20%5Cmu%20+%20%20%5Ctheta_1%20%5Cepsilon_%7Bt-1%7D%20+%20%5Ctheta_2%20%5Cepsilon_%7Bt-2%7D%20+%20%5Ccdots%20+%20%5Ctheta_q%20%5Cepsilon_%7Bt-q%7D%20+%20%5Cepsilon_t"> This MA model used <img src="https://latex.codecogs.com/png.latex?q"> lags, hence we say it is of order <img src="https://latex.codecogs.com/png.latex?q">.</p>
<p>Putting it all together, the outcome variable of an ARIMA model can be predicted: <img src="https://latex.codecogs.com/png.latex?Y_t%20=%20%5C%7B%5Cdelta%20+%20%5Cphi_1%20Y_%7Bt-1%7D%20+%20%5Cphi_2%20Y_%7Bt-2%7D%20+%20%5Ccdots%20+%20%5Cphi_p%20Y_%7Bt-p%7D%20+%20%5Cepsilon_t%20%5C%7D%20+%20%5C%7B%5Cmu%20+%20%20%5Ctheta_1%20%5Cepsilon_%7Bt-1%7D%20+%20%5Ctheta_2%20%5Cepsilon_%7Bt-2%7D%20+%20%5Ccdots%20+%20%5Ctheta_q%20%5Cepsilon_%7Bt-q%7D%20+%20%5Cepsilon_t%20%5C%7D"> This can be simplify into: <img src="https://latex.codecogs.com/png.latex?Y_t%20=%20%5Cdelta%20+%20%5Csum_%7Bi=1%7D%5Ep%20%5Cphi_i%20Y_%7Bt-i%7D%20+%20%5Csum_%7Bj=1%7D%5Eq%20%5Ctheta_j%20%5Cepsilon_%7Bt-j%7D%20+%20%5Cepsilon_t"></p>
<p>The parameters of an ARIMA model are (p, d, q) :</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?p"> - Autoregressive. The number of lagged observations in the model. Use the previous <img src="https://latex.codecogs.com/png.latex?n"> observations as predictors.</li>
<li><img src="https://latex.codecogs.com/png.latex?d"> - Integrated. The number of times the data is differenced to make the data stationary<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?q"> - the size of the moving average. Use previous errors to predict <img src="https://latex.codecogs.com/png.latex?Y_t"></li>
</ul>
<p>To apply an ARIMA model to a set of data, we will use the US CPI Energy component that we downloaded on the <a href="https://fred.stlouisfed.org/series/CPIENGSL">FED St-Louis website</a>.</p>
</section>
<section id="application-using-r" class="level1">
<h1>Application using R</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb24-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(modeltime)</span>
<span id="cb24-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(timetk)</span>
<span id="cb24-6"></span>
<span id="cb24-7">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/CPI_energy.csv'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb24-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> DATE, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cpi_energy =</span> CPIENGNS)</span>
<span id="cb24-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 803
Columns: 2
$ date       &lt;date&gt; 1957-01-01, 1957-02-01, 1957-03-01, 1957-04-01, 1957-05-01…
$ cpi_energy &lt;dbl&gt; 21.3, 21.5, 21.6, 21.5, 21.4, 21.4, 21.5, 21.4, 21.5, 21.4,…</code></pre>
</div>
</div>
<section id="arima-using-the-base-r-framework" class="level2">
<h2 class="anchored" data-anchor-id="arima-using-the-base-r-framework">ARIMA using the base R framework</h2>
<p>We need first to convert our df into a ts object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">df_ts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cpi_energy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1957</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>))</span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(df_ts)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Time-Series [1:803] from 1957 to 2024: 21.3 21.5 21.6 21.5 21.4 21.4 21.5 21.4 21.5 21.4 ...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts.plot</span>(df_ts, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Energy CPI'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>It is usually a wise idea to check for outliers? An easy way to do this is using a boxplot.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(df_ts)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We use the ACF to determine the MA parameter (q) of the ARIMA model.</p>
<ul>
<li>Significant spikes at specific lags in the ACF plot suggest potential MA terms at those lags</li>
<li>An ACF plot that cuts off sharply after a few lags often indicates a suitable MA model</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">acf</span>(df_ts, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag.max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggacf</span>(df_ts, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num_lags =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Data is clearly not stationary. We will need to use differentiation to make it stationary.</p>
<p>The PCAF helps determine the AR (Autoregressive) order (p) in an ARIMA model.</p>
<ul>
<li>Significant spikes at specific lags in the PACF plot suggest potential AR terms at those lags</li>
<li>A PACF plot that cuts off sharply after a few lags often indicates a suitable AR model</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pacf</span>(df_ts, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag.max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This can be confirm with Augmented Dickey Fuller test</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">tseries<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adf.test</span>(df_ts)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Registered S3 method overwritten by 'quantmod':
  method            from
  as.zoo.data.frame zoo </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Augmented Dickey-Fuller Test

data:  df_ts
Dickey-Fuller = -2.4123, Lag order = 9, p-value = 0.4038
alternative hypothesis: stationary</code></pre>
</div>
</div>
<p>adf test confirm non-stationarity of our ts. We can differentiate our ts to make it stationary.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">diff_ts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> df_ts, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb36-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts.plot</span>(diff_ts)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">tseries<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adf.test</span>(diff_ts)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in tseries::adf.test(diff_ts): p-value smaller than printed p-value</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Augmented Dickey-Fuller Test

data:  diff_ts
Dickey-Fuller = -9.4624, Lag order = 9, p-value = 0.01
alternative hypothesis: stationary</code></pre>
</div>
</div>
<p>We can create our training and testing set.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">train_ts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df_ts[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">793</span>]</span></code></pre></div>
</div>
<p>We can now use ARIMA model using 1 and 1 for parameter (all we could see from acf)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arima</span>(train_ts, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb41-2">result</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
arima(x = train_ts, order = c(0, 1, 2))

Coefficients:
         ma1     ma2
      0.5197  0.0884
s.e.  0.0356  0.0361

sigma^2 estimated as 17.24:  log likelihood = -2251.54,  aic = 4509.07</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tsdiag</span>(result)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(result, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$pred
Time Series:
Start = 794 
End = 796 
Frequency = 1 
[1] 290.5702 292.0037 292.0037

$se
Time Series:
Start = 794 
End = 796 
Frequency = 1 
[1]  4.152615  7.554318 10.082648</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">result_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arima</span>(df_ts, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb46-2">result_df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
arima(x = df_ts, order = c(0, 1, 2))

Coefficients:
         ma1     ma2
      0.5033  0.0834
s.e.  0.0347  0.0358

sigma^2 estimated as 17.52:  log likelihood = -2286.24,  aic = 4578.49</code></pre>
</div>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(result_df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$pred
          Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov      Dec
2023                                                  273.7094
2024 273.2768                                                 

$se
          Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov      Dec
2023                                                  4.185297
2024 7.556805                                                 </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">result_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arima</span>(df_ts, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb50-2">result_df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
arima(x = df_ts, order = c(4, 1, 1))

Coefficients:
         ar1      ar2     ar3      ar4      ma1
      1.1419  -0.4870  0.1896  -0.1582  -0.6576
s.e.  0.0776   0.0626  0.0531   0.0362   0.0722

sigma^2 estimated as 16.92:  log likelihood = -2272.35,  aic = 4556.69</code></pre>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(result_df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$pred
          Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov      Dec
2023                                                  272.8635
2024 270.8238                                                 

$se
          Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov      Dec
2023                                                  4.112985
2024 7.361178                                                 </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">forecast<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">auto.arima</span>(df_ts, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">trace =</span> T, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stepwise =</span> F, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">approximation =</span> F)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 ARIMA(0,1,0)                               : 4762.801
 ARIMA(0,1,0)            with drift         : 4761.123
 ARIMA(0,1,0)(0,0,1)[12]                    : 4751.105
 ARIMA(0,1,0)(0,0,1)[12] with drift         : 4750.212
 ARIMA(0,1,0)(0,0,2)[12]                    : 4749.802
 ARIMA(0,1,0)(0,0,2)[12] with drift         : 4749.14
 ARIMA(0,1,0)(1,0,0)[12]                    : 4748.883
 ARIMA(0,1,0)(1,0,0)[12] with drift         : 4748.184
 ARIMA(0,1,0)(1,0,1)[12]                    : Inf
 ARIMA(0,1,0)(1,0,1)[12] with drift         : Inf
 ARIMA(0,1,0)(1,0,2)[12]                    : Inf
 ARIMA(0,1,0)(1,0,2)[12] with drift         : Inf
 ARIMA(0,1,0)(2,0,0)[12]                    : 4742.386
 ARIMA(0,1,0)(2,0,0)[12] with drift         : 4742.203
 ARIMA(0,1,0)(2,0,1)[12]                    : Inf
 ARIMA(0,1,0)(2,0,1)[12] with drift         : Inf
 ARIMA(0,1,0)(2,0,2)[12]                    : Inf
 ARIMA(0,1,0)(2,0,2)[12] with drift         : Inf
 ARIMA(0,1,1)                               : 4581.902
 ARIMA(0,1,1)            with drift         : 4581.821
 ARIMA(0,1,1)(0,0,1)[12]                    : 4577.654
 ARIMA(0,1,1)(0,0,1)[12] with drift         : 4577.884
 ARIMA(0,1,1)(0,0,2)[12]                    : 4573.756
 ARIMA(0,1,1)(0,0,2)[12] with drift         : 4574.212
 ARIMA(0,1,1)(1,0,0)[12]                    : 4576.446
 ARIMA(0,1,1)(1,0,0)[12] with drift         : 4576.758
 ARIMA(0,1,1)(1,0,1)[12]                    : Inf
 ARIMA(0,1,1)(1,0,1)[12] with drift         : Inf
 ARIMA(0,1,1)(1,0,2)[12]                    : Inf
 ARIMA(0,1,1)(1,0,2)[12] with drift         : Inf
 ARIMA(0,1,1)(2,0,0)[12]                    : 4568.379
 ARIMA(0,1,1)(2,0,0)[12] with drift         : 4569.08
 ARIMA(0,1,1)(2,0,1)[12]                    : Inf
 ARIMA(0,1,1)(2,0,1)[12] with drift         : Inf
 ARIMA(0,1,1)(2,0,2)[12]                    : Inf
 ARIMA(0,1,1)(2,0,2)[12] with drift         : Inf
 ARIMA(0,1,2)                               : 4578.515
 ARIMA(0,1,2)            with drift         : 4578.734
 ARIMA(0,1,2)(0,0,1)[12]                    : 4575.644
 ARIMA(0,1,2)(0,0,1)[12] with drift         : 4576.08
 ARIMA(0,1,2)(0,0,2)[12]                    : 4572.671
 ARIMA(0,1,2)(0,0,2)[12] with drift         : 4573.279
 ARIMA(0,1,2)(1,0,0)[12]                    : 4574.772
 ARIMA(0,1,2)(1,0,0)[12] with drift         : 4575.261
 ARIMA(0,1,2)(1,0,1)[12]                    : Inf
 ARIMA(0,1,2)(1,0,1)[12] with drift         : Inf
 ARIMA(0,1,2)(1,0,2)[12]                    : Inf
 ARIMA(0,1,2)(1,0,2)[12] with drift         : Inf
 ARIMA(0,1,2)(2,0,0)[12]                    : 4568.289
 ARIMA(0,1,2)(2,0,0)[12] with drift         : 4569.079
 ARIMA(0,1,2)(2,0,1)[12]                    : Inf
 ARIMA(0,1,2)(2,0,1)[12] with drift         : Inf
 ARIMA(0,1,3)                               : 4579.677
 ARIMA(0,1,3)            with drift         : 4580.023
 ARIMA(0,1,3)(0,0,1)[12]                    : 4577.191
 ARIMA(0,1,3)(0,0,1)[12] with drift         : 4577.708
 ARIMA(0,1,3)(0,0,2)[12]                    : 4574.269
 ARIMA(0,1,3)(0,0,2)[12] with drift         : 4574.946
 ARIMA(0,1,3)(1,0,0)[12]                    : 4576.379
 ARIMA(0,1,3)(1,0,0)[12] with drift         : 4576.941
 ARIMA(0,1,3)(1,0,1)[12]                    : Inf
 ARIMA(0,1,3)(1,0,1)[12] with drift         : Inf
 ARIMA(0,1,3)(2,0,0)[12]                    : 4569.998
 ARIMA(0,1,3)(2,0,0)[12] with drift         : 4570.839
 ARIMA(0,1,4)                               : 4581.69
 ARIMA(0,1,4)            with drift         : 4582.053
 ARIMA(0,1,4)(0,0,1)[12]                    : 4579.221
 ARIMA(0,1,4)(0,0,1)[12] with drift         : 4579.733
 ARIMA(0,1,4)(1,0,0)[12]                    : 4578.408
 ARIMA(0,1,4)(1,0,0)[12] with drift         : 4578.96
 ARIMA(0,1,5)                               : 4583.72
 ARIMA(0,1,5)            with drift         : 4584.063
 ARIMA(1,1,0)                               : 4592.114
 ARIMA(1,1,0)            with drift         : 4592.78
 ARIMA(1,1,0)(0,0,1)[12]                    : 4590.795
 ARIMA(1,1,0)(0,0,1)[12] with drift         : 4591.591
 ARIMA(1,1,0)(0,0,2)[12]                    : 4589.897
 ARIMA(1,1,0)(0,0,2)[12] with drift         : 4590.8
 ARIMA(1,1,0)(1,0,0)[12]                    : 4590.336
 ARIMA(1,1,0)(1,0,0)[12] with drift         : 4591.158
 ARIMA(1,1,0)(1,0,1)[12]                    : Inf
 ARIMA(1,1,0)(1,0,1)[12] with drift         : Inf
 ARIMA(1,1,0)(1,0,2)[12]                    : Inf
 ARIMA(1,1,0)(1,0,2)[12] with drift         : Inf
 ARIMA(1,1,0)(2,0,0)[12]                    : 4587.308
 ARIMA(1,1,0)(2,0,0)[12] with drift         : 4588.314
 ARIMA(1,1,0)(2,0,1)[12]                    : Inf
 ARIMA(1,1,0)(2,0,1)[12] with drift         : Inf
 ARIMA(1,1,0)(2,0,2)[12]                    : Inf
 ARIMA(1,1,0)(2,0,2)[12] with drift         : Inf
 ARIMA(1,1,1)                               : 4577.984
 ARIMA(1,1,1)            with drift         : 4578.289
 ARIMA(1,1,1)(0,0,1)[12]                    : 4575.351
 ARIMA(1,1,1)(0,0,1)[12] with drift         : 4575.838
 ARIMA(1,1,1)(0,0,2)[12]                    : 4572.434
 ARIMA(1,1,1)(0,0,2)[12] with drift         : 4573.078
 ARIMA(1,1,1)(1,0,0)[12]                    : 4574.518
 ARIMA(1,1,1)(1,0,0)[12] with drift         : 4575.051
 ARIMA(1,1,1)(1,0,1)[12]                    : Inf
 ARIMA(1,1,1)(1,0,1)[12] with drift         : Inf
 ARIMA(1,1,1)(1,0,2)[12]                    : Inf
 ARIMA(1,1,1)(1,0,2)[12] with drift         : Inf
 ARIMA(1,1,1)(2,0,0)[12]                    : 4568.139
 ARIMA(1,1,1)(2,0,0)[12] with drift         : 4568.95
 ARIMA(1,1,1)(2,0,1)[12]                    : Inf
 ARIMA(1,1,1)(2,0,1)[12] with drift         : Inf
 ARIMA(1,1,2)                               : 4579.966
 ARIMA(1,1,2)            with drift         : 4580.292
 ARIMA(1,1,2)(0,0,1)[12]                    : 4577.355
 ARIMA(1,1,2)(0,0,1)[12] with drift         : 4577.857
 ARIMA(1,1,2)(0,0,2)[12]                    : 4574.418
 ARIMA(1,1,2)(0,0,2)[12] with drift         : 4575.085
 ARIMA(1,1,2)(1,0,0)[12]                    : 4576.524
 ARIMA(1,1,2)(1,0,0)[12] with drift         : 4577.071
 ARIMA(1,1,2)(1,0,1)[12]                    : Inf
 ARIMA(1,1,2)(1,0,1)[12] with drift         : Inf
 ARIMA(1,1,2)(2,0,0)[12]                    : 4570.12
 ARIMA(1,1,2)(2,0,0)[12] with drift         : 4570.951
 ARIMA(1,1,3)                               : 4581.695
 ARIMA(1,1,3)            with drift         : 4582.053
 ARIMA(1,1,3)(0,0,1)[12]                    : 4579.222
 ARIMA(1,1,3)(0,0,1)[12] with drift         : 4579.743
 ARIMA(1,1,3)(1,0,0)[12]                    : 4578.411
 ARIMA(1,1,3)(1,0,0)[12] with drift         : 4578.979
 ARIMA(1,1,4)                               : 4573.756
 ARIMA(1,1,4)            with drift         : 4571.09
 ARIMA(2,1,0)                               : 4579.505
 ARIMA(2,1,0)            with drift         : 4579.69
 ARIMA(2,1,0)(0,0,1)[12]                    : 4577.142
 ARIMA(2,1,0)(0,0,1)[12] with drift         : 4577.505
 ARIMA(2,1,0)(0,0,2)[12]                    : 4575.062
 ARIMA(2,1,0)(0,0,2)[12] with drift         : 4575.574
 ARIMA(2,1,0)(1,0,0)[12]                    : 4576.421
 ARIMA(2,1,0)(1,0,0)[12] with drift         : 4576.826
 ARIMA(2,1,0)(1,0,1)[12]                    : Inf
 ARIMA(2,1,0)(1,0,1)[12] with drift         : Inf
 ARIMA(2,1,0)(1,0,2)[12]                    : Inf
 ARIMA(2,1,0)(1,0,2)[12] with drift         : Inf
 ARIMA(2,1,0)(2,0,0)[12]                    : 4571.428
 ARIMA(2,1,0)(2,0,0)[12] with drift         : 4572.095
 ARIMA(2,1,0)(2,0,1)[12]                    : Inf
 ARIMA(2,1,0)(2,0,1)[12] with drift         : Inf
 ARIMA(2,1,1)                               : 4579.893
 ARIMA(2,1,1)            with drift         : 4580.248
 ARIMA(2,1,1)(0,0,1)[12]                    : 4577.321
 ARIMA(2,1,1)(0,0,1)[12] with drift         : 4577.839
 ARIMA(2,1,1)(0,0,2)[12]                    : 4574.356
 ARIMA(2,1,1)(0,0,2)[12] with drift         : 4575.04
 ARIMA(2,1,1)(1,0,0)[12]                    : 4576.493
 ARIMA(2,1,1)(1,0,0)[12] with drift         : 4577.055
 ARIMA(2,1,1)(1,0,1)[12]                    : Inf
 ARIMA(2,1,1)(1,0,1)[12] with drift         : Inf
 ARIMA(2,1,1)(2,0,0)[12]                    : 4570.052
 ARIMA(2,1,1)(2,0,0)[12] with drift         : 4570.9
 ARIMA(2,1,2)                               : 4581.576
 ARIMA(2,1,2)            with drift         : 4582.003
 ARIMA(2,1,2)(0,0,1)[12]                    : Inf
 ARIMA(2,1,2)(0,0,1)[12] with drift         : Inf
 ARIMA(2,1,2)(1,0,0)[12]                    : Inf
 ARIMA(2,1,2)(1,0,0)[12] with drift         : Inf
 ARIMA(2,1,3)                    : Inf
 ARIMA(2,1,3) with drift         : Inf
 ARIMA(3,1,0)                               : 4581.026
 ARIMA(3,1,0)            with drift         : 4581.307
 ARIMA(3,1,0)(0,0,1)[12]                    : 4578.438
 ARIMA(3,1,0)(0,0,1)[12] with drift         : 4578.91
 ARIMA(3,1,0)(0,0,2)[12]                    : 4575.713
 ARIMA(3,1,0)(0,0,2)[12] with drift         : 4576.374
 ARIMA(3,1,0)(1,0,0)[12]                    : 4577.627
 ARIMA(3,1,0)(1,0,0)[12] with drift         : 4578.148
 ARIMA(3,1,0)(1,0,1)[12]                    : Inf
 ARIMA(3,1,0)(1,0,1)[12] with drift         : Inf
 ARIMA(3,1,0)(2,0,0)[12]                    : 4571.48
 ARIMA(3,1,0)(2,0,0)[12] with drift         : 4572.324
 ARIMA(3,1,1)                               : 4581.285
 ARIMA(3,1,1)            with drift         : 4581.576
 ARIMA(3,1,1)(0,0,1)[12]                    : 4578.762
 ARIMA(3,1,1)(0,0,1)[12] with drift         : 4579.224
 ARIMA(3,1,1)(1,0,0)[12]                    : 4577.945
 ARIMA(3,1,1)(1,0,0)[12] with drift         : 4578.452
 ARIMA(3,1,2)                               : 4568.698
 ARIMA(3,1,2) with drift         : Inf
 ARIMA(4,1,0)                               : 4575.634
 ARIMA(4,1,0)            with drift         : 4575.534
 ARIMA(4,1,0)(0,0,1)[12]                    : 4574.175
 ARIMA(4,1,0)(0,0,1)[12] with drift         : 4574.312
 ARIMA(4,1,0)(1,0,0)[12]                    : 4573.622
 ARIMA(4,1,0)(1,0,0)[12] with drift         : 4573.812
 ARIMA(4,1,1)                               : 4556.801
 ARIMA(4,1,1)            with drift         : 4554.628
 ARIMA(5,1,0)                               : 4561.352
 ARIMA(5,1,0)            with drift         : 4560.508



 Best model: ARIMA(4,1,1)            with drift         </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Series: df_ts 
ARIMA(4,1,1) with drift 

Coefficients:
         ar1      ar2     ar3      ar4      ma1   drift
      1.1535  -0.4942  0.1912  -0.1603  -0.6749  0.3205
s.e.  0.0758   0.0622  0.0534   0.0365   0.0703  0.1523

sigma^2 = 16.95:  log likelihood = -2270.24
AIC=4554.49   AICc=4554.63   BIC=4587.3</code></pre>
</div>
</div>
</section>
</section>
<section id="using-modeltime-framework" class="level1">
<h1>Using modeltime framework</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_time_series</span>(date, cpi_energy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>with model time, it is pretty easy to do get the value for arima.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">cv_splits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">time_series_split</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_var =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assess =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'13 months'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cumulative =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb58-3"></span>
<span id="cb58-4">cv_splits <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb58-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tk_time_series_cv_plan</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb58-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_time_series_cv_plan</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.date_var =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.value =</span> cpi_energy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/time-series/05-arima/index_files/figure-html/unnamed-chunk-25-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidymodels)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ broom        1.0.6      ✔ rsample      1.2.1 
✔ dials        1.2.1      ✔ tibble       3.2.1 
✔ infer        1.0.7      ✔ tidyr        1.3.1 
✔ modeldata    1.3.0      ✔ tune         1.2.1 
✔ parsnip      1.2.1      ✔ workflows    1.1.4 
✔ purrr        1.0.2      ✔ workflowsets 1.1.0 
✔ recipes      1.0.10     ✔ yardstick    1.3.1 </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: package 'broom' was built under R version 4.3.3</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard()  masks scales::discard()
✖ dplyr::filter()   masks stats::filter()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Dig deeper into tidy modeling with R at https://www.tmwr.org</code></pre>
</div>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(parsnip)</span>
<span id="cb64-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(modeltime)</span>
<span id="cb64-3"></span>
<span id="cb64-4">model_fit_arima <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arima_reg</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb64-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto_arima'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb64-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(cpi_energy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> date, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">training</span>(cv_splits))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>frequency = 12 observations per 1 year</code></pre>
</div>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1">model_fit_arima</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>parsnip model object

Series: outcome 
ARIMA(0,1,2)(0,0,2)[12] 

Coefficients:
         ma1     ma2    sma1    sma2
      0.5229  0.0895  0.0733  0.0907
s.e.  0.0356  0.0358  0.0400  0.0359

sigma^2 = 16.45:  log likelihood = -2222.54
AIC=4455.07   AICc=4455.15   BIC=4478.42</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Time-Series</category>
  <category>ARIMA</category>
  <category>Decomposition</category>
  <guid>https://fderyckel.github.io/blog.html/posts/time-series/05-arima/</guid>
  <pubDate>Mon, 08 Jan 2024 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Hotel forecasting</title>
  <dc:creator>François de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/ts-forecast/hotel-booking/</link>
  <description><![CDATA[ 





<p>Forceasting hotel demands from medium post Data from Kaggle</p>
<section id="python-version" class="level1">
<h1>Python version</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"></span>
<span id="cb1-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/hotel_bookings.csv'</span>)</span>
<span id="cb1-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.rename(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'arrival_date_year'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>, </span>
<span id="cb1-5">                          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'arrival_date_month'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>, </span>
<span id="cb1-6">                          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'arrival_date_day_of_month'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'day'</span>})</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># turn the months into numbers</span></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> monthToNum(shortMonth):</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'January'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'February'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'March'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb1-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'April'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'May'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'June'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb1-12">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'July'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'August'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'September'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, </span>
<span id="cb1-13">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'October'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'November'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'December'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb1-14">    }[shortMonth]</span>
<span id="cb1-15">    </span>
<span id="cb1-16">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(monthToNum)</span>
<span id="cb1-17">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'day'</span>]])</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#filter hotel resort and remove cancelations</span></span>
<span id="cb1-20">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_canceled'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hotel'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Resort Hotel'</span>)]</span>
<span id="cb1-21">t_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hotel'</span>].count().reset_index().rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hotel'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>})</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-2"></span>
<span id="cb2-3">plt.plot(t_df.ds, t_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>])</span>
<span id="cb2-4">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/ts-forecast/hotel-booking/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="614"></p>
</figure>
</div>
</div>
</div>
<p>In a very naive and limited way let’s create a training and testing set (keeping only last month for testing). This is obviously a poor choices as ideally we would need to test multiple months.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">train_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_df.loc[(t_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2015-01-01'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (t_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017-08-01'</span>)]</span>
<span id="cb3-2">test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_df.loc[(t_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017-08-01'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (t_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017-09-01'</span>)]</span></code></pre></div>
</div>
<p>Using MAE (Mean Absolute Error) to estimate the suitability our model.</p>
<section id="method-1.-arima." class="level2">
<h2 class="anchored" data-anchor-id="method-1.-arima.">Method 1. Arima.</h2>


</section>
</section>

 ]]></description>
  <category>time-series</category>
  <category>forecasting</category>
  <guid>https://fderyckel.github.io/blog.html/posts/ts-forecast/hotel-booking/</guid>
  <pubDate>Thu, 28 Dec 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>KNN - K Nearest Neighbor</title>
  <dc:creator>François de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/</link>
  <description><![CDATA[ 





<p>One of the very first ML algorithm (because of its ease) I expose is KNN. In this post, we’ll learn about KNN using Python (with the Sklearn package) and using R with packages from the tidymodel framework.</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>KNN stands for <em>K Nearest Neighbor</em>.</p>
<p>KNN is not really a machine learning techniques in the sense that it trains a model. In the case of KNN, there is no training. We are waiting for test data to see what label (or value) will the the new data will get. We then say that KNN is a lazy learner (as opposed to eager learners like SVM or RF). Nonetheless, it is a supervised ML algorithm that can be used for both classification and regression. The intuition behind the model is that observations that are closed to each other (close in terms of distance in a hyperplane) have similar labels (classification) or values (regression).</p>
<p>As mentioned, there is no training phase when using KNN. Instead, there is only prediction.<br>
We take an observation and check the <strong>K</strong> observations next to it. We check the label of the K observations next to our data to be labeled and using a majority voting system we assign the label. For regression, it calculates the average or weighted average of the target values of the K neighbors to predict the value for the input data point.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/knn01.png" class="img-fluid figure-img"></p>
<figcaption>KNN illustration</figcaption>
</figure>
</div>
<p>Looking at the above image, we can see that, using k=3, the 3 observations closest to the star (our data to be classified) are all brown circle. Hence we should classify the star as a brown circle instead of an orange rectangle.</p>
<div class="callout callout-style-simple callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Scaling
</div>
</div>
<div class="callout-body-container callout-body">
<p>Because KNN use distance, it is important to scale the data as a pre-processing steps. Otherwise, features with big scale (let’s say price) will skew the distance against features with lower scale (let’s say percentage).</p>
</div>
</div>
<p>Using probability terminology, one can say that KNN method is a direct attempt at approximating the conditional expectation using actual data.</p>
<p>In the case of <strong>regression</strong>, the estimation function could be written as <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D(x)%20=%20%5Ctext%7BAverage%20%7D%20%5By_i%7Cx_i%20%5Cin%20%5Cmathcal%7BN%7D_k(x)%5D"> where <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D_k%20(x)"> is the neighborhood of x containing the k-closest observations.</p>
<p>In the case of <strong>classification</strong>, we use a majority voting system.</p>
<section id="pros-cons-of-knn" class="level2">
<h2 class="anchored" data-anchor-id="pros-cons-of-knn">Pros-Cons of KNN</h2>
<section id="pros" class="level3">
<h3 class="anchored" data-anchor-id="pros">Pros</h3>
<ul>
<li>Easy to understand intuition, mathematics (Euclidean Distance)</li>
<li>KNN is non-parametric. It’s not making any assumptions on the the type of distribution of the data</li>
<li>only one parameter to tune</li>
</ul>
</section>
<section id="cons" class="level3">
<h3 class="anchored" data-anchor-id="cons">Cons</h3>
<ul>
<li>non-efficient in terms of memory</li>
<li>non-efficient on speed of execution with new data</li>
<li>not suitable for high dimensional data</li>
<li>not suitable for big data sets</li>
</ul>
</section>
</section>
</section>
<section id="starting-example-with-simple-data" class="level1">
<h1>Starting example with simple data</h1>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>]</span>
<span id="cb1-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>]</span>
<span id="cb1-3">classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-4"></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"></span>
<span id="cb1-8">plt.scatter(x, y, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classes)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/py_scatterplot1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Now let’s create a KNN object and a new point</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.neighbors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KNeighborsClassifier</span>
<span id="cb2-2"></span>
<span id="cb2-3">knn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KNeighborsClassifier(n_neighbors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-4">knn.fit(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(x, y)), classes)</span></code></pre></div>
<div class="cell-output-display">
<style>#sk-container-id-1 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-1 {
  color: var(--sklearn-color-text);
}

#sk-container-id-1 pre {
  padding: 0;
}

#sk-container-id-1 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-1 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-1 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-1 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-1 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-1 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-1 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-1 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-1 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-1 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-1 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-1 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-1 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-1 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-1 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-1 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-1 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-1 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-1 div.sk-label label.sk-toggleable__label,
#sk-container-id-1 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-1 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-1 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-1 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-1 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-1 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-1 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-1 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-1 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-1 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-1 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</a></style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>KNeighborsClassifier(n_neighbors=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked=""><label for="sk-estimator-id-1" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;KNeighborsClassifier<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html">?<span>Documentation for KNeighborsClassifier</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div> </div></div></div></div>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">new_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-3">new_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb3-4">new_point <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(new_x, new_y)]</span>
<span id="cb3-5">prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> knn.predict(new_point)</span>
<span id="cb3-6"></span>
<span id="cb3-7">plt.scatter(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [new_x], y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [new_y], c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [prediction[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb3-8">plt.text(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"new point, class:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prediction[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/py_scatterplot2-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb4-3"></span>
<span id="cb4-4">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), </span>
<span id="cb4-5">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>), </span>
<span id="cb4-6">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb4-7"></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> classes)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/r_scatterplot1-5.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Using the tidymodel framework, we are first creating a recipe. In the tidymodel framework, a recipe apply transformations to the original data set. In our case the only needed transformation is scaling. Next, we apply that scaling transformation to the new point.</p>
<p>Using ‘parnsip’, we create the KNN object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(recipes)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(parsnip)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a recipe</span></span>
<span id="cb5-5">df_rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(classes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_scale</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>classes) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prep</span>()</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply the recipe on our dataset (using 'juice()')</span></span>
<span id="cb5-10">df_juiced <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">juice</span>(df_rec)</span>
<span id="cb5-11"></span>
<span id="cb5-12">new_point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply the recipe on new data (using 'bake()')</span></span>
<span id="cb5-15">df_baked <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bake</span>(df_rec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_data =</span> new_point)</span>
<span id="cb5-16"></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a KNN model </span></span>
<span id="cb5-18">knn_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nearest_neighbor</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">neighbors =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kknn'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_mode</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classification'</span>)</span>
<span id="cb5-21"></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fit the KNN model to our data</span></span>
<span id="cb5-23">knn_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knn_model <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(classes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df_juiced)</span>
<span id="cb5-24">knn_fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>parsnip model object


Call:
kknn::train.kknn(formula = classes ~ ., data = data, ks = min_rows(3,     data, 5))

Type of response variable: nominal
Minimal misclassification: 0.1
Best kernel: optimal
Best k: 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict new data using the fitted KNN model. </span></span>
<span id="cb7-2">prediction <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> knn_fit, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_data =</span> df_baked)</span>
<span id="cb7-3">new_point_pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(new_point, prediction) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classes =</span> .pred_class)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the new prediction</span></span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(df, new_point_pred), </span>
<span id="cb7-8">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> classes)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> new_point_pred, </span>
<span id="cb7-11">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new point, class:'</span>, new_point_pred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>classes)), </span>
<span id="cb7-12">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nudge_x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nudge_y =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/r_scatterplot2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="example-with-synthetic-data" class="level1">
<h1>Example with synthetic data</h1>
<p>In this example, we create a data set of a 1000 observations (using numbers taken from a normal distribution with a sd of 2.). We’ll make 4 clusters of 250 observations. Because the data comes from a normal distribution, there is no need to scale them this time. We’ll then do a usual split 80-20 % for training and testing set. And we’ll test our data using either K = 5 or K = 19. And then check the accuracy score.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_blobs</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create our synthetic data</span></span>
<span id="cb8-4">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_blobs(n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, n_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb8-5">                  centers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, cluster_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb8-6">                  random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualizing the dataset </span></span>
<span id="cb8-9">plt.scatter(X[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y, s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/py_synData_scatterplot1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Splitting our data set into training &amp; testing + running KNN on the data</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.neighbors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KNeighborsClassifier</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># splitting our data into training and testing</span></span>
<span id="cb9-5">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, stratify <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y, random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>)</span>
<span id="cb9-6"></span>
<span id="cb9-7">knn5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KNeighborsClassifier(n_neighbors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb9-8">knn19 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KNeighborsClassifier(n_neighbors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fit our 'model' with either '5' or '19' Nearest Neighbors</span></span>
<span id="cb9-11">knn5.fit(X_train, y_train)</span></code></pre></div>
<div class="cell-output-display">
<style>#sk-container-id-2 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-2 {
  color: var(--sklearn-color-text);
}

#sk-container-id-2 pre {
  padding: 0;
}

#sk-container-id-2 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-2 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-2 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-2 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-2 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-2 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-2 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-2 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-2 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-2 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-2 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-2 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-2 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-2 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-2 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-2 div.sk-label label.sk-toggleable__label,
#sk-container-id-2 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-2 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-2 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-2 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-2 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-2 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-2 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-2 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-2 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</a></style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" checked=""><label for="sk-estimator-id-2" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;KNeighborsClassifier<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html">?<span>Documentation for KNeighborsClassifier</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>KNeighborsClassifier()</pre></div> </div></div></div></div>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">knn19.fit(X_train, y_train)</span></code></pre></div>
<div class="cell-output-display">
<style>#sk-container-id-3 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-3 {
  color: var(--sklearn-color-text);
}

#sk-container-id-3 pre {
  padding: 0;
}

#sk-container-id-3 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-3 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-3 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-3 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-3 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-3 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-3 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-3 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-3 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-3 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-3 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-3 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-3 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-3 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-3 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-3 div.sk-label label.sk-toggleable__label,
#sk-container-id-3 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-3 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-3 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-3 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-3 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-3 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-3 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-3 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-3 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</a></style><div id="sk-container-id-3" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>KNeighborsClassifier(n_neighbors=19)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox" checked=""><label for="sk-estimator-id-3" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;KNeighborsClassifier<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html">?<span>Documentation for KNeighborsClassifier</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>KNeighborsClassifier(n_neighbors=19)</pre></div> </div></div></div></div>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply prediction on our test set</span></span>
<span id="cb11-2">y_pred_5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> knn5.predict(X_test)</span>
<span id="cb11-3">y_pred_19 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> knn19.predict(X_test)</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accuracy with K = 5 is'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(accuracy_score(y_test, y_pred_5)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy with K = 5 is 84.0 %</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accuracy with k = 19 is'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(accuracy_score(y_test, y_pred_19)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy with k = 19 is 85.5 %</code></pre>
</div>
</div>
<p>Let’s visualize both ‘models’ and the impact of the choice of K.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#using subplots to compare</span></span>
<span id="cb15-2">plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first subplot</span></span>
<span id="cb15-5">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-6">plt.scatter(X_test[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X_test[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_pred_5, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb15-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predictions with K=5'</span>)</span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># second subplot</span></span>
<span id="cb15-10">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb15-11">plt.scatter(X_test[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X_test[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_pred_19, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb15-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Prediction with K=19'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/py_synData_scatterplot4-3.png" class="img-fluid figure-img" width="864"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create our synthetic data</span></span>
<span id="cb16-2">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb16-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, </span>
<span id="cb16-4">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb16-5">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, </span>
<span id="cb16-6">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, </span>
<span id="cb16-7">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb16-8">df3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, </span>
<span id="cb16-9">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb16-10">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb16-11">df4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb16-12">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb16-13">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb16-14">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(df1, df2, df3, df4) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(classes))</span>
<span id="cb16-16"></span>
<span id="cb16-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualizing the dataset </span></span>
<span id="cb16-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> classes)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/r_synData_scatterplot1-5.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This time, we split the data in a training / testing set.<br>
Also because the data were already scaled during the generative process; there is no need to redo that step.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rsample)</span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(yardstick)</span>
<span id="cb17-3"></span>
<span id="cb17-4">df_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">initial_split</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strata =</span> classes, )</span>
<span id="cb17-5">df_train <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">training</span>(df_split)</span>
<span id="cb17-6">df_test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testing</span>(df_split)</span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#let's first try the ideal model</span></span>
<span id="cb17-9">knn_model_5 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nearest_neighbor</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">neighbors =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kknn'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_mode</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classification'</span>)</span>
<span id="cb17-12"></span>
<span id="cb17-13">knn_model_19 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nearest_neighbor</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">neighbors =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kknn'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_mode</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classification'</span>)</span>
<span id="cb17-16"></span>
<span id="cb17-17">knn_fit_5 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knn_model_5 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(classes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df_train) </span>
<span id="cb17-18">knn5 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knn_fit_5 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(df_test) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(df_test) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'knn5'</span>)</span>
<span id="cb17-20">knn5 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accuracy</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> classes, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> .pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  .metric  .estimator .estimate
  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;
1 accuracy multiclass      0.84</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">knn_fit_19 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knn_model_19 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(classes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df_train)</span>
<span id="cb19-2">knn19 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knn_fit_19 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(df_test) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(df_test) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'knn19'</span>)</span>
<span id="cb19-4">knn19 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accuracy</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> classes, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> .pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  .metric  .estimator .estimate
  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;
1 accuracy multiclass      0.87</code></pre>
</div>
</div>
<p>Let’s visualize both ‘models’ and the impact of the choice of K. Note, we have just plotted the predictions, we have not plotted the actual data points used to measure the <strong>K nearest</strong> observations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">df_pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(knn5, knn19)</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df_pred, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> .pred_class)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/r_SynData_scatterplot5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
<p>Because the data are already pretty well separated, the only changes we see easily are the ones in the junction between 2 clusters of observations.</p>
</section>
<section id="example-with-a-financial-dataset" class="level1">
<h1>Example with a financial dataset</h1>
<p>This time, we are going to use a stock price to perform KNN.</p>
<section id="loading-setting-up-and-feature-engineering" class="level2">
<h2 class="anchored" data-anchor-id="loading-setting-up-and-feature-engineering">Loading, setting up and feature engineering</h2>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<p>Loading and checking the data</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb22-3"></span>
<span id="cb22-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/AA.csv'</span>)</span>
<span id="cb22-5">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>])</span>
<span id="cb22-6">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sort_values(by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>, inplace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb22-7">df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb22-8"></span>
<span id="cb22-9">df.shape</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(5821, 12)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">df.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             open   high    low  ...   vwap           label  changeOverTime
date                             ...                                       
2001-01-02  80.50  80.95  76.60  ...  78.35  January 02, 01         -0.0373
2001-01-03  77.50  80.50  75.24  ...  78.10  January 03, 01          0.0135
2001-01-04  78.55  81.25  77.65  ...  80.00  January 04, 01          0.0325
2001-01-05  81.10  81.70  78.85  ...  80.05  January 05, 01         -0.0185
2001-01-08  79.60  85.91  79.00  ...  81.90  January 08, 01          0.0151

[5 rows x 12 columns]</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">plt.plot(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adjClose'</span>])</span>
<span id="cb26-2">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/py-loadFinanData-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#only keep useful columns</span></span>
<span id="cb27-2">df1a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unadjustedVolume'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'change'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'changePercent'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vwap'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'changeOverTime'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#or easier actually ;-) </span></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#df1b = df.iloc[:, :5]</span></span>
<span id="cb27-5"></span>
<span id="cb27-6">df1a.describe()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              open         high  ...     adjClose        volume
count  5821.000000  5821.000000  ...  5821.000000  5.821000e+03
mean     46.372343    47.097133  ...    40.404558  6.519558e+06
std      24.755757    25.075361  ...    18.945874  5.452542e+06
min       5.500000     5.950000  ...     5.360000  4.254680e+05
25%      24.990000    25.420000  ...    23.620000  2.656970e+06
50%      38.260000    38.780000  ...    36.270000  5.129900e+06
75%      69.210000    69.980000  ...    56.910000  8.773242e+06
max     115.010000   117.190000  ...    96.360000  1.007518e+08

[8 rows x 6 columns]</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check missing values</span></span>
<span id="cb29-2">df1a.isnull().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>open        0
high        0
low         0
close       0
adjClose    0
volume      0
dtype: int64</code></pre>
</div>
</div>
<p>No missing values and we can go ahead!</p>
<p>Setting up a few predictors.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb31-2"></span>
<span id="cb31-3">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_c'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>]</span>
<span id="cb31-4">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_l'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'low'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>]</span>
<span id="cb31-5">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ret_21d'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>].shift(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>))</span>
<span id="cb31-6">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'roll_sd_ret21d_1Y'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ret_21d'</span>].rolling(window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span>).std()</span>
<span id="cb31-7">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volum_sma200'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volume'</span>].rolling(window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199</span>).mean()</span>
<span id="cb31-8">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perc_above_volu_sma200'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volume'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volum_sma200'</span>])</span>
<span id="cb31-9">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'roll_sd_volum_1Y'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volume'</span>].rolling(window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span>).std()</span>
<span id="cb31-10">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma50'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>].rolling(window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>).mean()</span>
<span id="cb31-11">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perc_above_sma50'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma50'</span>])</span>
<span id="cb31-12">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma200'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>].rolling(window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>).mean()</span>
<span id="cb31-13">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perc_above_sma200'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma200'</span>])</span>
<span id="cb31-14">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'roll_corr_sma50_sma200'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma200'</span>].rolling(window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span>).corr(df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma50'</span>])</span>
<span id="cb31-15"></span>
<span id="cb31-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setting up a target variable. </span></span>
<span id="cb31-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is the stock above 5% in 2 weeks time. </span></span>
<span id="cb31-18">df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>].shift(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.015</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-19"></span>
<span id="cb31-20">df1a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'low'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adjClose'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volume'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma50'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sma200'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'volum_sma200'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-21">df1a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a.dropna()</span>
<span id="cb31-22">target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>]</span>
<span id="cb31-23">df1a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-24"></span>
<span id="cb31-25"></span>
<span id="cb31-26">df1a.shape</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(5371, 9)</code></pre>
</div>
</div>
<p>Splitting the data set for training and testing. Because time-series and auto-correlation, we won’t randomly take observations from the set for training. Instead, we split in the first 80% of data for training and the last 20% for testing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (train_test_split, GridSearchCV)</span>
<span id="cb33-2"></span>
<span id="cb33-3">x_train, x_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df1a, target, test_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, shuffle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb33-4"></span>
<span id="cb33-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The size for the train and test dataset are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_test)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> observations"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The size for the train and test dataset are 4296, 1075 observations</code></pre>
</div>
</div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb35-4"></span>
<span id="cb35-5">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../../raw_data/AA.csv'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb35-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb35-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(date, open, high, low, close, volume)</span>
<span id="cb35-8"></span>
<span id="cb35-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> close)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb35-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/r-loadFinanData-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check for missing values </span></span>
<span id="cb36-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize_all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(.))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 6
   date  open  high   low close volume
  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;  &lt;int&gt;
1     0     0     0     0     0      0</code></pre>
</div>
</div>
<p>No missing values, we can go ahead!</p>
<p>Let’s create the predictors.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(timetk)</span>
<span id="cb38-3"></span>
<span id="cb38-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#defining some rolling functions </span></span>
<span id="cb38-5">mean_roll_50d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slidify</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.period =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb38-6">mean_roll_107d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slidify</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.period =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb38-7">mean_roll_199d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slidify</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.period =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb38-8">sd_roll_19d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slidify</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> sd, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.period =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb38-9">sd_roll_31d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slidify</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> sd, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.period =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb38-10">sd_roll_1Y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slidify</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> sd, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.period =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb38-11">corr_roll_1Y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slidify</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor</span>(.x, .y), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.period =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb38-12"></span>
<span id="cb38-13">yo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> TTR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aroon</span>(df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'low'</span>)], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb38-14">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>aroon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> yo[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb38-15">yo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> TTR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CCI</span>(df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'low'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>)], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>)</span>
<span id="cb38-16">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cci <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> yo</span>
<span id="cb38-17">yo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> TTR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chaikinVolatility</span>(df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'low'</span>)], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span>
<span id="cb38-18">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>chaikinVol <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> yo</span>
<span id="cb38-19"></span>
<span id="cb38-20">df1a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">o_c =</span> (open <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> close) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> close, </span>
<span id="cb38-22">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h_l =</span> (high <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> low) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> close, </span>
<span id="cb38-23">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ret_21d =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(close<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lag</span>(close, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>)), </span>
<span id="cb38-24">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">roll_sd_ret21d_1Y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd_roll_1Y</span>(ret_21d), </span>
<span id="cb38-25">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">roll_sd_vol_31d =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd_roll_31d</span>(volume), </span>
<span id="cb38-26">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sma50 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean_roll_50d</span>(close), </span>
<span id="cb38-27">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perc_above_sma50 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(close <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sma50), </span>
<span id="cb38-28">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sma200 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean_roll_199d</span>(close), </span>
<span id="cb38-29">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perc_above_sma200 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(close <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sma50), </span>
<span id="cb38-30">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sma107_vol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean_roll_107d</span>(volume), </span>
<span id="cb38-31">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perc_above_volu_sma107 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(volume <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sma107_vol), </span>
<span id="cb38-32">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sma200_vol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean_roll_199d</span>(volume), </span>
<span id="cb38-33">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perc_above_volu_sma200 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(volume <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sma200_vol), </span>
<span id="cb38-34">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">roll_sd_perc_above_volu_sma200_19d =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd_roll_19d</span>(perc_above_volu_sma200), </span>
<span id="cb38-35">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">roll_corr_sma50_sma200_1Y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">corr_roll_1Y</span>(sma50, sma200), </span>
<span id="cb38-36">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">target =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lead</span>(close, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.015</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> close, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> ))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>open, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>high, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>low, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>close, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>volume, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sma50, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sma200,</span>
<span id="cb38-38">         <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sma107_vol, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sma200_vol) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop_na</span>()</span></code></pre></div>
</div>
<p>Let’s now split our training and testing set.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">df_train <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df1a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df1a)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>), ]</span>
<span id="cb39-2">df_test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df1a[(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df1a)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df1a) , ]</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="base-model" class="level2">
<h2 class="anchored" data-anchor-id="base-model">Base Model</h2>
<p>This is when we create the model and create the predictions.</p>
<p>Now we will start building our KNN model using a pipeline or a workflow (for R), First, we need to scale the data then we can go on the classification task.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb40-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinMaxScaler</span>
<span id="cb40-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.neighbors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KNeighborsClassifier</span>
<span id="cb40-4"></span>
<span id="cb40-5">knn_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline([</span>
<span id="cb40-6">  (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scaler'</span>, MinMaxScaler()), </span>
<span id="cb40-7">  (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classifier'</span>, KNeighborsClassifier())</span>
<span id="cb40-8">])</span>
<span id="cb40-9"></span>
<span id="cb40-10">knn_model.fit(x_train, y_train)</span></code></pre></div>
<div class="cell-output-display">
<style>#sk-container-id-4 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-4 {
  color: var(--sklearn-color-text);
}

#sk-container-id-4 pre {
  padding: 0;
}

#sk-container-id-4 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-4 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-4 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-4 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-4 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-4 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-4 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-4 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-4 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-4 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-4 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-4 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-4 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-4 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-4 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-4 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-4 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-4 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-4 div.sk-label label.sk-toggleable__label,
#sk-container-id-4 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-4 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-4 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-4 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-4 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-4 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-4 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-4 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-4 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-4 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-4 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</a></style><div id="sk-container-id-4" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[('scaler', MinMaxScaler()),
                ('classifier', KNeighborsClassifier())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-4" type="checkbox"><label for="sk-estimator-id-4" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;Pipeline<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html">?<span>Documentation for Pipeline</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>Pipeline(steps=[('scaler', MinMaxScaler()),
                ('classifier', KNeighborsClassifier())])</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox"><label for="sk-estimator-id-5" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;MinMaxScaler<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.MinMaxScaler.html">?<span>Documentation for MinMaxScaler</span></a></label><div class="sk-toggleable__content fitted"><pre>MinMaxScaler()</pre></div> </div></div><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-6" type="checkbox"><label for="sk-estimator-id-6" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;KNeighborsClassifier<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html">?<span>Documentation for KNeighborsClassifier</span></a></label><div class="sk-toggleable__content fitted"><pre>KNeighborsClassifier()</pre></div> </div></div></div></div></div></div>
</div>
</div>
<p>Go onto predictions</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (ConfusionMatrixDisplay, classification_report)</span>
<span id="cb41-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (accuracy_score, f1_score)</span>
<span id="cb41-3"></span>
<span id="cb41-4">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> knn_model.predict(x_test)</span>
<span id="cb41-5"></span>
<span id="cb41-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or we can also use a probability model </span></span>
<span id="cb41-7">y_pred_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> knn_model.predict_proba(x_test)</span>
<span id="cb41-8"></span>
<span id="cb41-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># few checking</span></span>
<span id="cb41-10">knn_model.classes_</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>array([-1,  1])</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">y_pred_proba[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>array([[0.8, 0.2],
       [1. , 0. ],
       [1. , 0. ],
       [0.8, 0.2],
       [1. , 0. ]])</code></pre>
</div>
</div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<p>Let’s define a basic model in R using the tidymodel framework.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(recipes)</span>
<span id="cb45-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(parsnip)</span>
<span id="cb45-3"></span>
<span id="cb45-4">df_rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> target <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df_train) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update_role</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_role =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ID'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_scale</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_numeric_predictors</span>()) </span>
<span id="cb45-7">df_prep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df_rec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prep</span>(df_train)</span>
<span id="cb45-8">df_juiced <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">juice</span>(df_prep)</span>
<span id="cb45-9">df_baked <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df_prep <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bake</span>(df_test)</span>
<span id="cb45-10"></span>
<span id="cb45-11">knn_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nearest_neighbor</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_mode</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classification'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kknn'</span>)</span>
<span id="cb45-14"></span>
<span id="cb45-15">knn_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knn_model <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(target <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df_juiced)</span>
<span id="cb45-16">knn_pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(knn_fit, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_data =</span> df_baked)</span>
<span id="cb45-17">df_pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(df_baked <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(date, target), knn_pred)</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="checking-quality-of-predictions" class="level2">
<h2 class="anchored" data-anchor-id="checking-quality-of-predictions">Checking quality of predictions</h2>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-5-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-1" aria-controls="tabset-5-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-5-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-2" aria-controls="tabset-5-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-5-1" class="tab-pane active" aria-labelledby="tabset-5-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(classification_report(y_test, y_pred)) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              precision    recall  f1-score   support

          -1       0.47      0.69      0.56       542
           1       0.39      0.21      0.27       533

    accuracy                           0.45      1075
   macro avg       0.43      0.45      0.41      1075
weighted avg       0.43      0.45      0.42      1075</code></pre>
</div>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checking accuracy and f1</span></span>
<span id="cb48-2">acc_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_train, knn_model.predict(x_train))</span>
<span id="cb48-3">acc_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, knn_model.predict(x_test))</span>
<span id="cb48-4">f1_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f1_score(y_test, knn_model.predict(x_test))</span>
<span id="cb48-5"></span>
<span id="cb48-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy for training set is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.3}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and Accuracy for testing set is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.3}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy for training set is 0.928 and Accuracy for testing set is 0.449</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"f1 score for test set is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.3}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>f1 score for test set is 0.271</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">conf_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfusionMatrixDisplay.from_estimator(</span>
<span id="cb52-2">  knn_model, x_test, y_test, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.Blues</span>
<span id="cb52-3">)</span>
<span id="cb52-4"></span>
<span id="cb52-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Confusion Matrix'</span>)</span>
<span id="cb52-6">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/py_baseMoel_prediction2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (roc_curve, RocCurveDisplay)</span>
<span id="cb53-2"></span>
<span id="cb53-3">rocCurve <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RocCurveDisplay.from_estimator(knn_model, x_test, y_test, name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tuned KNN'</span>)</span>
<span id="cb53-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ROC Curve'</span>)</span>
<span id="cb53-5">plt.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Random 50:50'</span>)</span>
<span id="cb53-6">plt.legend()</span>
<span id="cb53-7">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/py_baseMoel_prediction3-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-5-2" class="tab-pane" aria-labelledby="tabset-5-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(yardstick)</span>
<span id="cb54-2">df_pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metrics</span>(target, .pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  .metric  .estimator .estimate
  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;
1 accuracy binary        0.507 
2 kap      binary        0.0189</code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">df_pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f_meas</span>(target, .pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  .metric .estimator .estimate
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;
1 f_meas  binary         0.539</code></pre>
</div>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">df_pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">precision</span>(target, .pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  .metric   .estimator .estimate
  &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;
1 precision binary         0.491</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">cm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">conf_mat</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df_pred, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> target, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> .pred_class)</span>
<span id="cb60-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoplot</span>(cm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'heatmap'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/r_baseMoel_prediction2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">knn_pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(knn_fit, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_data =</span> df_baked, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prob'</span>)</span>
<span id="cb61-2">df_pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(df_baked <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(date, target), knn_pred)</span>
<span id="cb61-3"></span>
<span id="cb61-4"></span>
<span id="cb61-5">df_pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">roc_curve</span>(target, .pred_1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb61-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/r_baseMoel_prediction3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="hyperparameter-tuning" class="level2">
<h2 class="anchored" data-anchor-id="hyperparameter-tuning">Hyperparameter Tuning</h2>
<p>We can always try to fine tune our KNN algorithm to see if we can get a better result on our test set.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-6-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-6-1" aria-controls="tabset-6-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-6-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-6-2" aria-controls="tabset-6-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-6-1" class="tab-pane active" aria-labelledby="tabset-6-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TimeSeriesSplit</span>
<span id="cb62-2"></span>
<span id="cb62-3">tscv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TimeSeriesSplit(n_splits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, gap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb62-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#for train, test in tscv.split(df1a): </span></span>
<span id="cb62-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  print(train, test)</span></span></code></pre></div>
</div>
<p>Let’s find the best parameters through a grid search</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GridSearchCV</span>
<span id="cb63-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> roc_auc_score, auc</span>
<span id="cb63-3"></span>
<span id="cb63-4">knn_model.get_params()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'memory': None, 'steps': [('scaler', MinMaxScaler()), ('classifier', KNeighborsClassifier())], 'verbose': False, 'scaler': MinMaxScaler(), 'classifier': KNeighborsClassifier(), 'scaler__clip': False, 'scaler__copy': True, 'scaler__feature_range': (0, 1), 'classifier__algorithm': 'auto', 'classifier__leaf_size': 30, 'classifier__metric': 'minkowski', 'classifier__metric_params': None, 'classifier__n_jobs': None, 'classifier__n_neighbors': 5, 'classifier__p': 2, 'classifier__weights': 'uniform'}</code></pre>
</div>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">param_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classifier__n_neighbors'</span>: np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)}</span>
<span id="cb65-2"></span>
<span id="cb65-3">gs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GridSearchCV(knn_model, param_grid, </span>
<span id="cb65-4">                  scoring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f1'</span>, n_jobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb65-5">                  cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tscv, </span>
<span id="cb65-6">                  verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb65-7">                  </span>
<span id="cb65-8">gs.fit(x_train, y_train)</span></code></pre></div>
<div class="cell-output-display">
<style>#sk-container-id-5 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-5 {
  color: var(--sklearn-color-text);
}

#sk-container-id-5 pre {
  padding: 0;
}

#sk-container-id-5 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-5 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-5 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-5 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-5 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-5 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-5 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-5 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-5 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-5 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-5 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-5 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-5 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-5 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-5 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-5 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-5 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-5 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-5 div.sk-label label.sk-toggleable__label,
#sk-container-id-5 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-5 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-5 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-5 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-5 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-5 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-5 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-5 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-5 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-5 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-5 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</a></style><div id="sk-container-id-5" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GridSearchCV(cv=TimeSeriesSplit(gap=10, max_train_size=None, n_splits=10, test_size=None),
             estimator=Pipeline(steps=[('scaler', MinMaxScaler()),
                                       ('classifier', KNeighborsClassifier())]),
             n_jobs=-1,
             param_grid={'classifier__n_neighbors': array([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
       19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])},
             scoring='f1', verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-7" type="checkbox"><label for="sk-estimator-id-7" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;GridSearchCV<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html">?<span>Documentation for GridSearchCV</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>GridSearchCV(cv=TimeSeriesSplit(gap=10, max_train_size=None, n_splits=10, test_size=None),
             estimator=Pipeline(steps=[('scaler', MinMaxScaler()),
                                       ('classifier', KNeighborsClassifier())]),
             n_jobs=-1,
             param_grid={'classifier__n_neighbors': array([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
       19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])},
             scoring='f1', verbose=1)</pre></div> </div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-8" type="checkbox"><label for="sk-estimator-id-8" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">best_estimator_: Pipeline</label><div class="sk-toggleable__content fitted"><pre>Pipeline(steps=[('scaler', MinMaxScaler()),
                ('classifier', KNeighborsClassifier(n_neighbors=np.int64(9)))])</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-9" type="checkbox"><label for="sk-estimator-id-9" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;MinMaxScaler<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.MinMaxScaler.html">?<span>Documentation for MinMaxScaler</span></a></label><div class="sk-toggleable__content fitted"><pre>MinMaxScaler()</pre></div> </div></div><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-10" type="checkbox"><label for="sk-estimator-id-10" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;KNeighborsClassifier<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html">?<span>Documentation for KNeighborsClassifier</span></a></label><div class="sk-toggleable__content fitted"><pre>KNeighborsClassifier(n_neighbors=np.int64(9))</pre></div> </div></div></div></div></div></div></div></div></div></div></div>
</div>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Optimal Neighbours: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classifier__n_neighbors'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Best, Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(gs.best_score_,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Optimal Neighbours: 9, Best, Score: 0.3128</code></pre>
</div>
</div>
<p>Let’s now use the best parameter found for our model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> f1_score</span>
<span id="cb68-2"></span>
<span id="cb68-3">tuned_knn_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KNeighborsClassifier(n_neighbors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gs.best_params_[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classifier__n_neighbors'</span>])</span>
<span id="cb68-4"></span>
<span id="cb68-5">tuned_knn_model.fit(x_train, y_train)</span></code></pre></div>
<div class="cell-output-display">
<style>#sk-container-id-6 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-6 {
  color: var(--sklearn-color-text);
}

#sk-container-id-6 pre {
  padding: 0;
}

#sk-container-id-6 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-6 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-6 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-6 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-6 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-6 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-6 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-6 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-6 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-6 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-6 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-6 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-6 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-6 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-6 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-6 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-6 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-6 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-6 div.sk-label label.sk-toggleable__label,
#sk-container-id-6 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-6 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-6 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-6 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-6 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-6 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-6 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-6 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-6 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-6 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-6 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</a></style><div id="sk-container-id-6" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>KNeighborsClassifier(n_neighbors=np.int64(9))</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-11" type="checkbox" checked=""><label for="sk-estimator-id-11" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;KNeighborsClassifier<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html">?<span>Documentation for KNeighborsClassifier</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>KNeighborsClassifier(n_neighbors=np.int64(9))</pre></div> </div></div></div></div>
</div>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"></span>
<span id="cb69-2">y_pred_tuned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tuned_knn_model.predict(x_test)</span></code></pre></div>
</div>
</div>
<div id="tabset-6-2" class="tab-pane" aria-labelledby="tabset-6-2-tab">
<p>Using the tidymodel framework, when it comes to hyperparameters tuning, we then use a workflow to structure all the work for us.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rsample)</span>
<span id="cb70-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(workflows)</span>
<span id="cb70-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tune)</span>
<span id="cb70-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dials)</span>
<span id="cb70-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(yardstick)</span>
<span id="cb70-6"></span>
<span id="cb70-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the CV validation resampls </span></span>
<span id="cb70-8">tscv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rolling_origin</span>(df_train, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initial =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assess =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skip =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cumulative =</span> T)</span>
<span id="cb70-9"></span>
<span id="cb70-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the KNN model with leaving hyperparameters for tuning</span></span>
<span id="cb70-11">knn_model_tuned <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nearest_neighbor</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">neighbors =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tune</span>(), </span>
<span id="cb70-12">                                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight_func =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tune</span>(), </span>
<span id="cb70-13">                                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dist_power =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tune</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_mode</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classification'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kknn'</span>)</span>
<span id="cb70-16"></span>
<span id="cb70-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a grid with different values for the hyperparamter</span></span>
<span id="cb70-18">nn_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid_regular</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">neighbors</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)), </span>
<span id="cb70-19">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">weight_func</span>(), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dist_power</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)),  </span>
<span id="cb70-20">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb70-21"></span>
<span id="cb70-22">knn_param <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parameters</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">neighbors</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">weight_func</span>(), </span>
<span id="cb70-23">                       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dist_power</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span>
<span id="cb70-24">nn_grid_maxEnthropy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid_max_entropy</span>(knn_param, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb70-25"></span>
<span id="cb70-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a workflow that will bring all steps together. </span></span>
<span id="cb70-27">knn_wf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">preprocessor =</span> df_rec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">spec =</span> knn_model_tuned)</span>
<span id="cb70-28"></span>
<span id="cb70-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fitting the models for the various hyperparameters</span></span>
<span id="cb70-30"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(doParallel)</span>
<span id="cb70-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registerDoParallel</span>()</span>
<span id="cb70-32">knn_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tune_grid</span>(knn_wf, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">resamples =</span> tscv, </span>
<span id="cb70-33">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">metrics =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metric_set</span>(accuracy, f_meas, roc_auc), </span>
<span id="cb70-34">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">control =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">control_resamples</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">save_pred =</span> T, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verbose =</span> T), </span>
<span id="cb70-35">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grid =</span> nn_grid_maxEnthropy)</span>
<span id="cb70-36"></span>
<span id="cb70-37"></span>
<span id="cb70-38">metrics <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knn_fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(.metric, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(mean))</span>
<span id="cb70-40"></span>
<span id="cb70-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># another cool trick with collecting predictions for all the models. </span></span>
<span id="cb70-42">all_pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knn_fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(.predictions) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.predictions))</span>
<span id="cb70-43"></span>
<span id="cb70-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now we need to decide which is the 'best' model</span></span>
<span id="cb70-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we say the best model is the one that has the best f1 score</span></span>
<span id="cb70-46">best_knn_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> knn_fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_best</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">metric =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f_meas'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb70-47">best_knn_model</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 9
  neighbors weight_func dist_power .metric .estimator  mean     n std_err
      &lt;int&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
1         7 biweight          1.82 f_meas  binary     0.667    10  0.0424
# ℹ 1 more variable: .config &lt;chr&gt;</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1">knn_fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">metric =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f_meas'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in mtr_info$metric == metric: longer object length is not a multiple of
shorter object length</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/r_tuningHyperpa2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We can fit the best model (the one with the parameters that gives the best f1 score) as the final model. Then we’ll make prediction using that model</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">knn_model_final <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knn_model_tuned <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">finalize_model</span>(best_knn_model)</span>
<span id="cb74-2">knn_final_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knn_model_final <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(target <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df_juiced)</span>
<span id="cb74-3"></span>
<span id="cb74-4">knn_pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(knn_final_fit, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_data =</span> df_baked)</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="final-metric-check" class="level2">
<h2 class="anchored" data-anchor-id="final-metric-check">Final Metric check</h2>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-7-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-7-1" aria-controls="tabset-7-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-7-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-7-2" aria-controls="tabset-7-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-7-1" class="tab-pane active" aria-labelledby="tabset-7-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">acc_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_train, tuned_knn_model.predict(x_train))</span>
<span id="cb75-2">acc_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred_tuned)</span>
<span id="cb75-3">f1_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f1_score(y_test, y_pred_tuned)</span>
<span id="cb75-4"></span>
<span id="cb75-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Training Accuracy </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc_train <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.4}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test Accuracy </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc_test <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.4}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 Training Accuracy  : 0.8119 
 Test Accuracy      : 0.5014</code></pre>
</div>
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test f1 score </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1_test <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.4}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 Test f1 score      : 0.4136</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfusionMatrixDisplay.from_estimator(</span>
<span id="cb79-2">        tuned_knn_model,</span>
<span id="cb79-3">        x_test,</span>
<span id="cb79-4">        y_test,</span>
<span id="cb79-5">        display_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tuned_knn_model.classes_,</span>
<span id="cb79-6">        cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.Blues</span>
<span id="cb79-7">    )</span>
<span id="cb79-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Confusion matrix'</span>)</span>
<span id="cb79-9">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/unnamed-chunk-33-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(classification_report(y_test, y_pred_tuned))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              precision    recall  f1-score   support

          -1       0.50      0.65      0.57       542
           1       0.50      0.35      0.41       533

    accuracy                           0.50      1075
   macro avg       0.50      0.50      0.49      1075
weighted avg       0.50      0.50      0.49      1075</code></pre>
</div>
</div>
</div>
<div id="tabset-7-2" class="tab-pane" aria-labelledby="tabset-7-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1">df_pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(df_baked <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(date, target), knn_pred)</span>
<span id="cb82-2"></span>
<span id="cb82-3"></span>
<span id="cb82-4">df_pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metrics</span>(target, .pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  .metric  .estimator .estimate
  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;
1 accuracy binary        0.503 
2 kap      binary        0.0113</code></pre>
</div>
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">df_pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f_meas</span>(target, .pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  .metric .estimator .estimate
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;
1 f_meas  binary         0.534</code></pre>
</div>
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1">df_pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">precision</span>(target, .pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  .metric   .estimator .estimate
  &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;
1 precision binary         0.488</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1">cm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">conf_mat</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df_pred, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> target, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> .pred_class)</span>
<span id="cb88-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoplot</span>(cm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'heatmap'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/index_files/figure-html/unnamed-chunk-36-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="trading-strategy" class="level2">
<h2 class="anchored" data-anchor-id="trading-strategy">Trading Strategy</h2>
<p>We can then check a trading strategy based on that model.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-8-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-8-1" aria-controls="tabset-8-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-8-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-8-2" aria-controls="tabset-8-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-8-1" class="tab-pane active" aria-labelledby="tabset-8-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1a.copy()</span>
<span id="cb89-2">df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'signal'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tuned_knn_model.predict(df1)</span>
<span id="cb89-3">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'returns'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>]).diff(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>).fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb89-4">df2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'returns'</span>]]</span>
<span id="cb89-5"></span>
<span id="cb89-6">yo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1.merge(df2, left_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, right_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb89-7"></span>
<span id="cb89-8">df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yo</span>
<span id="cb89-9"></span>
<span id="cb89-10">df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strategy'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'returns'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'signal'</span>].shift(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>).fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb89-11">df1.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1.index.tz_localize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utc'</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyfolio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pf</span></code></pre></div>
</div>
</div>
<div id="tabset-8-2" class="tab-pane" aria-labelledby="tabset-8-2-tab">

</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Supervised ML</category>
  <category>KNN</category>
  <category>Classification</category>
  <category>Confusion Matrix</category>
  <category>F1 Measure</category>
  <guid>https://fderyckel.github.io/blog.html/posts/machine-learning-part1/01-knn/</guid>
  <pubDate>Mon, 13 Nov 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Discrete Probability Simulations in R</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/proba-quant/discrete-simulations/</link>
  <description><![CDATA[ 





<p>The idea behind this post is to collect various numerical methods to simulate discrete probability problems.</p>
<section id="expectation-of-a-uniform-variable." class="level1">
<h1>Expectation of a uniform variable.</h1>
<p>Question: what is the expectation if one square a number that is picked at random out of a hat (with replacement) that contains the numbers 1 to 100.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">expec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(expec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3384.936</code></pre>
</div>
</div>
<p>The calculated expectation should be: <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bx=1%7D%5E%7B100%7D%20x%5E2%20P(X=x)%20=%20%5Csum_%7Bx=1%7D%5E%7B100%7D%20x%5E2%20%5Cfrac%7B1%7D%7Bn%7D%20=%20%5Cfrac%7B101%20%5Ccdot%20201%7D%7B6%7D%20=%203383.5"></p>
<p>We could connect this to the <a href="../../../posts/proba-quant/jensen-inequality/index.html">Jensen’s inequality</a> (as we are dealing with a convex function) and show that indeed the expectation of the function is greater than the function of the expectation: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Bf(X)%5D%20%5Cgeq%20f(%5Cmathbb%7BE%7D%5BX%5D)"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">exp_square <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-2">square_exp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(exp_square)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3389.425</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(square_exp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2551.491</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Probability</category>
  <category>Simulations</category>
  <guid>https://fderyckel.github.io/blog.html/posts/proba-quant/discrete-simulations/</guid>
  <pubDate>Mon, 13 Nov 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Jensen’s Inequality</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/proba-quant/jensen-inequality/</link>
  <description><![CDATA[ 





<p>Jensen’s inequality from <a href="https://en.wikipedia.org/wiki/Johan_Jensen_(mathematician)">Johan Jensen</a>, Danish Mathematician, has popped up several times through my quantitative finance journey. As I never explicitly dealt with it, I thought I’ll make a post about it.</p>
<p>The question Jensen’s inequality address is how does the mean of a function relate the function of the mean. First, we’ll check how in the case of linear functions, there are no difference there. Then we’ll go on more complex functions where their concavity (aka second derivative) matters.</p>
<section id="linear-transformations-of-random-variables" class="level1">
<h1>Linear transformations of Random Variables</h1>
<p>What happen when we transform in a linear way a random variable?</p>
<p>We claim that as long as <em>f</em> is linear: <strong>mean(f(x)) == f(mean(x))</strong></p>
<p>Let’s use an easy &amp; simple example. A fair dice is thrown. Let’s imagine a payoff which is a linear function: say, the payoff is <img src="https://latex.codecogs.com/png.latex?2%20*%20%5Ctext%7B(face%20of%20the%20die)%7D%20+%203">.</p>
<p>In this case <img src="https://latex.codecogs.com/png.latex?X"> is a discrete random variable that can take the values <img src="https://latex.codecogs.com/png.latex?%7B1,%202,%203,%204,%205,%206%7D">.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function to define the payoff</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> payoff(x): </span>
<span id="cb1-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's define the outcome of our discrete random variable. </span></span>
<span id="cb1-8">outcomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's calculate the payoff for each outcome</span></span>
<span id="cb1-11">payoffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [payoff(outcome) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> outcome <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> outcomes]</span></code></pre></div>
</div>
<p>With linear transformations and in this example, we have <strong>the mean of the payoff that is equal to the payoff of the mean</strong>.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The mean of the outcomes [1, 2, 3, 4, 5, 6] is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(outcomes)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The payoff of the mean is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>payoff(np.mean(outcomes))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The payoffs are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>payoffs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and the mean of the payoffs is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(payoffs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The mean of the outcomes [1, 2, 3, 4, 5, 6] is 3.5
The payoff of the mean is 10.0
The payoffs are [5, 7, 9, 11, 13, 15] and the mean of the payoffs is 10.0</code></pre>
</div>
</div>
<p>Now this equality doesn’t hold anymore when it comes to non-linear function.</p>
</section>
<section id="convex-transformations-of-random-variables" class="level1">
<h1>Convex transformations of Random Variables</h1>
<p>The <strong>Jensen’s inequality</strong> is in regards to <strong>convex</strong> functions (aka its second derivative is positive on an interval) and states that <em>the mean of the transformation is always greater or equal to the transformation of the mean</em>.</p>
<p>Using the language of probability, we can write that for any convex functions <span id="eq-jensineq"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Bf(X)%5D%20%5Cgeq%20f(%5Cmathbb%7BE%7D%5BX%5D)%20%5Ctag%7B1%7D"></span></p>
<p>Again let’s take an easy example with the convex function <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20X%5E2">. We will use the same inputs (the roll of a die) as the above example.</p>
<p>The intuition is that the mean of squared numbers is greater than the square of the mean numbers. This is because bigger number squared will add extreme value (on the high side) to the mean.</p>
<p>Using a small Python script.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">outcomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># defining our transform functions. </span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> payoff(x): </span>
<span id="cb4-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-6"></span>
<span id="cb4-7">payoffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [payoff(outcome) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> outcome <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> outcomes]</span>
<span id="cb4-8">payoffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>[1, 4, 9, 16, 25, 36]</code></pre>
</div>
</div>
<p>Let’s now calculate both <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Bf(X)%5D"> and <img src="https://latex.codecogs.com/png.latex?f(%5Cmathbb%7BE%7D%5BX%5D)"></p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The mean of the transformed outcomes is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(np.mean(payoffs), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The transformed of the mean is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>payoff(np.mean(outcomes))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The mean of the transformed outcomes is 15.167
The transformed of the mean is 12.25</code></pre>
</div>
</div>
<p>When is it an equality then? When all the observations in the sets have the exact same values, then <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Bf(X)%5D%20=%20f(%5Cmathbb%7BE%7D%5BX%5D)">.</p>
<p>Visually, we could see this on the parabola. <img src="https://fderyckel.github.io/blog.html/posts/proba-quant/jensen-inequality/jensen-parabola.png" class="img-fluid" alt="The mean of the squares greater than the square of the mean"></p>
<section id="simulation" class="level2">
<h2 class="anchored" data-anchor-id="simulation">Simulation</h2>
<p>To make our experiment a bit more realistic, we could simulate 50 roll of dice and check that the Jensen’s inequality still hold. Our convex function is stil <img src="https://latex.codecogs.com/png.latex?f(x)=X%5E2">.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">outcomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> payoff(x): </span>
<span id="cb8-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-5"></span>
<span id="cb8-6">payoffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [payoff(outcome) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> outcome <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> outcomes]</span></code></pre></div>
</div>
<p>And let’s again compare the mean of the transformed vs the transformed of the mean.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The mean of the transformed outcomes is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(payoffs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The transformed of the mean is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>payoff(np.mean(outcomes))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The mean of the transformed outcomes is 14.2
The transformed of the mean is 11.0224</code></pre>
</div>
</div>
</section>
</section>
<section id="jensens-inequality-in-finance" class="level1">
<h1>Jensen’s inequality in finance</h1>
<section id="arithmetic-mean-vs-geometric-mean" class="level2">
<h2 class="anchored" data-anchor-id="arithmetic-mean-vs-geometric-mean">Arithmetic mean vs Geometric mean</h2>
<p>One way, the Jensen’s inequality is used in finance is when it comes to returns. We can indeed compute the average returns as a arithmetic average or as a geometric average.</p>
<p>Let’s say, we have a data set with n observations. Then we define, the arithmetic mean as <img src="https://latex.codecogs.com/png.latex?AM%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5En%20i"> and the geometric mean as <img src="https://latex.codecogs.com/png.latex?GM%20=%20%5Cleft(%20%5Cprod_%7Bi=1%7D%5En%20i%20%5Cright)%5E%7B%5Cfrac%7B1%7D%7Bn%7D%7D"></p>
<p>Using logarithms, and starting with the arithmetic mean, we have: <span id="eq-logAM"><img src="https://latex.codecogs.com/png.latex?log(AM)%20=%20log%20%5Cleft(%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5En%20i%20%5Cright)%20%5Ctag%7B2%7D"></span></p>
<p>Continuing with the geometric mean, we have: <span id="eq-logGM"><img src="https://latex.codecogs.com/png.latex?log%20(GM)%20=%20log%20%5Cleft(%20%5Cprod_%7Bi=1%7D%5En%20i%20%5Cright)%5E%7B%5Cfrac%7B1%7D%7Bn%7D%7D%20=%20%5Cfrac%7B1%7D%7Bn%7D%20log%20%5Cleft(%20%5Cprod_%7Bi=1%7D%5En%20i%20%5Cright)%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5En%20log(i)%20%5Ctag%7B3%7D"></span></p>
<p>We could transform Equation&nbsp;3 saying that the geometric mean is the exponential of the arithmetic mean. <span id="eq-logGM2"><img src="https://latex.codecogs.com/png.latex?GM%20=%20exp%20%5Cleft(%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5En%20i%20%5Cright)%20%5Ctag%7B4%7D"></span></p>
<p>Back to Jensens’s inequality.<br>
The log function is a concave function. We just re-write Equation&nbsp;1 changing the inequality sign: <em>the mean of the transformation is less or equal to the transformation of the mean</em>. On probabilistic terms, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Bf(X)%5D%20%5Cleq%20f(%5Cmathbb%7BE%7D%5BX%5D)"></p>
<p><img src="https://latex.codecogs.com/png.latex?log(GM)%20=%20%5Ctext%7Bmean%20of%20the%20transformation%20(log)%7D"> <img src="https://latex.codecogs.com/png.latex?log(AM)%20=%20%5Ctext%7Btransformation%20(log)%20of%20the%20mean%7D"></p>
<p>If we go back to our dice throwing example, we should see that the <img src="https://latex.codecogs.com/png.latex?log(GM)%20%3C=%20log(AM)">. Let’s model that</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">outcomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb11-2">mean_outcomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(outcomes)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> payoff(x): </span>
<span id="cb11-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.log(x)</span>
<span id="cb11-6"></span>
<span id="cb11-7">payoffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [payoff(outcome) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> outcome <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> outcomes]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Log(GM) - The mean of the transformed (log) is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(payoffs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Log(AM) - The transformed (log) of the mean is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>log(np.mean(outcomes))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Log(GM) - The mean of the transformed (log) is 1.0965418686683501
Log(AM) - The transformed (log) of the mean is 1.252762968495368</code></pre>
</div>
</div>
<p>This match our initial statement. mean of the transformed being smaller than the transformed of the mean as the transformation is concave!</p>
<p>And we can undo that log using an exponent (which will preserve the inequality sign). Hence GM &lt; AM. In finance, especially portfolio management, GM means are preferred as it is taking into account the compounding effect of the returns.</p>
</section>
<section id="options-convexity" class="level2">
<h2 class="anchored" data-anchor-id="options-convexity">Options convexity</h2>
<p>We are talking about the convexity of options to draw the attention on the non-linear relationship (in this case convex relationship … duh!) between the option’s price and the price of its underlying asset.<br>
This comes from the second order derivative of the option’s price in regards to the price of the underlying. In the Black-Schole Merton equation, this can be seen as: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%7BV%7D%7D%7B%5Cpartial%7Bt%7D%7D%20+%20%5Ccolor%7Bblue%7D%7B%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20S%5E2%20%5Cfrac%7B%5Cpartial%5E2%7BV%7D%7D%7B%5Cpartial%7BS%7D%5E2%7D%7D%20+%20r%20S%20%5Cfrac%7B%5Cpartial%7BV%7D%7D%7B%5Cpartial%7BS%7D%7D%20-%20rV%20=%200"></p>
<p>Recall the value of a vanilla European call option at expiration is <img src="https://latex.codecogs.com/png.latex?C(S)%20=%20max(S-K,%200)"> where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?K"> is the strike price</li>
<li><img src="https://latex.codecogs.com/png.latex?S"> is the price of the underlying</li>
<li><img src="https://latex.codecogs.com/png.latex?C(S)"> is the value of the option price at expiry</li>
<li><img src="https://latex.codecogs.com/png.latex?S-K"> is a linear relationship</li>
</ul>
<p>But the rate of change of the option price in regards to its underlying is not linear.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> norm</span>
<span id="cb14-3"></span>
<span id="cb14-4">S0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial stock price</span></span>
<span id="cb14-5">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Strike price</span></span>
<span id="cb14-6">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Risk-free rate</span></span>
<span id="cb14-7">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time to maturity</span></span>
<span id="cb14-8">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Volatility</span></span>
<span id="cb14-9"></span>
<span id="cb14-10">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Black-Scholes call option price formula</span></span>
<span id="cb14-13">d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.log(S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> K) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(T))</span>
<span id="cb14-14">d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(T)</span>
<span id="cb14-15"></span>
<span id="cb14-16">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(d1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(d2)</span>
<span id="cb14-17"></span>
<span id="cb14-18">delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.gradient(C, S)</span>
<span id="cb14-19">gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.gradient(delta, S)</span>
<span id="cb14-20"></span>
<span id="cb14-21">plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb14-22"></span>
<span id="cb14-23">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">131</span>)</span>
<span id="cb14-24">plt.plot(S, C, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Option Price'</span>)</span>
<span id="cb14-25">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Asset Price'</span>)</span>
<span id="cb14-26">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Option Value'</span>)</span>
<span id="cb14-27"></span>
<span id="cb14-28">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">132</span>)</span>
<span id="cb14-29">plt.plot(S, delta, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Delta'</span>)</span>
<span id="cb14-30">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Asset Price'</span>)</span>
<span id="cb14-31">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Delta'</span>)</span>
<span id="cb14-32"></span>
<span id="cb14-33">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span>)</span>
<span id="cb14-34">plt.plot(S, gamma, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gamma'</span>)</span>
<span id="cb14-35">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Asset Price'</span>)</span>
<span id="cb14-36">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gamma'</span>)</span>
<span id="cb14-37"></span>
<span id="cb14-38">plt.tight_layout()</span>
<span id="cb14-39">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/proba-quant/jensen-inequality/index_files/figure-html/cell-10-output-1.png" width="1141" height="566" class="figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Probability</category>
  <category>Jensen&#39;s inequality</category>
  <category>arithmetic mean</category>
  <category>geometric mean</category>
  <guid>https://fderyckel.github.io/blog.html/posts/proba-quant/jensen-inequality/</guid>
  <pubDate>Fri, 20 Oct 2023 17:00:00 GMT</pubDate>
  <media:content url="https://fderyckel.github.io/blog.html/posts/proba-quant/jensen-inequality/jensen-parabola.png" medium="image" type="image/png" height="168" width="144"/>
</item>
<item>
  <title>Modeling Option prices using Monte-Carlo simulations</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/</link>
  <description><![CDATA[ 





<p>Recall Monte-Carlo method exploits the relationship between options prices and expectation under a risk-neutral measure. It is the present value of the expectation (under a risk-neutral measure) of the payoff. In this sense <img src="https://latex.codecogs.com/png.latex?V(S,%20t)%20=%20%5Ctext%7BPV%7D%20%5Cspace%20%5Cspace%20%5Cmathbb%7BE%7D%5E%5Cmathbb%7BQ%7D%20(Payoff)"></p>
<p>We start with the usual SDE (except we use <img src="https://latex.codecogs.com/png.latex?r"> instead of <img src="https://latex.codecogs.com/png.latex?%5Cmu"> as we are under the risk-neutral framework). <img src="https://latex.codecogs.com/png.latex?dS_t%20=%20r%20S_t%20dt%20+%20%5Csigma%20S_t%20dW_t"> Using the Euler discretization <img src="https://latex.codecogs.com/png.latex?S_%7Bt%20+%20%5Cdelta%20t%7D%20=%20S_t%20%5Ccdot%20(1%20+%20r%20%5Cdelta%20t%20+%20%5Csigma%20%5Csqrt%7B%5Cdelta%20t%7D%20%5Cphi)"></p>
<section id="using-python" class="level2">
<h2 class="anchored" data-anchor-id="using-python">Using Python</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> simulate_path(s0, mu, sigma, Time, num_timestep, n_sim): </span>
<span id="cb1-5">  </span>
<span id="cb1-6">  np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20230902</span>)</span>
<span id="cb1-7">  </span>
<span id="cb1-8">  S0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s0</span>
<span id="cb1-9">  r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu</span>
<span id="cb1-10">  T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Time</span>
<span id="cb1-11">  t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_timestep </span>
<span id="cb1-12">  n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_sim </span>
<span id="cb1-13">  </span>
<span id="cb1-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#defining dt</span></span>
<span id="cb1-15">  dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>t</span>
<span id="cb1-16">  </span>
<span id="cb1-17">  S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((t, n))</span>
<span id="cb1-18">  S[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S0</span>
<span id="cb1-19">  </span>
<span id="cb1-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): </span>
<span id="cb1-21">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.standard_normal(n)</span>
<span id="cb1-22">    S[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(dt) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb1-23">  </span>
<span id="cb1-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> S</span></code></pre></div>
</div>
<p>Let’s create a simulation for a quarter of a year (3 months or 63 trading days).</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">simulate_path(s0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>, Time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, num_timestep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span>, n_sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>array([[100.        , 100.        , 100.        , ..., 100.        ,
        100.        , 100.        ],
       [ 99.39825714, 100.88405395, 100.17361119, ..., 100.79029332,
         98.89439673,  99.86236711],
       [ 99.50936214, 100.97945468,  99.7824842 , ...,  98.66331487,
         98.67131431, 100.50278255],
       ...,
       [100.32398459, 110.16941406,  95.79494772, ..., 101.76681189,
         91.43131552,  98.94795092],
       [100.93630069, 111.0365789 ,  94.89177952, ..., 101.32109813,
         93.37392012,  98.42725475],
       [101.17836924, 110.76099538,  95.51591487, ..., 101.28364139,
         92.50938162,  96.80815562]])</code></pre>
</div>
</div>
<p>Let’s put that into a data frame for further plotting and manipulation</p>
<p>Note each column of the data frame is a simulation. The number of rows is the number of time steps.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">simulated_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(simulate_path(s0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>, Time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, num_timestep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span>, n_sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">simulated_paths.iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;Axes: &gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/index_files/figure-html/cell-5-output-2.png" width="558" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-2">plt.plot(simulated_paths)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plot the first 100 paths</span></span>
<span id="cb7-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time steps'</span>)</span>
<span id="cb7-4">plt.xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb7-5">plt.ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">135</span>)</span>
<span id="cb7-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pries'</span>)</span>
<span id="cb7-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Monte-Carlo Simulation of an Asset Price'</span>)</span>
<span id="cb7-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/index_files/figure-html/cell-6-output-1.png" width="593" height="449" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Under the risk-neutral measure, the value of the option is the discounted value of the expected payoff. <img src="https://latex.codecogs.com/png.latex?C%20=%20e%5E%7BrT%7D%20%5Ccdot%20%5Cmathbb%7BE%7D%5Bmax(S_T%20-%20K,%200)%5D"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?K"> is the strike price</li>
</ul>
<p>For this simulation, we let <img src="https://latex.codecogs.com/png.latex?K=100"> as well!</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb8-2">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span></span>
<span id="cb8-3">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> </span>
<span id="cb8-4"></span>
<span id="cb8-5">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate_path(s0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>, Time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, num_timestep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span>, n_sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## calculate payoff for call options </span></span>
<span id="cb8-8">Co <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.mean(np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, S[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>K))</span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## calculate payoff for put options </span></span>
<span id="cb8-10">Po <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.mean(np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> S[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"European Call Option value is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Co<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 0.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"European Put Option value is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Po<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 0.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>European Call Option value is  3.8587
European Put Option value is  2.7757</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb10-2"></span>
<span id="cb10-3">sT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5">figure, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), sharey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-6">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Call payoff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Put payoff'</span>]</span>
<span id="cb10-7">payoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>K), np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sT)] </span>
<span id="cb10-8">color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>] </span>
<span id="cb10-9">label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Call'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Put'</span>]</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>): </span>
<span id="cb10-12">  axes[i].plot(sT, payoff[i], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color[i], label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label[i])</span>
<span id="cb10-13">  axes[i].set_title(title[i])</span>
<span id="cb10-14">  axes[i].legend()</span>
<span id="cb10-15"></span>
<span id="cb10-16">figure.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Option Payoff at Maturity'</span>)</span>
<span id="cb10-17"></span>
<span id="cb10-18">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/index_files/figure-html/cell-8-output-1.png" width="1533" height="543" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="asian-options" class="level1">
<h1>Asian Options</h1>
<p>We are taking the averages of a given asset prices.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(S, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># axis = 0, mean is over the columns ==&gt; results is 1000 means. We had a 1000 simulations of 63 steps. </span></span>
<span id="cb11-2">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(S, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># axis = 1, mean is row by row  ==&gt; results is 63 means</span></span>
<span id="cb11-3"></span>
<span id="cb11-4">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb11-5">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span></span>
<span id="cb11-6">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> </span>
<span id="cb11-7">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate_path(s0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>, Time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, num_timestep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span>, n_sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do not use S[-1] anymore (the last prices), but the average instead (here it is A)</span></span>
<span id="cb11-10">Co <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.mean(np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> K))</span>
<span id="cb11-11">Po <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.mean(np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> A))</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Asian Call Option value is: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Co<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 0.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Asian Put Option Value is: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Po<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
</section>
<section id="barrier-options." class="level1">
<h1>Barrier options.</h1>
<p>Barrier options are path dependent. They’ll need another argument</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In a paper titled A Continuity Correction for Discrete Barrier Option, Mark Broadie, Paul Glasser- man and Steven Kou have shown us that the discrete barrier options can be priced using continuous barrier formulas by applying a simple continuity correction to the barrier. The correction shifts the barrier away from the underlying by a factor of <img src="https://latex.codecogs.com/png.latex?exp(%5Cbeta%20%5Csigma%20%5Csqrt%7B%5Cdelta_t%7D)"> where <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20%5Capprox%200.5826"></p>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb12-2">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span></span>
<span id="cb12-3">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span></span>
<span id="cb12-4">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> </span>
<span id="cb12-5">num_timestep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span></span>
<span id="cb12-6">num_sim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb12-7">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate_path(s0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, Time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>T, num_timestep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_timestep, n_sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_sim)</span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's put the barrier at 117 !  we call it B</span></span>
<span id="cb12-10">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">117</span></span>
<span id="cb12-11">delta_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num_timestep</span>
<span id="cb12-12">rebate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb12-13">value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-14">beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5826</span></span>
<span id="cb12-15"></span>
<span id="cb12-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Barrier shift - continuity correction for discrete monitoring</span></span>
<span id="cb12-17">B_shift <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(delta_t))</span>
<span id="cb12-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(B_shift)</span>
<span id="cb12-19"></span>
<span id="cb12-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># finding discounted value of expected payoff</span></span>
<span id="cb12-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_sim): </span>
<span id="cb12-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if final price of one simulation is less that the Barrier shift</span></span>
<span id="cb12-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> S[:,i].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> B_shift: </span>
<span id="cb12-24">    value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, S[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> K)</span>
<span id="cb12-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: </span>
<span id="cb12-26">    value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> rebate</span>
<span id="cb12-27">    </span>
<span id="cb12-28">Co <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>num_sim)</span>
<span id="cb12-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'The up-and-out Barrier Option value is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Co<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:04f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>117.73225187428132
The up-and-out Barrier Option value is 3.369172</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">figure, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), constrained_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb14-2">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Visualising the Barrier Condition'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spot Touched Barrier'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spot Below Barrier'</span>]</span>
<span id="cb14-3">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(S[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>])</span>
<span id="cb14-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>):</span>
<span id="cb14-5">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(S[:,i]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> S[:,i].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> B_shift <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(S[:,i])</span>
<span id="cb14-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb14-7">    axes[i].set_title(title[i])</span>
<span id="cb14-8">    axes[i].hlines(B_shift, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>, linestyles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>)</span>
<span id="cb14-9">figure.supxlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time steps'</span>)</span>
<span id="cb14-10">figure.supylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index levels'</span>)</span>
<span id="cb14-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/index_files/figure-html/cell-11-output-1.png" width="1931" height="587" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb15-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_price_path(S0, rfr, sigma, time_horizon, num_steps, num_sim): </span>
<span id="cb15-6">  </span>
<span id="cb15-7">  np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18092023</span>)</span>
<span id="cb15-8"></span>
<span id="cb15-9">  dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time_horizon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num_steps</span>
<span id="cb15-10"></span>
<span id="cb15-11">  S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((num_steps, num_sim))</span>
<span id="cb15-12">  S[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S0</span>
<span id="cb15-13"></span>
<span id="cb15-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,num_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): </span>
<span id="cb15-15">    phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.standard_normal(num_sim)</span>
<span id="cb15-16">    S[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rfr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(dt))</span>
<span id="cb15-17">  </span>
<span id="cb15-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> S</span>
<span id="cb15-19"></span>
<span id="cb15-20">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_price_path(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.045</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb15-21"></span>
<span id="cb15-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for a european option.  </span></span>
<span id="cb15-23"></span>
<span id="cb15-24">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb15-25">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb15-26">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.55</span></span>
<span id="cb15-27"></span>
<span id="cb15-28">C0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.mean(np.maximum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, S[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>K))</span>
<span id="cb15-29"></span>
<span id="cb15-30">C0</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>9.038910855148245</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Black-Schole</category>
  <category>Risk Neutrality</category>
  <category>Exotic Options</category>
  <category>Monte-Carlo</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/</guid>
  <pubDate>Sat, 26 Aug 2023 17:00:00 GMT</pubDate>
  <media:content url="https://fderyckel.github.io/blog.html/posts/quant-part3/monte-carlo-sim/mc-simulation.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>02 - Stochastic Differential Equation - Part II</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part2/02-SDE-part2/</link>
  <description><![CDATA[ 





<section id="vs-when-s-is-a-sde---itô-iii" class="level1">
<h1><img src="https://latex.codecogs.com/png.latex?V(S)"> when S is a SDE - Itô III</h1>
<p>Let <img src="https://latex.codecogs.com/png.latex?V"> be a function of <img src="https://latex.codecogs.com/png.latex?S"> where <img src="https://latex.codecogs.com/png.latex?S"> satisfies the stochastic differential equation <img src="https://latex.codecogs.com/png.latex?dS%20=%20%5Cmu%20S%20%5Cspace%20dt%20+%20%5Csigma%20S%20%5Cspace%20dX(t)"> Note how in this case <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> are constants. In more elaborate models, both can be time-dependent variables and be stochastic themselves.</p>
<p>Using a one-dimension Taylor Series expansion, we can write <img src="https://latex.codecogs.com/png.latex?V(S%20+%20dS)%20%5Capprox%20V(S)%20+%20%5Cfrac%7BdV%7D%7BdS%7D%20%5Cspace%20dS%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2V%7D%7BdS%5E2%7D%20%5Cspace%20dS%5E2"></p>
<p>To express <img src="https://latex.codecogs.com/png.latex?dS%5E2">? <img src="https://latex.codecogs.com/png.latex?dS%5E2%20=%20(dS)%5E2%20=%20%5Cmu%5E2%20S%5E2%20%5Cspace%20dt%5E2%20+%202%20%5Cmu%20%5Csigma%20S%5E2%20%20%5Cspace%20dt%20dX(t)%20+%20%5Csigma%5E2%20S%5E2%20%5Cspace%20dX(t)%5E2"></p>
<p><span id="eq-ds-squared"><img src="https://latex.codecogs.com/png.latex?dS%5E2%20=%20%5Csigma%5E2%20S%5E2%20%5Cspace%20dX(t)%5E2%20=%20%5Csigma%5E2%20S%5E2%20%5Cspace%20dt%20%5Ctag%7B1%7D"></span></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>We could generalize this a bit further Let’s have a function <img src="https://latex.codecogs.com/png.latex?dG_t%20=%20A(t,%20X_t)%20%5Cspace%20dt%20+%20B(t,%20X_t)%20%5Cspace%20dW_t"></p>
<p>Then <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BdG_t%5D%20=%20%5Cmathbb%7BE%7D%5BA%20%5Cspace%20dt%5D%20+%20%5Cmathbb%7BE%7D%5BB%20%5Cspace%20dW_t%5D%20=%20A%20%5Cspace%20%5Cmathbb%7BE%7D%5Bdt%5D%20+%20B%20%5Cspace%20%5Cmathbb%7BE%7D%5BdW_t%5D"></p>
<p>Recall that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BdW_t%5D%20=%200">, hence <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BdG_t%5D%20=%20A%20%5Cspace%20%5Cmathbb%7BE%7D%5Bdt%5D"> Considering the variance, we can write <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BdG_t%5D%20=%20%5Cmathbb%7BV%7Dar%5BA%20%5Cspace%20dt%5D%20+%20%5Cmathbb%7BV%7Dar%5BB%20%5Cspace%20dW_t%5D%20=%20A%5E2%20%5Cspace%20%5Cmathbb%7BV%7Dar%5Bdt%5D%20+%20B%5E2%20%5Cspace%20%5Cmathbb%7BV%7Dar%5BdW_t%5D%20=%20B%5E2%20%5Cspace%20dt"> Recall that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5Bdt%5D%20=%200">, hence <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BdG_t%5D%20=%20B%5E2%20%5Cspace%20%5Cmathbb%7BV%7Dar%5BdW_t%5D"></p>
</div>
</div>
<p>Going back to our expansion and considering <img src="https://latex.codecogs.com/png.latex?dV%20=%20V(S+dS)%20-%20V(S)">: <img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cfrac%7BdV%7D%7BdS%7D%20%5Cspace%20(%5Cmu%20S%20%5Cspace%20dt%20+%20%5Csigma%20S%20%5Cspace%20dX(t))%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2V%7D%7BdS%5E2%7D%20%5Cspace%20(%5Csigma%5E2%20S%5E2%20%5Cspace%20dt)"> <span id="eq-ito3"><img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cmu%20S%20%5Cfrac%7BdV%7D%7BdS%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20S%5E2%20%5Cfrac%7Bd%5E2V%7D%7BdS%5E2%7D%20%5Cright)%20%5Ccdot%20dt%20+%20%5Cleft(%20%5Csigma%20S%20%5Cfrac%7BdV%7D%7BdS%7D%20%5Cright)%20%5Ccdot%20dX(t)%20%5Ctag%7B2%7D"></span></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let <img src="https://latex.codecogs.com/png.latex?V(S)%20=%20log(S)"> with S satisfies the usual SDE: <img src="https://latex.codecogs.com/png.latex?dS%20=%20%5Cmu%20S%20dt%20+%20%5Csigma%20S%20dX_t">. We can then use the above SDE form.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BdV%7D%7BdS%7D%20=%20%5Cfrac%7B1%7D%7BS%7D"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%5E2V%7D%7BdS%5E2%7D%20=%20-%20%5Cfrac%7B1%7D%7BS%5E2%7D"></p>
<p>Using above Equation&nbsp;2: <img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cmu%20S%20%5Cfrac%7B1%7D%7BS%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20S%5E2%20%5Cfrac%7B-1%7D%7BS%5E2%7D%20%5Cright)%20%5Ccdot%20dt%20+%20%5Cleft(%20%5Csigma%20S%20%5Cfrac%7B1%7D%7BS%7D%20%5Cright)%20%5Ccdot%20dX(t)"> <img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cmu%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20%20%5Cright)%20%5Ccdot%20dt%20+%20%5Csigma%20%20%5Ccdot%20dX(t)"> Using the integral form:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20d(log%20%5Cspace%20S)%20=%20%5Cint_0%5Et%20%5Cmu%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20%5Cspace%20d%5Ctau%20+%20%5Cint_0%5Et%20%5Csigma%20%5Cspace%20dX(%5Ctau)"> <img src="https://latex.codecogs.com/png.latex?log(S_t)%20-%20log(S_0)%20=%20%5Cmu%20t%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20t%20+%20%5Csigma%20(X_t%20-%20X_0)"> <img src="https://latex.codecogs.com/png.latex?log%20%5Cleft(%20%5Cfrac%7BS_t%7D%7BS_0%7D%20%5Cright)%20=%20%5Cmu%20t%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20t%20+%20%5Csigma%20(X_t%20-%20X_0)"> <img src="https://latex.codecogs.com/png.latex?S_t%20=%20S_0%20%5Ccdot%20e%5E%7B%5Cmu%20t%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20t%20+%20%5Csigma%20(X_t%20-%20X_0)%7D"></p>
<p>Using <img src="https://latex.codecogs.com/png.latex?X_0%20=%200"> and <img src="https://latex.codecogs.com/png.latex?X_t%20=%20%5Cphi%20%5Csqrt%7Bt%7D">: <img src="https://latex.codecogs.com/png.latex?S_t%20=%20S_0%20%5Ccdot%20e%5E%7B%5Cmu%20t%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20t%20+%20%5Csigma%20%5Cphi%20%5Csqrt%7Bt%7D%7D"></p>
</div>
</div>
<p>Another example with interest rate</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Vasicek model
</div>
</div>
<div class="callout-body-container callout-body">
<p>This model developed in 1978 by Vasicek is about interest rate.</p>
<p>The basic SDE takes this form <span id="eq-vasicek1"><img src="https://latex.codecogs.com/png.latex?dr%20=%20(%5Ceta%20-%20%5Cgamma%20r)%20dt%20+%20%5Csigma%20dX%20%5Ctag%7B3%7D"></span> In this model, <img src="https://latex.codecogs.com/png.latex?%5Ceta">, <img src="https://latex.codecogs.com/png.latex?%5Cgamma"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> are all constant.</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cgamma"> is the speed of reversion to the (long term) mean rate. It’s the rate of reversion.</li>
<li>we demote <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Br%7D"> the mean interest rate such that <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Br%7D%20=%20%5Cfrac%7B%5Ceta%7D%7B%5Cgamma%7D"></li>
</ul>
<p><span id="eq-vasicek2"><img src="https://latex.codecogs.com/png.latex?dr%20=%20%5Cgamma%20(%5Cbar%7Br%7D%20-%20r)%20%5Cspace%20dt%20+%20%5Csigma%20%5Cspace%20dX%20%5Ctag%7B4%7D"></span></p>
<p>If we let <img src="https://latex.codecogs.com/png.latex?u%20=%20r%20-%20%5Cbar%7Br%7D">, then <img src="https://latex.codecogs.com/png.latex?du%20=%20dr"> because we consider <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Br%7D"> as a constant. Hence <img src="https://latex.codecogs.com/png.latex?du%20=%20-%20%5Cgamma%20u%20%5Cspace%20dt%20+%20%5Csigma%20dX"> <img src="https://latex.codecogs.com/png.latex?du%20+%20%5Cgamma%20u%20dt%20=%20%5Csigma%20dX"><br>
<img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cgamma%20t%7D%20du%20+%20%5Cgamma%20u%20e%5E%7B%5Cgamma%20t%7D%20dt%20=%20e%5E%7B%5Cgamma%20t%7D%20%5Csigma%20dX"> <img src="https://latex.codecogs.com/png.latex?d(u%20e%5E%7B%5Cgamma%20t%7D)%20=%20%5Csigma%20e%5E%7B%5Cgamma%20t%7D%20dX"> <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20d(u_s%20e%5E%7B%5Cgamma%20s%7D)%20=%20%5Csigma%20%5Cint_0%5Et%20e%5E%7B%5Cgamma%20s%7D%20dX_s"> <img src="https://latex.codecogs.com/png.latex?u(t)%20e%5E%7B%5Cgamma%20t%7D%20-%20u(0)%20=%20%5Csigma%20%5Cint_0%5Et%20e%5E%7B%5Cgamma%20s%7D%20dX_s"> <img src="https://latex.codecogs.com/png.latex?u(t)%20=%20u(0)%20e%5E%7B-%5Cgamma%20t%7D%20+%20%20%5Csigma%20%5Cint_0%5Et%20e%5E%7B%5Cgamma%20(s%20-%20t)%7D%20dX_s"></p>
</div>
</div>
</section>
<section id="vt-s-when-s-is-a-sde---itô-iv" class="level1">
<h1><img src="https://latex.codecogs.com/png.latex?V(t,%20S)"> when S is a SDE - Itô IV</h1>
<p>This time <img src="https://latex.codecogs.com/png.latex?V"> is a function of both time <img src="https://latex.codecogs.com/png.latex?t"> and <img src="https://latex.codecogs.com/png.latex?S"> which satisfies the usual SDE: <img src="https://latex.codecogs.com/png.latex?dS%20=%20%5Cmu%20S%20dt%20+%20%5Csigma%20S%20dX_t"></p>
<p>We can also do a Taylor Series expansion on this. And recall Equation&nbsp;1 when dealing with <img src="https://latex.codecogs.com/png.latex?dS%5E2"></p>
<p><img src="https://latex.codecogs.com/png.latex?V(S%20+%20dS,%20t%20+%20dt)%20%5Capprox%20V(S,%20t)%20+%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20dS%20+%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20dt%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D%20dS%5E2"> <img src="https://latex.codecogs.com/png.latex?V(S%20+%20dS,%20t%20+%20dt)%20-%20V(S,%20t)%20%5Capprox%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20dS%20+%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20dt%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D%20%5Csigma%5E2%20S%5E2%20dt"></p>
<p><img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D%20%5Csigma%5E2%20S%5E2%20%5Cright)%20dt%20+%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20dS"></p>
<p><img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D%20%5Csigma%5E2%20S%5E2%20%5Cright)%20dt%20+%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20(%5Cmu%20S%20dt%20+%20%5Csigma%20S%20dX_t)"> <span id="eq-ito4"><img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D%20%5Csigma%5E2%20S%5E2%20+%20%5Cmu%20S%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20%20%5Cright)%20dt%20+%20%5Csigma%20S%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20dX_t%20%5Ctag%7B5%7D"></span></p>
</section>
<section id="transition-probabilty-function-as-ode" class="level1">
<h1>Transition probabilty function as ODE</h1>
<p>For background on the transition probability function, check <a href="../../../posts/quant-part1/trinomial-model/index.html">this post</a></p>
<p>Recall from the above linked post that <img src="https://latex.codecogs.com/png.latex?y,%20t"> are current state and <img src="https://latex.codecogs.com/png.latex?y',%20t'"> are future values.<br>
The transition probabilty function was expressed as a partial differential equation of the form <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20C%5E2%20%5Cfrac%7B%5Cpartial%5E2%20P%7D%7B%5Cpartial%20y'%5E2%7D"> which was the FKE.</p>
<p>In the case of our usual Stochastic Differential Equation, which we write under a more general form like <img src="https://latex.codecogs.com/png.latex?dY%20=%20A(y,%20t)%20%5Cspace%20dt%20+%20B(y,%20t)%20%5Cspace%20dW_t"> We can find that the transition probability function satisfies the following Partial differential equation: <span id="eq-FKE1"><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20%5Cleft(B(y',%20t')%5E2%20p%20%5Cright)%7D%7B%5Cpartial%20y'%5E2%7D%20-%20%5Cfrac%7B%5Cpartial%20%5Cleft(%20A(y',%20t')%20p%20%5Cright)%7D%7B%5Cpartial%20y'%7D%20%5Ctag%7B6%7D"></span></p>
<p>In our financial model, we’ll apply Equation&nbsp;6 with the usual SDE <img src="https://latex.codecogs.com/png.latex?dS=%5Cmu%20S%20%5Cspace%20dt+%5Csigma%20S%20%5Cspace%20dW_t">. Remember that <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> are constant here.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20(%5Csigma%5E2%20S'%5E2%20p)%7D%7B%5Cpartial%20S'%5E2%7D%20-%20%5Cfrac%7B%5Cpartial%20(%5Cmu%20S'%20p)%7D%7B%5Cpartial%20S'%7D"></p>
<p>The solution to this partial differential equation has been developed <a href="../../../posts/quant-part1/trinomial-model/index.html">in the trinomial post</a>:</p>
<p><span id="eq-FKE1b"><img src="https://latex.codecogs.com/png.latex?p(S,%20t;%20S',%20t')%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20S'%20%5Csqrt%7B2%20%5Cpi%20(t'-t)%7D%7D%20e%5E%7B%5Cfrac%7B-log%5Cleft(%20%5Cfrac%7BS%7D%7BS'%7D%20%5Cright)%20+%20(%5Cmu%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2)%7D%7B2%20%5Csigma%5E2(t'-t)%7D%7D%20%5Ctag%7B7%7D"></span></p>
<section id="steady-state" class="level2">
<h2 class="anchored" data-anchor-id="steady-state">Steady-state</h2>
<p>In some case, there are situation (random-walk) with a long term mean reversal - we say that they have a <strong>steady state distribution</strong>. This means that in the long run, the <img src="https://latex.codecogs.com/png.latex?p(y,%20t;%20y',%20t')"> doesn’t depend of the starting point <img src="https://latex.codecogs.com/png.latex?y,%20t">; the probability becomes time independent. Think of situations such as interest rate and volatility.</p>
<p>In the case of a steady state situation, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20t'%7D%20=%200"> since the process becomes time independent in the long run. And the probability (now written $p_{} (y’) <img src="https://latex.codecogs.com/png.latex?)%20satisfies%20the%20ordinary%20differential%20equation:"><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%20%5Cleft(B(y')%5E2%20p_%7B%5Cinfty%7D%20%5Cright)%7D%7Bd%20y'%5E2%7D%20-%20%5Cfrac%7Bd%20%5Cleft(%20A(y')%20p_%7B%5Cinfty%7D%20%5Cright)%7D%7Bd%20y'%7D%20=%200">$ {#eq-FKE2} It isn’t anymore a partial differential equation as the time component vanishes (aka steady-state, long-term reversal)</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Vasicek revisited
</div>
</div>
<div class="callout-body-container callout-body">
<p>Recall from above the Vasicek model <img src="https://latex.codecogs.com/png.latex?dr%20=%20%5Cgamma%20(%5Cbar%7Br%7D%20-%20r)%20%5Cspace%20dt%20+%20%5Csigma%20%5Cspace%20dW_t"> Using <strong>?@eq-FKE2</strong>, we can write the steady state distribution <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cinfty%7D%20r'"> following ordinary differential equation. <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20%5Cfrac%7Bd%5E2%20%20p_%7B%5Cinfty%7D%20%7D%7Bd%20r'%5E2%7D%20-%20%5Cgamma%20%5Cfrac%7Bd(%20%5Cleft(%5Cbar%7Br%7D%20-%20r)%20p_%7B%5Cinfty%7D%20%5Cright)%7D%7Bd%20r'%7D%20=%200"> Integrating both sides, we get: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20%5Cfrac%7Bd%20%20p_%7B%5Cinfty%7D%20%7D%7Bd%20r'%7D%20+%20%5Cgamma%20(r%20-%20%5Cbar%7Br%7D)%20p_%7B%5Cinfty%7D%20=%20K"> K being a constant. <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20%5Cfrac%7Bd%20%20p_%7B%5Cinfty%7D%20%7D%7Bd%20r'%7D%20=%20-%20%5Cgamma%20(r%20-%20%5Cbar%7Br%7D)%20p_%7B%5Cinfty%7D%20+%20K"> Letting the constant be 0 (need explanation here) Letting the <img src="https://latex.codecogs.com/png.latex?%7B%5Cinfty%7D"> just for convenience purposes.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7Bp%7D%20dp%20=%20%5Cfrac%7B-2%20%5Cgamma%7D%7B%5Csigma%5E2%7D%20(r%20-%20%5Cbar%7Br%7D)%20%5Cspace%20dr'"> Integrating both sides, <img src="https://latex.codecogs.com/png.latex?%5Cint%20%5Cfrac%7B1%7D%7Bp%7D%20dp%20=%20%5Cfrac%7B-2%20%5Cgamma%7D%7B%5Csigma%5E2%7D%20%5Cint%20(r%20-%20%5Cbar%7Br%7D)%20%5Cspace%20dr'"> <img src="https://latex.codecogs.com/png.latex?log(p)%20=%20%5Cfrac%7B-2%20%5Cgamma%7D%7B%5Csigma%5E2%7D%20%5Cfrac%7B1%7D%7B2%7D%20(r%20-%20%5Cbar%7Br%7D)%5E2%20+%20K"> Using a normalizing constant, as we inverse the log <span id="eq-vasicek2"><img src="https://latex.codecogs.com/png.latex?p(r)%20=%20A%20%5Ccdot%20e%5E%7B-%20%5Cfrac%7B%5Cgamma%7D%7B%5Csigma%5E2%7D%20(r%20-%20%5Cbar%7Br%7D)%5E2%7D%20%5Ctag%7B8%7D"></span></p>
<p>We know that <img src="https://latex.codecogs.com/png.latex?%5Cint_%7B%5Cmathbb%7BR%7D%7D%20p(r)%20dr=%201">, hence <img src="https://latex.codecogs.com/png.latex?A%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20e%5E%7B-%20%5Cfrac%7B%5Cgamma%7D%7B%5Csigma%5E2%7D%20(r%20-%20%5Cbar%7Br%7D)%5E2%7D%20dr%20=%201"> We can integrate this using substitution <img src="https://latex.codecogs.com/png.latex?u%20=%20%5Cfrac%7B%5Csqrt%7B%5Cgamma%7D%20%5Cspace%20(r%20-%20%5Cbar%7Br%7D)%7D%7B%5Csigma%7D"> with <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bdu%7D%7Bdr%7D%20=%20%5Cfrac%7B%5Csqrt%7B%5Cgamma%7D%7D%7B%5Csigma%7D"> <img src="https://latex.codecogs.com/png.latex?A%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20e%5E%7B-u%5E2%7D%20%5Cfrac%7B%5Csigma%7D%7B%5Csqrt%7B%5Cgamma%7D%7D%20du%20=%201"> <img src="https://latex.codecogs.com/png.latex?A%20%5Cfrac%7B%5Csigma%7D%7B%5Csqrt%7B%5Cgamma%7D%7D%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20e%5E%7B-u%5E2%7D%20du%20=%201"> <img src="https://latex.codecogs.com/png.latex?A%20%5Cfrac%7B%5Csigma%7D%7B%5Csqrt%7B%5Cgamma%7D%7D%20%5Csqrt%7B%5Cpi%7D%20%20=%201"> <img src="https://latex.codecogs.com/png.latex?A%20=%20%5Cfrac%7B%5Csqrt%7B%5Cgamma%7D%7D%7B%5Csigma%20%5Csqrt%7B%5Cpi%7D%7D%20=%20%5Cfrac%7B1%7D%7B%5Csigma%7D%20%5Csqrt%7B%5Cfrac%7B%5Cgamma%7D%7B%5Cpi%7D%7D"></p>
<p>Putting it all back together in Equation&nbsp;8: <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cinfty%7D(r)%20=%20A%20%5Ccdot%20e%5E%7B-%20%5Cfrac%7B%5Cgamma%7D%7B%5Csigma%5E2%7D%20(r%20-%20%5Cbar%7Br%7D)%5E2%7D%20=%20%5Cfrac%7B1%7D%7B%5Csigma%7D%20%5Csqrt%7B%5Cfrac%7B%5Cgamma%7D%7B%5Cpi%7D%7D%20e%5E%7B-%20%5Cfrac%7B%5Cgamma%7D%7B%5Csigma%5E2%7D%20(r%20-%20%5Cbar%7Br%7D)%5E2%7D"> This means: in our case of a steady state stochastic process, the variable <img src="https://latex.codecogs.com/png.latex?r"> follows a normal distribution with mean <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Br%7D%7D"> and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Csigma%7D%7B%5Csqrt%7B2%20%5Ccdot%20%5Cgamma%7D%7D"></p>
</div>
</div>
</section>
</section>
<section id="vt-s_1-s_2-modeling-correlated-random-walks" class="level1">
<h1><img src="https://latex.codecogs.com/png.latex?V(t,%20S_1,%20S_2)"> Modeling correlated random walks</h1>
<p>We have now 2 assets</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A%20%20%5Cbegin%7Bcases%7D%0A%20%20%20%20dS_1%20=%20%5Cmu_1%20S_1%20%5Cspace%20dt%20+%20%5Csigma_1%20S_1%20%5Cspace%20dX_1%20%5C%5C%0A%20%20%20%20dS_2%20=%20%5Cmu_2%20S_2%20%5Cspace%20dt%20+%20%5Csigma_2%20S_2%20%5Cspace%20dX_2%0A%20%20%5Cend%7Bcases%7D%0A%5Cend%7Bequation%7D%20"></p>
<p>Using a Taylor series expansion <img src="https://latex.codecogs.com/png.latex?V(t+dt,%20S_1+dS_1,%20S_2+dS_2)%20%5Capprox%20V(t,%20S1,%20S2)%20+%0A%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20dt%20+%0A%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_1%7D%20dS_1%20+%0A%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_2%7D%20dS_2%20+%0A%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_1%5E2%7D%20dS_1%5E2%20+%0A%20%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_2%5E2%7D%20dS_2%5E2%20+%0A%20%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_1%20%5Cpartial%20S_2%7D%20dS_1%20dS_2"> <span id="eq-dv1"><img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20dt%20+%0A%20%20%20%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_1%7D%20dS_1%20+%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_2%7D%20dS_2%20+%0A%20%20%20%20%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_1%5E2%7D%20dS_1%5E2%20+%0A%20%20%20%20%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_2%5E2%7D%20dS_2%5E2%20+%0A%20%20%20%20%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_1%20%5Cpartial%20S_2%7D%20dS_1%20dS_2%20%5Ctag%7B9%7D"></span></p>
<p>Now we can write down some results we’ll plug into that expansion</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?dS_i%20=%20%5Cmu_i%20S_i%20%5Cspace%20dt%20+%20%5Csigma_i%20S_i%20%5Cspace%20dX_i"></li>
<li>Using Equation&nbsp;1, we write <img src="https://latex.codecogs.com/png.latex?dS_i%5E2%20=%20%5Csigma_i%5E2%20S_i%5E2%20dt"></li>
<li>Letting <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5B%5Cphi_1%20%5Cphi_2%5D%20=%20%5Crho">, we write <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BdX_1%20dX_2%5D%20=%20%5Cmathbb%7BE%7D%5B%5Cphi_1%20%5Csqrt%7Bdt%7D%20%5Cphi_2%20%5Csqrt%7Bdt%7D%5D%20=%20%5Crho%20%5Cspace%20dt"></li>
<li>Recall that all terms less than dt = 0. Hence in the product <img src="https://latex.codecogs.com/png.latex?dS_1%20dS_2%20=%20(%5Cmu_1%20S_1%20%5Cspace%20dt%20+%20%5Csigma_1%20S_1%20%5Cspace%20dX_1)(%5Cmu_2%20S_2%20%5Cspace%20dt%20+%20%5Csigma_2%20S_2%20%5Cspace%20dX_2)">, the only term that we are considering is the outter product <img src="https://latex.codecogs.com/png.latex?%5Csigma_1%20S_1%20%5Cspace%20dX_1%20%5Csigma_2%20S_2%20%5Cspace%20dX_2">. Finally, re-using above result, <img src="https://latex.codecogs.com/png.latex?dS_1%20dS_2%20=%20%5Crho%20%5Csigma_1%20%5Csigma_2%20S_1%20S_2%20dt">.</li>
</ul>
<p>Re-writing Equation&nbsp;9 by substituting <img src="https://latex.codecogs.com/png.latex?dS_1"> and <img src="https://latex.codecogs.com/png.latex?dS_2">, and factoring the terms in dt and those in <img src="https://latex.codecogs.com/png.latex?dX_t">, we get: <img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cmu_1%20S_1%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_1%7D%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cmu_2%20S_2%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_2%7D%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Csigma_1%5E2%20S_1%5E2%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_1%5E2%7D%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Csigma_2%5E2%20S_2%5E2%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_2%5E2%7D%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Crho%20%5Csigma_1%20%5Csigma_2%20S_1%20S_2%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S_1%20%5Cpartial%20S_2%7D%20%20%5Cright)%20dt%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cleft(%20%5Csigma_1%20S_1%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_1%7D%20dX_1%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Csigma_2%20S_2%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S_2%7D%20dX_2%20%5Cright)"></p>
<p>Itô</p>


</section>

 ]]></description>
  <category>quant-finance</category>
  <category>ito-integral</category>
  <category>stochastic-calculus</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part2/02-SDE-part2/</guid>
  <pubDate>Fri, 21 Jul 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>01 - Stochastic Differential Equation - Part I</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part2/01-SDE-Part1/</link>
  <description><![CDATA[ 





<section id="function-of-a-stochastic-process-x_t---itô-i" class="level1">
<h1>Function of a stochastic process <img src="https://latex.codecogs.com/png.latex?X_t"> - Itô I</h1>
<p>Let <img src="https://latex.codecogs.com/png.latex?F"> be a function of a stochastic random variable <img src="https://latex.codecogs.com/png.latex?X_t">. So <img src="https://latex.codecogs.com/png.latex?F%20=%20F(X_t)">.</p>
<p>Using a Taylor expansion: <img src="https://latex.codecogs.com/png.latex?F(X%20+%20dX)%20%5Capprox%20F(X)%20+%20%5Cfrac%7BdF%7D%7BdX%7D%20%5Cspace%20dX%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20dX%5E2"> Using <img src="https://latex.codecogs.com/png.latex?F(X+dX)%20-%20F(X)%20=%20dF">: <img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7BdF%7D%7BdX%7D%20%5Cspace%20dX%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20dX%5E2"></p>
<p>Now, recall <img src="https://latex.codecogs.com/png.latex?dX"> is a random variable with mean 0 and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bt%7D">. Also, for small values of <img src="https://latex.codecogs.com/png.latex?t">, we have <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bdt%7D%20%5Cgt%20dt">, hence it is of higher order than dt. Hence, we re-write the previous equation as</p>
<p><img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7BdF%7D%7BdX%7D%20%5Cspace%20dX%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20dt"> Usually, we write the deterministic part of the equation first.<br>
<span id="eq-ito1"><img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20%5Cspace%20dt%20+%20%5Cfrac%7BdF%7D%7BdX%7D%20%5Cspace%20dX%20%5Ctag%7B1%7D"></span></p>
<p>All our <strong>Stochastic Differential Equations</strong> will have in them these 2 different time steps: <img src="https://latex.codecogs.com/png.latex?dt"> and <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bdt%7D">. <img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cunderbrace%20%7B%5Cdots%20%5Cspace%20dt%7D_%7Bdeterministic-drift%7D%20+%20%5Cunderbrace%7B%5Cdots%20%5Cspace%20dX%7D_%7Brandom-diffusion%7D"></p>
<p>The integral form of this Stochastic Differential Equation is <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20%5Cfrac%7BdF%7D%7BdX_%5Ctau%7D%20%5Cspace%20dX_%5Ctau%20=%20%5Cint_0%5Et%20dF%20-%20%5Cfrac%7B1%7D%7B2%7D%20%5Cint_0%5Et%20%5Cfrac%7Bd%5E2F%7D%7BdX_%5Ctau%5E2%7D%20%5Cspace%20d%5Ctau"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example 1
</div>
</div>
<div class="callout-body-container callout-body">
<p><img src="https://latex.codecogs.com/png.latex?F(X_t)%20=%20X%5E2">, where <img src="https://latex.codecogs.com/png.latex?X_t"> is stochastic random variable. <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BdF%7D%7BdX%7D%20=%202X"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20=%202"></p>
<p>Hence, using the previous Equation&nbsp;1 (aka itô I): <img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Ccdot%202%20%5Cspace%20dt%20+%202X%20%5Cspace%20dX"> <img src="https://latex.codecogs.com/png.latex?dF%20=%20dt%20+%202X%20%5Cspace%20dX"> <strong>Using integral form</strong></p>
<p>We could integrate both side of the previous equation. <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20dF%20=%20%5Cint_0%5Et%20d%5Ctau%20+%20%5Cint_0%5Et%202X(%5Ctau)%20d%7B%5Ctau%7D"> <img src="https://latex.codecogs.com/png.latex?F(t)%20-%20F(0)%20=%20t%20-%200%20+%202%20%5Cint_0%5Et%20X(%5Ctau)%20d%7B%5Ctau%7D"> And assuming F(0) = 0: <img src="https://latex.codecogs.com/png.latex?F(t)%20=%20t%20+%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D"> <img src="https://latex.codecogs.com/png.latex?X%5E2(t)%20=%20t%20+%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D"></p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
example 2
</div>
</div>
<div class="callout-body-container callout-body">
<p><img src="https://latex.codecogs.com/png.latex?F(W_t)%20=%20sin%20%5Cspace%20W_t%20+%20cos%20%5Cspace%20W_t">, where <img src="https://latex.codecogs.com/png.latex?X_t"> is stochastic random variable. <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BdF%7D%7BdW_t%7D%20=%20cos%20%5Cspace%20W_t%20-%20sin%20%5Cspace%20W_t"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%5E2F%7D%7BdW_t%5E2%7D%20=%20-(sin%20%5Cspace%20W_t%20+%20cos%20%5Cspace%20W_t)"> Hence, we can now write</p>
<p><img src="https://latex.codecogs.com/png.latex?dF%20=%20-%20%5Cfrac%7B1%7D%7B2%7D(sin%20%5Cspace%20W_t%20+%20cos%20%5Cspace%20W_t)%20%5Cspace%20dt%20+%20(cos%20%5Cspace%20W_t%20-%20sin%20%5Cspace%20W_t)%20%5Cspace%20dW_t"></p>
</div>
</div>
</section>
<section id="function-of-a-stochastic-process-t-xt---itô-ii" class="level1">
<h1>Function of a stochastic process <img src="https://latex.codecogs.com/png.latex?(t,%20X(t))"> - Itô II</h1>
<p>Let <img src="https://latex.codecogs.com/png.latex?F"> be a function of both time <img src="https://latex.codecogs.com/png.latex?t"> and a stochastic random variable <img src="https://latex.codecogs.com/png.latex?X_t">. So <img src="https://latex.codecogs.com/png.latex?F%20=%20F(t,%20X_t)">.</p>
<p>Using a Taylor expansion: <img src="https://latex.codecogs.com/png.latex?F(t%20+%20dt,%20X%20+%20dX)%20%5Capprox%20F(t,%20X)%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20t%7D%20%5Cspace%20dt%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20%5Cspace%20dX%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20dX%5E2"> Using <img src="https://latex.codecogs.com/png.latex?F(t%20+%20dt,%20X+dX)%20-%20F(t,%20X)%20=%20dF"> and factoring the <img src="https://latex.codecogs.com/png.latex?dt"> and recall <img src="https://latex.codecogs.com/png.latex?dX%5E2=dt">:</p>
<p><span id="eq-ito2sde"><img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20t%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%20%5E2F%7D%7B%5Cpartial%20X%5E2%7D%20%5Cright)%20dt%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20dX%20%5Ctag%7B2%7D"></span></p>
<p>We can transform this Stochastic Differential Equation (SDE) into an itô integral.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X_%5Ctau%7D%20dX_%5Ctau%20=%20%5Cint_0%5Et%20dF%20-%20%5Cint_0%5Et%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20%5Ctau%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%20%5E2F%7D%7B%5Cpartial%20X_%5Ctau%5E2%7D%20%5Cright)%20d%5Ctau"> <span id="eq-ito2-int"><img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X_%5Ctau%7D%20dX_%5Ctau%20=%20F(t,%20X_t)%20-%20F(0,%20X_0)%20-%20%5Cint_0%5Et%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20%5Ctau%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%20%5E2F%7D%7B%5Cpartial%20X_%5Ctau%5E2%7D%20%5Cright)%20d%5Ctau%20%5Ctag%7B3%7D"></span></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example 3
</div>
</div>
<div class="callout-body-container callout-body">
<p>Express <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20%5Cleft(%20%5Ctau%20+%20W_%5Ctau%20%5Cright)%20dW_%5Ctau"></p>
<p>Using Equation&nbsp;3, we establish that what is being integrated is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20W_%5Ctau%7D">, hence <span id="eq-ex31"><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20W_%5Ctau%7D%20=%20%5Ctau%20+%20W_%5Ctau%20%5Ctag%7B4%7D"></span><br>
This allows us to find <img src="https://latex.codecogs.com/png.latex?F"> by integrating both side in regards to <img src="https://latex.codecogs.com/png.latex?W_%5Ctau">. <span id="eq-ex32"><img src="https://latex.codecogs.com/png.latex?F%20=%20%5Ctau%20W_%5Ctau%20+%20%5Cfrac%7B1%7D%7B2%7D%20W_%5Ctau%5E2%20%5Ctag%7B5%7D"></span> and derving Equation&nbsp;5 for <img src="https://latex.codecogs.com/png.latex?%5Ctau">, <span id="eq-ex33"><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20%5Ctau%7D%20=%20W_%5Ctau%20%5Ctag%7B6%7D"></span> and deriving the first derivative Equation&nbsp;4 one more time for <img src="https://latex.codecogs.com/png.latex?dW_%5Ctau">, we get <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5E2F%7D%7B%5Cpartial%20W_%5Ctau%5E2%7D%20=%201"> Hence, we can re-write <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20%5Cleft(%20%5Ctau%20+%20W_%5Ctau%20%5Cright)%20dW_%5Ctau%20=%20%5Cleft(%20%5Ctau%20W_%5Ctau%20+%20%5Cfrac%7B1%7D%7B2%7D%20W_%5Ctau%5E2%20%5Cright)%20-%20%5Cint_0%5Et%20W_%5Ctau%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cspace%20d_%5Ctau"></p>
</div>
</div>


</section>

 ]]></description>
  <category>quant-finance</category>
  <category>stochastic-integrals</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part2/01-SDE-Part1/</guid>
  <pubDate>Fri, 21 Jul 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>04 -Martingales</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part2/04-martingales/</link>
  <description><![CDATA[ 





<p>This post is a collection of notes about Martingales.</p>
<p>A Martingales is a stochastic process that is driftless (aka it is pure randomness or just volatility). We also say that martingales are constant mean stochastic process.</p>
<section id="continuous-time-martingales" class="level1">
<h1>Continuous time martingales</h1>
<p>A continuous time stochastic process <img src="https://latex.codecogs.com/png.latex?%5C%7B%20M_t:%20t%20%5Cin%20%5Cmathbb%7BR%7D%5E+%20%20%5C%7D"> such that <img src="https://latex.codecogs.com/png.latex?M_t"> is adapted to <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BF%7D_t"> (or is <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BF%7D_t"> measurable) is a martingale if:</p>
<ul>
<li>integrability condition: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BM_t%5D%20%5Clt%20%5Cinfty"></li>
<li>conditional expectation condition: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_s%5BM_%7Bt%7D%7C%5Cmathcal%7BF%7D_s%5D%20=%20M_s,%20%5Cspace%200%20%5Cleq%20s%20%5Cleq%20t"></li>
</ul>
</section>
<section id="link-between-itô-integrales-and-martingales" class="level1">
<h1>Link between itô integrales and martingales</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Intuitive &amp; Motivating example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let <img src="https://latex.codecogs.com/png.latex?X"> be a stochastic process and <img src="https://latex.codecogs.com/png.latex?F%20=%20X%5E2(t)">. <a href="../SDE-part1/index.qmd">Recall</a> then <img src="https://latex.codecogs.com/png.latex?F(t)%20=%20t%20+%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D"> <img src="https://latex.codecogs.com/png.latex?X%5E2(t)%20=%20t%20+%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D"> Taking expectation on both side <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%20X%5E2(t)%20%5Cright%5D%20=%20t%20+%20%5Cmathbb%7BE%7D%20%5Cleft%5B%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D%20%5Cright%5D"> With the <a href="../../../posts/quant-part1/brownian-motion/index.html">quadratic variation</a> We already know that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%20X%5E2(t)%20%5Cright%5D%20=%20t"> Which means that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D%20%5Cright%5D"> should be equal to 0. Which means that the itô integral <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%202%20%5Cint_0%5Et%20X_%7B%5Ctau%7D%20%5Cspace%20d%7B%5Ctau%7D%20%5Cright%5D"> is a martingale.</p>
</div>
</div>
<p>Itô integrals are martingales.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?g(t,%20X_t)"> be a function of a stochastic process, then <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%20%5Cint_0%5Et%20g(%5Ctau,%20x_%5Ctau)%20%5Cspace%20dX_%5Ctau%20%5Cright%5D%20=%200"></p>
</section>
<section id="a-continuous-time-stochastic-process-is-a-martingale" class="level1">
<h1>A continuous time stochastic process is a martingale</h1>
<p><img src="https://latex.codecogs.com/png.latex?Yt)"> is a stochastic process that satisfies the following Stochastic Differential Equation <span id="eq-dy1"><img src="https://latex.codecogs.com/png.latex?dY(t)%20=%20f(Y_t,%20t)%20%5Cspace%20dt%20+%20g(Y_t,%20t)%20%5Cspace%20dX(t)%20%5Ctag%7B1%7D"></span> with initial condition <img src="https://latex.codecogs.com/png.latex?Y(0)%20=%200">.</p>
<p>How to tell if <img src="https://latex.codecogs.com/png.latex?Y(t)"> is martingale? We will use the fact, from above, that <em>Itô integrals</em> are martingales. For this, by definition, we need <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_s%5BY_t%20%7C%20%5Cmathcal%7BF%7D_s%5D%20=%20Y_s%20%5Cspace,%20%5Cspace%200%20%5Cleq%20s%20%5Cleq%20t"></p>
<p>Integrating Equation&nbsp;1 both side, we can get an exact form for <img src="https://latex.codecogs.com/png.latex?Y(t)"> <img src="https://latex.codecogs.com/png.latex?Y(t)%20=%20Y(s)%20+%20%5Cint_s%5Et%20f(Y_u,%20u)%20%5Cspace%20du%20+%20%5Cint_s%5Et%20g(Y_u,%20u)%20%5Cspace%20dX(u)"></p>
<p>Taking the expectation on both side: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D(Y_t%20%7C%20%5Cmathcal%7BF%7D_s)=%20%5Cmathbb%7BE%7D%20%5Cleft%5BY(s)%20+%20%5Cint_s%5Et%20f(Y_u,%20u)%20%5Cspace%20du%20+%20%5Cint_s%5Et%20g(Y_u,%20u)%20%5Cspace%20dX(u)%20%5Cspace%20%7C%20%5Cmathcal%7BF%7D%20%5Cright%5D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D(Y_t%20%7C%20%5Cmathcal%7BF%7D_s)%20=%20Y(s)%20+%20%5Cmathbb%7BE%7D%20%5Cleft%5B%5Cint_s%5Et%20f(Y_u,%20u)%20%5Cspace%20du%20%5Cspace%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D"></p>
<p>This is because, see above, ito integrals are martingales and <img src="https://latex.codecogs.com/png.latex?%5Cint_s%5Et%20g(Y_u,%20u)%20%5Cspace%20dX(u)"> is an ito integral. Hence, its expectation is 0 ==&gt; <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%20%5Cint_s%5Et%20g(Y_u,%20u)%20%5Cspace%20dX(u)%20%5Cright%5D%20=%200"></p>
<p>In order for <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D(Y_t%20%7C%20%5Cmathcal%7BF%7D_s)%20=%20Y(s)">, we now need <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%20%5Cleft%5B%5Cint_s%5Et%20f(Y_u,%20u)%20%5Cspace%20du%20%5Cspace%20%7C%20%5Cmathcal%7BF%7D_s%20%5Cright%5D%20=%200">. This means that <img src="https://latex.codecogs.com/png.latex?f(Y_t,%20t)%20=%200,%20%5Cspace%20%5Cforall%20t">.</p>
<p>Going back to the SDE, we can say that <img src="https://latex.codecogs.com/png.latex?dY(t)"> is a martingale iff <img src="https://latex.codecogs.com/png.latex?dY(t)%20=%20g(Y_t,%20t)%20%5Cspace%20dX(t)"></p>
</section>
<section id="exponential-martingales" class="level1">
<h1>Exponential martingales</h1>
<p>LEt’s consider a stochastic process <img src="https://latex.codecogs.com/png.latex?Y(t)"> that satisfies the following Stochastic Differential Equation: <img src="https://latex.codecogs.com/png.latex?dY(t)%20=%20f(t)%20%5Cspace%20dt%20+%20g(t)%20%5Cspace%20dX(t)"> with initial condition <img src="https://latex.codecogs.com/png.latex?Y(0)%20=%200">. <img src="https://latex.codecogs.com/png.latex?X(t)"> is a Brownian Motion, <img src="https://latex.codecogs.com/png.latex?f(t)"> and <img src="https://latex.codecogs.com/png.latex?g(t)"> are time-dependent functions.</p>
<p>We can now define a new process such that <img src="https://latex.codecogs.com/png.latex?Z(t)%20=%20e%5E%7BY(t)%7D"></p>
<p>How can we ensure <img src="https://latex.codecogs.com/png.latex?Z(t)"> is a martingale? How should we choose <img src="https://latex.codecogs.com/png.latex?f(t)"> such that <img src="https://latex.codecogs.com/png.latex?Z(t)"> is a martingale?</p>


</section>

 ]]></description>
  <category>Stochastic Calculus</category>
  <category>Martingales</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part2/04-martingales/</guid>
  <pubDate>Wed, 19 Jul 2023 17:00:00 GMT</pubDate>
</item>
<item>
  <title>03 - Random-walks &amp; Brownian Motions</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part1/brownian-motion/</link>
  <description><![CDATA[ 





<p>This post is a collection of notes about Random Walk and Brownian Motions as well as their properties.</p>
<p>This <a href="../../../posts/quant-part1/random-behavior-assets/index.html">post on the random behavior of financial assets</a> might be of interest before to go through this.</p>
<section id="the-probabilty-of-random-walk" class="level1">
<h1>The probabilty of Random Walk</h1>
<p>In the context of quantitative finance, the easiest way to model a random walk is to consider a head/tail type of example which constitutes a <strong>symmetric random walk</strong>.</p>
<section id="expected-returns" class="level2">
<h2 class="anchored" data-anchor-id="expected-returns">Expected Returns</h2>
<p>So let’s define a Discrete Random Variable <img src="https://latex.codecogs.com/png.latex?R_i"> as the i-th toss of a coin. And <img src="https://latex.codecogs.com/png.latex?R"> takes the value <img src="https://latex.codecogs.com/png.latex?1"> if it’s a tail and <img src="https://latex.codecogs.com/png.latex?-1"> if it’s a head.</p>
<p>The expectation of <img src="https://latex.codecogs.com/png.latex?R_i"> is then: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BR_i%5D%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Ccdot%201%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Ccdot%20-1%20=%200"></p>
<p>The variance of <img src="https://latex.codecogs.com/png.latex?R_i"> is then: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BR_i%5D%20=%20%5Cmathbb%7BE%7D%5BR_i%5E2%5D%20-%20%5Cmathbb%7BE%7D%5BR_i%5D%5E2%20=%20%5Cleft(%20%5Cfrac%7B1%7D%7B2%7D%20%5Ccdot%20(1)%5E2%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Ccdot%20(-1)%5E2%20%5Cright)%20-%200%5E2%20=%201"></p>
</section>
<section id="expected-sum-of-returns" class="level2">
<h2 class="anchored" data-anchor-id="expected-sum-of-returns">Expected Sum of Returns</h2>
<p>Let’s now define another Discrete Random Variable <img src="https://latex.codecogs.com/png.latex?S_i"> which is the sum of the returns after n toss. Hence, <img src="https://latex.codecogs.com/png.latex?S_i%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20R_i"> with an initial condition that <img src="https://latex.codecogs.com/png.latex?S_0=0">. This initial condition not only makes sense (we did not win any money before to start the game) but it will also constitutes an important initial condition in the definition of Brownian Motion (or Wiener Process)</p>
<p>The expectation of <img src="https://latex.codecogs.com/png.latex?S_i"> is then: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BS_i%5D%20=%20%5Cmathbb%7BE%7D%20%5Cleft%5B%20%5Csum_%7Bi=0%7D%5E%7Bn%7D%20R_i%20%5Cright%5D%20=%20%5Cmathbb%7BE%7D%20%5Cleft%5B%20R_0%20+%20R_1%20+%20%5Cdots%20+%20R_n%20%5Cright%5D%20=%20%5Cmathbb%7BE%7D%5BR_0%5D%20+%20%5Cmathbb%7BE%7D%5BR_1%5D%20+%20%5Cdots%20+%20%5Cmathbb%7BE%7D%5BR_n%5D%20=%200%20+%200%20+%20%5Cdots%20+%200%20=%200%20"></p>
<p>And the variance of <img src="https://latex.codecogs.com/png.latex?S_i"> is then: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BS_i%5D%20=%20%5Cmathbb%7BE%7D%5BS_i%5E2%5D%20-%20%5Cmathbb%7BE%7D%5BS_i%5D%5E2"></p>
<p>Note how the second term <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BS_i%5D%5E2%20=%200"></p>
<p><span id="eq-var1"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BS_i%5D%20=%20%5Cmathbb%7BE%7D%20%5Cleft%5B%20%5Cleft(%20%5Csum_%7Bi=0%7D%5E%7Bn%7D%20R_i%20%5Cright)%5E2%20%5Cright%5D%20=%20%5Cmathbb%7BE%7D%20%5Cleft%5B%20R_0%5E2%20+%20R_1%5E2%20+%20%5Cdots%20+%20R_n%5E2%20+%202R_1R_2%20+%202R_1R_3%20+%20%5Ccdots%20%5Cright%5D%20%5Ctag%7B1%7D"></span></p>
<p>Because the events are independents, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BR_i%20R_j%5D%20=%200">. Hence all the double terms in Equation&nbsp;1 above are equals to 0 and <span id="eq-var2"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BS_i%5D%20=%20%5Cmathbb%7BE%7D%5BR_0%5E2%5D%20+%20%5Cmathbb%7BE%7D%5BR_1%5E2%5D%20+%20%5Cdots%20+%20%5Cmathbb%7BE%7D%5BR_n%5E2%5D%20=%201%20+%201%20+%20%5Cdots%20+%201%20=%20n%20%5Ccdot%201%20=%20n%20%5Ctag%7B2%7D"></span></p>
</section>
<section id="the-markov-property" class="level2">
<h2 class="anchored" data-anchor-id="the-markov-property">The Markov Property</h2>
<p>Imagine, we already threw the coin a few times, let’s say 10 times. Now, we have some additional information as we know <img src="https://latex.codecogs.com/png.latex?S_%7B10%7D">. We could ask ourselves the question what is the expectation for the next toss considering that additional information. It would make sense to say that we will get no more no less that what we already have since <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BR_i%5D%20=%200">. Mathematically, we can write this: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Cleft%5B%20S_%7Bi+1%7D%20%7C%20R_1,%20R_2,%20%5Cdots,%20R_i%20%5Cright%5D%20=%20S_i"></p>
<p>The expected value of <img src="https://latex.codecogs.com/png.latex?S_i"> is only dependent of the previous value <img src="https://latex.codecogs.com/png.latex?s_%7Bi-1%7D"> and not of any previous values (no memory beyond the one prior value)</p>
<p>The idea of the <em>Markov Property</em> is to say that the Random Walk Stochastic Process has no memory beyond the point where it (the walker) is now.</p>
</section>
<section id="the-martingale-property" class="level2">
<h2 class="anchored" data-anchor-id="the-martingale-property">The Martingale Property</h2>
<p>The conditional probability of any point in the future is what you already have.</p>
<p>And actually, we can generalize this further and state that: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5Cleft%5B%20S_i%20%7C%20S_j%20%5Cspace%20%5Cforall%20i%20%5Cgt%20j%20%5Cright%5D%20=%20S_j"></p>
<p>In a ‘fair game’, knowledge of the past will be of no value in predicting future events.</p>
</section>
<section id="the-quadratic-variation" class="level2">
<h2 class="anchored" data-anchor-id="the-quadratic-variation">The Quadratic Variation</h2>
<p>The quadratic variation of a random walk is defined as <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5En%20(S_i%20-%20S_%7Bi-1%7D)%5E2"></p>
<p>The quadratic variation will be an extremely important concept as we extend the random-walk from a discrete time model to a continuous time model (aka to a Brownian Motion or Wiener process).</p>
<p>Intuitively, it makes sense to say that <img src="https://latex.codecogs.com/png.latex?(S_i%20-%20S_%7Bi-1%7D)%20=%20%5Cpm%201"> Hence <img src="https://latex.codecogs.com/png.latex?(S_i%20-%20S_%7Bi-1%7D)%5E2%20=%201"> Hence <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5En%20(S_i%20-%20S_%7Bi-1%7D)%5E2%20=%20n"></p>
</section>
</section>
<section id="quadratic-variation-and-transition-to-continuous-time" class="level1">
<h1>Quadratic variation and transition to continuous time</h1>
<p>In the previous setting, each unit of time was 1 unit and bet sizes were <img src="https://latex.codecogs.com/png.latex?%5Cpm%201">. We are making 2 changes to this situation.</p>
<ul>
<li>Now, we think of a time as <em>a certain amount of time</em> that we call <img src="https://latex.codecogs.com/png.latex?t">. That ‘certain amount of time’ is continuous and we can chunk it down into <img src="https://latex.codecogs.com/png.latex?n"> pieces. In this context, each piece of time is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bt%7D%7Bn%7D"> long. The goal will be to increase the size of <img src="https://latex.codecogs.com/png.latex?n"> until <img src="https://latex.codecogs.com/png.latex?n%20%5CRightarrow%20%5Cinfty"></li>
<li>the bet size are now <img src="https://latex.codecogs.com/png.latex?%5Csqrt%20%5Cfrac%7Bt%7D%7Bn%7D"></li>
</ul>
<p>To feel why are we making these changes, let’s revisit the quadratic variation on these new units of time and bet sizes. <img src="https://latex.codecogs.com/png.latex?S_%7Bi+1%7D%20-%20S_i%20=%20%5Cpm%20%5Csqrt%7B%5Cfrac%7Bt%7D%7Bn%7D%7D"> Quadratic variation is now <span id="eq-quad-variation"><img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5En%20%5Cleft(%20%5Cpm%20%5Csqrt%7B%5Cfrac%7Bt%7D%7Bn%7D%7D%20%5Cright)%5E2%20=%20n%20%5Ccdot%20%5Cfrac%7Bt%7D%7Bn%7D%20=%20t%20%5Ctag%7B3%7D"></span></p>
<p>In this way, the quadratic variation is the total time of the coin tossing. This time is still finite.</p>
<p>In this experiment, both the markov and martingale properties are still valid.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Notes
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note that:</p>
<ul>
<li>as n increases, the time decreases by a factor of <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7Bn%7D"></li>
<li>as n increases, the bet size decreases by a factor of <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B%5Cfrac%7B1%7D%7Bn%7D%7D"></li>
<li>as n increases to <img src="https://latex.codecogs.com/png.latex?%5Cinfty">, both the time and the bets size will decrease to <img src="https://latex.codecogs.com/png.latex?0"> but not in the same way (by the same order)</li>
<li>as n increases to <img src="https://latex.codecogs.com/png.latex?%5Cinfty">, the random walk stays finite! The random-walk stays continuous everywhere but differentiable nowhere</li>
<li>the limiting process as n tends to <img src="https://latex.codecogs.com/png.latex?%5Cinfty"> and time tends to <img src="https://latex.codecogs.com/png.latex?0"> (think <img src="https://latex.codecogs.com/png.latex?dt">) creates a Brownian Motion (the Continuous random variable is called <img src="https://latex.codecogs.com/png.latex?B_t">) or Wiener process (variable called <img src="https://latex.codecogs.com/png.latex?W_t">)</li>
</ul>
</div>
</div>
<p>Why does it matter that the time-step is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bt%7D%7Bn%7D"> and the bet-size is <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B%5Cfrac%7B1%7D%7Bn%7D%7D">? Any other choice would have not made the random-walk finite (it could have gone to infinity into a finite time or not move at all)</p>
</section>
<section id="the-probability-of-wiener-processes-or-brownian-motions" class="level1">
<h1>The probability of Wiener Processes or Brownian Motions</h1>
<p>Although Brownian motions and Weiner processes are often used interchangeably, there is semantic difference, one could make. Brownian motion is the physical phenomenon of random movement of microscopic particles suspended in a fluid, such as dust in air or pollen in water. Wiener process is a mathematical model of Brownian motion, which is a continuous-time stochastic process that satisfies the following properties. The Weiner process models the standard Brownian motion. They are other type of Brownian motions that are not modeled by the Weiner process like geometric brownian motion, fractional brownian motion and Ornstein-Uhlenbeck process.</p>
<p>We denotes a Wiener Process as <img src="https://latex.codecogs.com/png.latex?W_t"> or <img src="https://latex.codecogs.com/png.latex?W(t)"> with initial condition that <img src="https://latex.codecogs.com/png.latex?W_0%20=%200"> or <img src="https://latex.codecogs.com/png.latex?W(0)%20=%200"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
definition of a Weiner process
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><img src="https://latex.codecogs.com/png.latex?W_0%20=%200"></li>
<li><img src="https://latex.codecogs.com/png.latex?W_t"> is a continuous path (continuous everywhere, differentiable nowhere)</li>
<li>independent increments. For <img src="https://latex.codecogs.com/png.latex?t_1%20%3C%20t_2%20%3C%20t_3%20%3C%20t_4%20%3C%20%5Ccdots">, <img src="https://latex.codecogs.com/png.latex?W_%7Bt_4%7D%20-%20W_%7Bt_3%7D"> and <img src="https://latex.codecogs.com/png.latex?W_%7Bt_2%7D%20-%20W_%7Bt_1%7D"> are independent. In other words, the change in the process over any time interval is independent of its past and future values.</li>
<li>normally distributed increments. <img src="https://latex.codecogs.com/png.latex?%7CW_t%20-%20W_s%7C%20%5Csim%20N(0,%20%7Ct-s%7C)"> The variance is equivalent to the length of the interval.</li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example. Show that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_t%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20=%20W_s">
</div>
</div>
<div class="callout-body-container callout-body">
<p>In other words, let’s show that the expectation of the stochastic process <img src="https://latex.codecogs.com/png.latex?W_t"> upon the condition that we know everything up to the point <img src="https://latex.codecogs.com/png.latex?s"> [<img src="https://latex.codecogs.com/png.latex?W_t"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BF%7D_s"> measurable] is <img src="https://latex.codecogs.com/png.latex?W_s"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_t%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20=%20%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_t%20-%20W_s%20+%20W_S%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20=%20%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_t%20-W_s%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20+%20%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_s%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D"> Because (bullet point #4) increments of a Brownian motion are normally distributed with mean 0: <img src="https://latex.codecogs.com/png.latex?%7CW_t%20-%20W_s%7C%20%5Csim%20N(0,%20%7Ct-s%7C)">, we can establish that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_t%20-W_s%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20=%200"></p>
<p>Hence: <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_t%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20%20=%20%5Cmathbb%7BE%7D_s%20%5Cleft%5B%20W_s%20%7C%20%5Cmathcal%7BF_s%7D%20%5Cright%5D%20=%20W_s"></p>
</div>
</div>
<section id="properties-of-weiner-processes" class="level2">
<h2 class="anchored" data-anchor-id="properties-of-weiner-processes">Properties of Weiner processes</h2>
<ul>
<li>They are <strong>finite</strong> - thanks to the increment (y-axis) scale with the square root of the time-steps</li>
<li>they are <strong>continuous</strong> - limit when time-steps are infinitely small and the random-walk is becoming continuous</li>
<li>follow <strong>Markov property</strong></li>
<li>follow <strong>Martingale property</strong></li>
<li>the quadratic variation from 0 to t is <img src="https://latex.codecogs.com/png.latex?t"> itself - see Equation&nbsp;3</li>
<li><strong>normality</strong>. <img src="https://latex.codecogs.com/png.latex?W(t_i)%20-%20W(t_%7Bi-1%7D)"> is normally distributed with mean 0 and variance <img src="https://latex.codecogs.com/png.latex?t_i%20-%20t_%7Bi-1%7D"></li>
</ul>
</section>
<section id="expectation-of-w_t" class="level2">
<h2 class="anchored" data-anchor-id="expectation-of-w_t">Expectation of <img src="https://latex.codecogs.com/png.latex?W_t"></h2>
<p>Expectation is the same as in the random-walk except this time we are using the limit when <img src="https://latex.codecogs.com/png.latex?n%20%5Cto%200">. <span id="eq-exp-bm"><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BW_t%5D%20=%20%5Cmathbb%7BE%7D%20%5Cleft%5B%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Csum_%7Bi=1%7D%5En%20R_i%5Cright%5D%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Csum_%7Bi=1%7D%5En%20%5Cmathbb%7BE%7D%5BR_i%5D%20=%20n%20%5Ccdot%200%20=%200%20%5Ctag%7B4%7D"></span></p>
<p>In this sense, the mean of <img src="https://latex.codecogs.com/png.latex?W_t%20=%200">.</p>
</section>
<section id="variance-of-w_t" class="level2">
<h2 class="anchored" data-anchor-id="variance-of-w_t">Variance of <img src="https://latex.codecogs.com/png.latex?W_t"></h2>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7Dar%5BW_t%5D%20=%20%5Cmathbb%7BE%5BW_t%5E2%5D%7D%20-%20%5Cmathbb%7BE%7D%5BW_t%5D%5E2"></p>
<p>From Equation&nbsp;4, we already know that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BW_t%5D%20=%200">; hence <img src="https://latex.codecogs.com/png.latex?%5Cleft(%20%5Cmathbb%7BE%7D%5BW_t%5D%20%5Cright)%5E2"> is also <img src="https://latex.codecogs.com/png.latex?0"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BW_t%5E2%5D%20=%20%5Cmathbb%7BE%7D%5Cleft%5B%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Csum_%7Bi=1%7D%5En%20R_i%5E2%20%5Cright%5D%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20%5Csum_%7Bi=1%7D%5En%20%5Cmathbb%7BE%7D%5BR_i%5E2%5D%20=%20%5Clim_%7Bn%20%5Cto%20%5Cinfty%7D%20n%20%5Ccdot%20%5Cleft(%20%5Csqrt%7B%5Cfrac%7Bt%7D%7Bn%7D%7D%20%5Cright)%5E2%20=%20t"></p>


</section>
</section>

 ]]></description>
  <category>Random Walk</category>
  <category>Brownian Motion</category>
  <category>Weiner Process</category>
  <category>Quadratic Variation</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part1/brownian-motion/</guid>
  <pubDate>Wed, 19 Jul 2023 17:00:00 GMT</pubDate>
  <media:content url="https://fderyckel.github.io/blog.html/posts/quant-part1/brownian-motion/random-walk.png" medium="image" type="image/png" height="165" width="144"/>
</item>
<item>
  <title>Black-Schole Equation</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part3/black-schole/</link>
  <description><![CDATA[ 





<section id="deriving-the-black-schole-equation" class="level1">
<h1>Deriving the Black-Schole Equation</h1>
</section>
<section id="solving-the-black-schole-equation" class="level1">
<h1>Solving the Black-Schole Equation</h1>
</section>
<section id="recap" class="level1">
<h1>Recap</h1>
<section id="european-vanilla" class="level2">
<h2 class="anchored" data-anchor-id="european-vanilla">European Vanilla</h2>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20S%20%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D%20+%20r%20S%20%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D%20-%20rV%20=%200"></p>
<ul>
<li>V is the option price at the time <img src="https://latex.codecogs.com/png.latex?t">. So <img src="https://latex.codecogs.com/png.latex?V%20=%20V(S,%20t)"><br>
</li>
<li>S is the asset spot price</li>
<li>t is the time to expiry (in years)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Csigma"> is the asset diffusion term (its stochastic element)</li>
<li><img src="https://latex.codecogs.com/png.latex?r"> is the annualized continuously compounded risk-free rate (imaginary friend)</li>
</ul>
<p>In the case of a <strong>European Call Option with no-dividend</strong>, the BSE has solution:</p>
<p><img src="https://latex.codecogs.com/png.latex?C%20=%20S%20N(d_1)%20-%20K%20e%5E%7B-r(T-t)%7D%20N(d_2)"></p>
<p>And in the case of a <strong>European Put Option with no-dividend</strong>, the BSE has solution: <img src="https://latex.codecogs.com/png.latex?P%20=%20K%20e%5E%7B-r(T-t)%7DN(-d_2)%20-%20SN(-d_1)"></p>
<p>where, <img src="https://latex.codecogs.com/png.latex?d_1%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7BT-t%7D%7D%20%5Cleft%5B%20ln%20%5Cleft(%20%5Cfrac%7BS%7D%7BK%7D%20%5Cright)%20+%20%5Cleft(%20r%20+%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7D%20%5Cright)%20(T-t)%20%5Cright%5D"></p>
<p><img src="https://latex.codecogs.com/png.latex?d_2%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7BT-t%7D%7D%20%5Cleft%5B%20ln%20%5Cleft(%20%5Cfrac%7BS%7D%7BK%7D%20%5Cright)%20+%20%5Cleft(%20r%20-%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7D%20%5Cright)%20(T-t)%20%5Cright%5D%20=%20d1%20-%20%5Csigma%20%5Csqrt%7BT-t%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?N(x)%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%20%5Cpi%7D%7D%20%5Cint_%7B-%5Cinfty%7D%5E%7Bx%7D%20e%5E%7B%5Cfrac%7B-1%7D%7B2%7D%20x%5E2%7D%20dx"></p>
<ul>
<li>K is the strike price</li>
</ul>
</section>
<section id="european-vanilla-with-dividends" class="level2">
<h2 class="anchored" data-anchor-id="european-vanilla-with-dividends">European Vanilla with Dividends</h2>
<p>And in the case of a dividend (ok … assuming continuous dividend yield):</p>
<p><img src="https://latex.codecogs.com/png.latex?C%20=%20S%20e%5E%7B-D(T-t)%7D%20N(d_1)%20-%20K%20e%5E%7B-r(T-t)%7D%20N(d_2)"></p>
<p><img src="https://latex.codecogs.com/png.latex?P%20=%20K%20e%5E%7B-r(T-t)%7DN(-d_2)%20-%20Se%5E%7B-D(T-t)%7DN(-d_1)"></p>
<p><img src="https://latex.codecogs.com/png.latex?d_1%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7BT-t%7D%7D%20%5Cleft%5B%20ln%20%5Cleft(%20%5Cfrac%7BS%7D%7BK%7D%20%5Cright)%20+%20%5Cleft(%20r%20-%20D%20+%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7D%20%5Cright)%20(T-t)%20%5Cright%5D"></p>
<p><img src="https://latex.codecogs.com/png.latex?d_2%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7BT-t%7D%7D%20%5Cleft%5B%20ln%20%5Cleft(%20%5Cfrac%7BS%7D%7BK%7D%20%5Cright)%20+%20%5Cleft(%20r%20-%20D%20-%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7D%20%5Cright)%20(T-t)%20%5Cright%5D%20=%20d1%20-%20%5Csigma%20%5Csqrt%7BT-t%7D"></p>
</section>
</section>
<section id="the-greeks" class="level1">
<h1>The Greeks</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 14%">
<col style="width: 56%">
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 10%">
</colgroup>
<thead>
<tr class="header">
<th>Greek</th>
<th>Description</th>
<th>Formula</th>
<th>Call Option</th>
<th>Put Option</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Delta</td>
<td>Sensitivity of option value to changes in asset price</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20S%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?N(d_1)"></td>
<td><img src="https://latex.codecogs.com/png.latex?-N(-d_!)"></td>
</tr>
<tr class="even">
<td>Gamma</td>
<td>Sensitivity of Delta to changes in asset price</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2%20V%7D%7B%5Cpartial%20S%5E2%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BN(d_1)%7D%7BS%20%5Csigma%20%5Csqrt%7Bt%7D%7D"></td>
<td></td>
</tr>
<tr class="odd">
<td>Vega</td>
<td>Sensitivity of option value to changes in volatility</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20%5Csigma%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?S%20N(d_1)%20%5Csqrt%7Bt%7D"></td>
<td></td>
</tr>
<tr class="even">
<td>Theta</td>
<td>Sensitivity of option value to changes in time</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D"></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>Rho</td>
<td>Sensitivity of option value to change in risk-free rate</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20r%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?Kte%5E%7B-rt%7D%20N(d_2)"></td>
<td><img src="https://latex.codecogs.com/png.latex?-Kte%5E%7B-rt%7D%20N(-d_2)"></td>
</tr>
</tbody>
</table>
</section>
<section id="create-a-function-for-numerical-computation" class="level1">
<h1>Create a function for numerical computation</h1>
<section id="using-python" class="level2">
<h2 class="anchored" data-anchor-id="using-python">Using Python</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> norm</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt </span>
<span id="cb1-5"></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> option_pricing: </span>
<span id="cb1-8">  </span>
<span id="cb1-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  To price European Style options without dividends</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  """</span></span>
<span id="cb1-12">  </span>
<span id="cb1-13">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, spot, strike, rate, dte, sigma): </span>
<span id="cb1-14">    </span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assign our variables</span></span>
<span id="cb1-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spot</span>
<span id="cb1-17">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> strike</span>
<span id="cb1-18">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rate</span>
<span id="cb1-19">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dte    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># days to expiration (in years)</span></span>
<span id="cb1-20">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigma</span>
<span id="cb1-21">    </span>
<span id="cb1-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to avoid zero division, let not allow strike of 0</span></span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb1-24">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ZeroDivisionError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The Strike Price cannot be 0'</span>)</span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: </span>
<span id="cb1-26">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dte) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-27">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d2_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) </span>
<span id="cb1-28">    </span>
<span id="cb1-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'callPrice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'putPrice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'callDelta'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'putDelta'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gamma'</span>]: </span>
<span id="cb1-30">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__dict__[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-31">      </span>
<span id="cb1-32">    [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.callPrice, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.putPrice] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._price() </span>
<span id="cb1-33">    [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.callDelta, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.putDelta] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._delta()</span>
<span id="cb1-34">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._gamma()</span>
<span id="cb1-35">    </span>
<span id="cb1-36">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _price(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): </span>
<span id="cb1-37">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb1-38">        call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> maximum(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike)</span>
<span id="cb1-39">        put <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> maximum(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot) </span>
<span id="cb1-40">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: </span>
<span id="cb1-41">        call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d2_))</span>
<span id="cb1-42">        put <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d2_)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_))</span>
<span id="cb1-43">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [call, put] </span>
<span id="cb1-44">    </span>
<span id="cb1-45">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _delta(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): </span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb1-47">      call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb1-48">      put <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strike <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb1-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: </span>
<span id="cb1-50">      call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm.cdf(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_)</span>
<span id="cb1-51">      put <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>norm.cdf(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_)</span>
<span id="cb1-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [call, put]</span>
<span id="cb1-53">  </span>
<span id="cb1-54">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _gamma(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): </span>
<span id="cb1-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> norm.cdf(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._d1_) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tabulate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tabulate</span>
<span id="cb2-2"></span>
<span id="cb2-3">option <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option_pricing(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5">header <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Call Price'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Put Price'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Call Delta'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gamma'</span>]</span>
<span id="cb2-6">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[option.callPrice, option.putPrice, option.callDelta, option.gamma]]</span>
<span id="cb2-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tabulate(table, header))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Call Price    Put Price    Call Delta      Gamma
------------  -----------  ------------  ---------
     7.96557      7.96557      0.539828  0.0269914</code></pre>
</div>
</div>
</section>
<section id="retrieving-option-data-using-yahoo-finance" class="level2">
<h2 class="anchored" data-anchor-id="retrieving-option-data-using-yahoo-finance">Retrieving option data using Yahoo finance</h2>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> yfinance <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> yf </span>
<span id="cb4-2"></span>
<span id="cb4-3">amd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yf.Ticker(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AMD'</span>)</span>
<span id="cb4-4">amd_hist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> amd.history(start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-01-01'</span>)</span>
<span id="cb4-5">options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> amd.option_chain(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-12-15'</span>)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb4-8">dte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> datetime.today()).days </span>
<span id="cb4-9"></span>
<span id="cb4-10">log_returns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(amd_hist[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Close'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> amd_hist[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Close'</span>].shift(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).dropna()</span>
<span id="cb4-11">historical_vol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_returns.std() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(dte)</span>
<span id="cb4-12"></span>
<span id="cb4-13">spot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">116</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> strike <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb4-14"></span>
<span id="cb4-15">amd_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option_pricing(spot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>spot, strike<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>strike, rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rate, dte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>historical_vol)</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'The BS model for AMD 147 days ahead is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>amd_opt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>callPrice<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The BS model for AMD 147 days ahead is 2.7995</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> options.calls[(options.calls[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (options.calls[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)]</span>
<span id="cb6-2">df.reset_index(drop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, inplace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-3"></span>
<span id="cb6-4">df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'price'</span>: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lastPrice'</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'impl_vol'</span>: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'impliedVolatility'</span>]})</span>
<span id="cb6-5">df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'delta'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gamma'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df1)): </span>
<span id="cb6-8">  df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'delta'</span>].iloc[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option_pricing(spot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>spot, strike<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>].iloc[i], rate, dte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dte, sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'impl_vol'</span>].iloc[i]).callDelta</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df1)):</span>
<span id="cb7-2">    </span>
<span id="cb7-3">    df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Delta'</span>].iloc[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option_pricing(spot,df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>].iloc[i],rate,dte,df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'impl_vol'</span>].iloc[i]).callDelta</span>
<span id="cb7-4">    df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gamma'</span>].iloc[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> option_pricing(spot,df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'strike'</span>].iloc[i],rate,dte,df1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'impl_vol'</span>].iloc[i]).gamma</span></code></pre></div>
</div>


</section>
</section>

 ]]></description>
  <category>Black-Schole</category>
  <category>Risk Neutrality</category>
  <category>Greeks</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part3/black-schole/</guid>
  <pubDate>Mon, 17 Jul 2023 17:00:00 GMT</pubDate>
  <media:content url="https://fderyckel.github.io/blog.html/posts/quant-part3/black-schole/blacl-scholes.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>03 - Stochastic Calculus - Part III</title>
  <dc:creator>Francois de Ryckel</dc:creator>
  <link>https://fderyckel.github.io/blog.html/posts/quant-part2/03-SDE-part3/</link>
  <description><![CDATA[ 





<section id="recall" class="level1">
<h1>Recall</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 11%">
<col style="width: 88%">
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Itô Lemma</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?F(X_t)"></td>
<td><img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7Bd%5E2F%7D%7BdX%5E2%7D%20%5Cspace%20dt%20+%20%5Cfrac%7BdF%7D%7BdX%7D%20%5Cspace%20dx"></td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?F(t,%20X_t)"></td>
<td><img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cleft(%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20t%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20F%7D%7B%5Cpartial%20X%5E2%7D%20%5Cright)%20dt%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20dX"></td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?V(S)"> when <img src="https://latex.codecogs.com/png.latex?dS%20=%20%5Cmu%20S%20dt%20+%20%5Csigma%20S%20dX"></td>
<td><img src="https://latex.codecogs.com/png.latex?dV%20=%20%5Cleft(%20%5Cmu%20S%20%5Cfrac%7BdV%7D%7BdS%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%5E2%20S%5E2%20%5Cfrac%7Bd%5E2V%7D%7BdS%5E2%7D%20%5Cright)dt%20+%20%5Cleft(%20%5Csigma%20S%20%5Cfrac%7BdV%7D%7BdS%7D%5Cright)%20dX"></td>
</tr>
</tbody>
</table>
</section>
<section id="itô-integrals-as-non-anticipatory" class="level1">
<h1>Itô Integrals as non-anticipatory</h1>
<p>Let’s consider the stochastic integral of the form <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5ET%20f(t,%20X(t))%20dX(t)"> where <img src="https://latex.codecogs.com/png.latex?X_t"> is a Brownian motion. We’ll shorten this form to <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5ET%20f(t,%20X)%20dX"></p>
<p>We define this integral as <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5ET%20f(t,%20X)%20dX%20=%20%5Clim_%7BN%20%5Cto%20%5Cinfty%7D%20%5Csum_%7Bi=0%7D%5E%7BN-1%7D%20f(t_i,%20X_i)%20%5Ccdot%20%5Cunderbrace%7B%20(X_%7Bi+1%7D%20-%20X_i)%20%7D_%7BdX%7D"></p>
<p>It’s important to define it this way in order for the itô integral to stay <strong>non-anticipatory</strong>. We know everything up to time <img src="https://latex.codecogs.com/png.latex?t_i"> and so the only uncertainties left is <img src="https://latex.codecogs.com/png.latex?X_%7Bi+1%7D%20-%20X_i"> which is <img src="https://latex.codecogs.com/png.latex?dX"></p>
</section>
<section id="product-rule-within-stochastic-calculus" class="level1">
<h1>Product rule within Stochastic Calculus</h1>
<p>When dealing with Stochastic Differential Equations, we can adapt some of the rules of classical calculus such as the product rule: <img src="https://latex.codecogs.com/png.latex?d(xy)%20=%20xdy%20+%20ydx"></p>
<p>Let’s say we have 2 stochastic processes: <img src="https://latex.codecogs.com/png.latex?d(X(t))%20=%20%5Cmu_1%20X(t)%20dt%20+%20%5Csigma_1%20X(t)%20%20dW_t"> <img src="https://latex.codecogs.com/png.latex?d(Y(t))%20=%20%5Cmu_2%20Y(t)%20dt%20+%20%5Csigma_2%20Y(t)%20dW_t"></p>
<p>And we define a function <img src="https://latex.codecogs.com/png.latex?F"> which is a product of these 2 stochastic processes such that <img src="https://latex.codecogs.com/png.latex?F%20=%20F(X,Y)%20=%20XY">.</p>
<p>Using a Taylor Series Expansion, we can write: <img src="https://latex.codecogs.com/png.latex?F(X%20+%20dX,%20Y%20+%20dY)%20%5Capprox%20F(X,Y)%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20dX%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20Y%7D%20dY%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20X%5E2%7D%20dX%5E2%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20Y%5E2%7D%20dY%5E2%20+%20%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20X%20%5Cpartial%20Y%7D%20dXdY%20+%20%5Cdots"></p>
<p>Hence, <span id="eq-product-TS-expan"><img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20dX%20+%20%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20Y%7D%20dY%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20X%5E2%7D%20dX%5E2%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20Y%5E2%7D%20dY%5E2%20+%20%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20X%20%5Cpartial%20Y%7D%20dXdY%20+%20%5Cdots%20%5Ctag%7B1%7D"></span></p>
<p>Now, we can calculate all these partial derivatives and plugged them back in the above equation. <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20=%20Y"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2%20F%7D%7B%5Cpartial%20X%5E2%7D%20=%200">.</p>
<p>Similarly <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20Y%7D%20=%20X"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2%20F%7D%7B%5Cpartial%20Y%5E2%7D%20=%200">.</p>
<p>Finally: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20X%20%5Cpartial%20Y%7D%20=%201"></p>
<p>Plugging it all back in Equation&nbsp;1: <span id="eq-product-rule"><img src="https://latex.codecogs.com/png.latex?dF%20=%20Y%20dX%20+%20X%20dY%20+%20dXdY%20%5Ctag%7B2%7D"></span></p>
</section>
<section id="integral-by-parts" class="level1">
<h1>Integral by parts</h1>
<p>In classical calculus, we re-use the product rule to come up with the integration by part: <img src="https://latex.codecogs.com/png.latex?d(xy)%20=%20xdy%20+%20ydx">. That is <img src="https://latex.codecogs.com/png.latex?xdy%20=%20d(xy)%20-%20ydx"> which we can integrate for and get: <img src="https://latex.codecogs.com/png.latex?%5Cint%20xdy%20=%20%5Cint%20d(xy)%20-%20%5Cint%20y%20dx"> which is the same as <img src="https://latex.codecogs.com/png.latex?%5Cint%20x%20dy%20=%20xy%20-%20%5Cint%20y%20dx">.</p>
<p>Let’s bring this to stochastic calculus. Again <img src="https://latex.codecogs.com/png.latex?F"> is a function of the product of 2 stochastic processes: <img src="https://latex.codecogs.com/png.latex?F%20=%20F(X,Y)%20=%20XY"> Using the same logic and our previous result Equation&nbsp;2, we write <img src="https://latex.codecogs.com/png.latex?d(XY)%20=%20Y%20dX%20+%20X%20dY%20+%20dXdY"> <img src="https://latex.codecogs.com/png.latex?X%20dY%20=%20d(XY)%20-%20Y%20dX%20-%20dXdY%20"> <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20X_s%20dY_s%20=%20%5Cint_0%5Et%20d(X_sY_s)%20-%20%5Cint_0%5Et%20Y_s%20dX_s%20-%20%5Cint_0%5Et%20dX_sdY_s"> <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5Et%20X_s%20dY_s%20=%20X_tY_t%20-%20X_0Y_0%20-%20%5Cint_0%5Et%20Y_s%20dX_s%20-%20%5Cint_o%5Et%20dX_sdY_s"></p>
</section>
<section id="quotient-rule-within-stochastic-calculus" class="level1">
<h1>Quotient Rule within Stochastic Calculus</h1>
<p>We will re-use the Taylor Series Expansion (Equation&nbsp;1) except this time the function <img src="https://latex.codecogs.com/png.latex?F"> is a function of the quotient of 2 stochastic processes: <img src="https://latex.codecogs.com/png.latex?F%20=%20F(X,%20Y)%20=%20%5Cfrac%7BX%7D%7BY%7D">. Calculating all the partial derivatives: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20X%7D%20=%20%5Cfrac%7B1%7D%7BY%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2%20F%7D%7B%5Cpartial%20X%5E2%7D%20=%200">.</p>
<p>Similarly <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20F%7D%7B%5Cpartial%20Y%7D%20=%20%5Cfrac%7B-X%7D%7BY%5E2%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2%20F%7D%7B%5Cpartial%20Y%5E2%7D%20=%20%5Cfrac%7B2X%7D%7BY%5E3%7D">.</p>
<p>Finally: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E2F%7D%7B%5Cpartial%20X%20%5Cpartial%20Y%7D%20=%20%5Cfrac%7B-1%7D%7BY%5E2%7D"></p>
<p>Putting it all back together: <img src="https://latex.codecogs.com/png.latex?dF%20=%20%5Cfrac%7B1%7D%7BY%7D%20dX%20+%20%5Cfrac%7B-X%7D%7BY%5E2%7D%20dY%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B2X%7D%7BY%5E3%7D%20dY%5E2+%20%5Cfrac%7B-1%7D%7BY%5E2%7D%20dXdY"> Which we can re-write as: <span id="eq-quotient-rule"><img src="https://latex.codecogs.com/png.latex?dF%20=%20d%20%5Cleft(%20%5Cfrac%7BX%7D%7BY%7D%20%5Cright)%20=%20%5Cfrac%7BX%7D%7BY%7D%20%5Ccdot%20%5Cleft(%20%5Cfrac%7B1%7D%7BX%7D%20dX%20-%20%5Cfrac%7B1%7D%7BY%7D%20dY%20-%20%5Cfrac%7B1%7D%7BXY%7D%20dXdY%20+%20%5Cfrac%7B1%7D%7BY%5E2%7D%20dY%5E2%5Cright)%20%5Ctag%7B3%7D"></span></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
In the quant world.
</div>
</div>
<div class="callout-body-container callout-body">
<p>we can word these results in the following way - taken from <a href="https://fermatslastspreadsheet.com/2011/12/28/itos-product-and-quotient-rules-as-described-by-a-trader/">here</a>:</p>
<ul>
<li><strong>Itô product rule:</strong> we buy correlation when we have a product</li>
<li><strong>Itô quotient rule:</strong> we sell correlation when we have a ratio, and we are long vol of the denominator.</li>
</ul>
</div>
</div>


</section>

 ]]></description>
  <category>time-series</category>
  <guid>https://fderyckel.github.io/blog.html/posts/quant-part2/03-SDE-part3/</guid>
  <pubDate>Sun, 02 Jul 2023 17:00:00 GMT</pubDate>
</item>
</channel>
</rss>
